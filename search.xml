<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring学习笔记(01)-从零开始</title>
      <link href="/post/10151.html"/>
      <url>/post/10151.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：Spring简介"><a href="#第一节：Spring简介" class="headerlink" title="第一节：Spring简介"></a>第一节：Spring简介</h1><blockquote><p>Spring 是一个开源框架，它是为了解决 Java 企业级应用开发复杂性而创建的，让程序员更方便地使用现有技术！</p></blockquote><p>Spring 的主要优势之一是分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring 使用基本的 JavaBean 来完成以前只可能由 EJB 完成的事。Spring 不仅限于服务器端的开发，从简单性、可测试性和松耦合的角度而言，任何 Java 应用都可以从 Spring 中受益！</p><p>简单来说，Spring 是一个<font color='DC143C'>开源的</font>、<font color='DC143C'>分层的</font>、<font color='DC143C'>轻量的</font>、<font color='DC143C'>一站式的</font> Java 企业级框架，Spring 的中文意思是“春天”，意为它的诞生给 Java 应用开发带来了春天。</p><h2 id="1-1：发展历史"><a href="#1-1：发展历史" class="headerlink" title="1.1：发展历史"></a>1.1：发展历史</h2><ul><li>2002 年：首次推出 Spring 框架的雏形—— Interface21 框架；</li><li>2004 年 3 月 24 日：Spring 框架以 interface21 为基础，经过重新设计并不断丰富其内涵，正式发布了 1.0 版本；</li></ul><h2 id="1-3：重要人物"><a href="#1-3：重要人物" class="headerlink" title="1.3：重要人物"></a>1.3：重要人物</h2><p>在 Spring 出现之前，2002 年 10 月，Rod Johnson 撰写了一本名为《Expert One-on-One J2EE设计和开发》的书。这本书概括了当时 Java 企业应用程序开发的现状，指出了 Java EE 和 EJB 组件框架中的一些主要缺陷。在这本书中，他提出了一个基于普通 Java 类和注入依赖的更简单的解决方案。</p><p>在书中，他展示了如何在不使用 EJB 的情况下构建高质量，可扩展的在线座位预定程序。为了构建这个程序，他编写了超过 30000 行的基础结构代码（牛逼）！其中包含了大量可重用的 Java 的接口和类，例如 ApplicationContext 和 BeanFactory 等。由于 Java 的接口是依赖注入的基本构建块，他将这些类的根包命名为<code>com.interface21</code>，正如罗德后来解释的那样，21 这个是指 21 世纪，寓意对 21 世纪的展望。</p><p>很难令人相信，Spring 的开创者 Rod Johnson 的专业是音乐学，并不是计算机，他是悉尼大学的音乐学博士，在 Spring 发展到 3.x 版本时，于 2012 年 6 月，Rod Johnson 离开了 Spring 团队！</p><h1 id="第二节：核心"><a href="#第二节：核心" class="headerlink" title="第二节：核心"></a>第二节：核心</h1><h2 id="2-1：控制反转"><a href="#2-1：控制反转" class="headerlink" title="2.1：控制反转"></a>2.1：控制反转</h2><blockquote><p>控制反转（IoC）是一种软件设计原则：将对象的控制权（创建和销毁）由应用程序转移到外部容器！</p></blockquote><p>用比较通俗易懂的话来解释就是：在传统程序代码中，你需要什么对象就去创建什么对象，程序拥有对象的控制权；而在 Spring 中，所有的对象都在容器中登记，告诉容器你是个什么，你需要什么，然后程序在运行时，把你需要的对象主动给你，也把你交给需要你的对象！也就是说控制对象生存周期的不再是引用它的对象，而是由 Spring IoC 容器来控制所有对象的创建、销毁，这就是 Spring 的控制反转！我的个人理解：原本是程序主动创建对象，现在变成了程序告诉容器需要什么对象，由容器主动创建对象，然后把它“给”程序，类似于之前自己做饭，后来变成了点外卖！</p><blockquote><p>依赖注入（DI）和控制反转（IoC）是一种包含关系，因为依赖注入是实现控制反转的一种方式！</p></blockquote><p>控制反转指的是将应用程序中对象的创建和管理的控制权从应用程序代码转移到框架或容器中，而依赖注入是实现控制反转的一种机制，它通过外部配置告诉容器应该将哪些依赖注入到对象中，以实现对象之间的解耦和灵活性。换句话说，控制反转描述了一种程序设计原则，即应用程序的控制权被反转到容器中，而依赖注入是实现这种原则的具体方式。</p><p>通过依赖注入，开发人员可以将对象之间的依赖关系从代码中解耦，而不需要在代码中硬编码依赖关系，从而使得代码更加灵活、可扩展和易于维护。</p><p>在 Spring 框架中，控制反转通常通过依赖注入来实现！实现了控制反转，开发人员不再需要关注对象管理（使用 new 来创建对象，注意对象的生命周期），只需要描述对象之间的依赖关系（告诉容器你需要什么对象），可以更专注于业务逻辑！</p><p>我读过一篇对 IoC 解释比较清晰彻底的文章，推荐给你们：<a href="https://www.cnblogs.com/tanghaorong/p/13364634.html">《认识IoC控制反转&#x2F;DI依赖注入》</a>。</p><h2 id="2-2：面向切面"><a href="#2-2：面向切面" class="headerlink" title="2.2：面向切面"></a>2.2：面向切面</h2><blockquote><p>面向切面（AOP）允许开发人员在不修改业务逻辑的情况下，将横切关注点从应用程序的核心逻辑中分离出来！</p></blockquote><p>所谓横切关注点，就是那些通用的功能（比如日志记录、性能检测、事务管理等），将它们从应用程序代码中分离出来以后，会使得代码更加模式化，提高可维护性和可复用性。</p><h1 id="第三节：理念"><a href="#第三节：理念" class="headerlink" title="第三节：理念"></a>第三节：理念</h1><h2 id="3-1：轮子理论"><a href="#3-1：轮子理论" class="headerlink" title="3.1：轮子理论"></a>3.1：轮子理论</h2><p>“轮子理论”即“不要重复发明轮子”，这是西方国家的一句谚语，原话是“Don’t reinvent the wheel”。Spring 就是在轮子理论的理念和指导原则上做出来的！</p><p>我个人理解，Spring 践行“轮子理论”的重要表现就是：对于现存的优秀技术，Spring 持赞成态度，并努力整合这些优秀的技术，并没有“重复造轮子”！</p><h2 id="3-2：它的理念"><a href="#3-2：它的理念" class="headerlink" title="3.2：它的理念"></a>3.2：它的理念</h2><p>Spring 的理念跟它的诞生息息相关，它的<font color='DC143C'>目的</font>就是为了解决企业应用程序开发复杂性而创建的，它的理念就是：<font color='DC143C'>让现有技术更方便使用</font>！</p><h1 id="第四节：组成"><a href="#第四节：组成" class="headerlink" title="第四节：组成"></a>第四节：组成</h1><blockquote><p>Spring 大约有 20 个功能组件，从大的方面来分，Spring 的功能组件可以分为八大模块（Spring 5）</p></blockquote><p>详细信息如下：</p><p><img src="https://www.czblogs.cn/posts/java/10151/image-20240211160711783.png"></p><h2 id="4-1：Core-Container"><a href="#4-1：Core-Container" class="headerlink" title="4.1：Core Container"></a>4.1：Core Container</h2><p>核心容器模块是其他模块建立的基础，由 Beans、Core、Context 和 SpEL 等组件组成。没有这些核心容器，也不可能有 AOP、Web 等上层的功能，具体介绍如下：</p><ul><li>Beans 组件：提供了框架的基础部分，包括控制反转和依赖注入；</li><li>Core 组件：提供框架的底层部分，包括资源访问、类型转换及一些常用工具类；</li><li>Context 上下文组件：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等，ApplicationContext 接口是 Context 的焦点；</li><li>SpEL 组件：提供了强大的表达式语言支持，支持访问和修改属性值和方法调用，访问和修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，也支持列表投影、选择和一般的列表聚合等；</li></ul><h2 id="4-2：AOP"><a href="#4-2：AOP" class="headerlink" title="4.2：AOP"></a>4.2：AOP</h2><p>在 Core Container 之上的 AOP 和 Aspects 提供了面向切面编程实现。其中 AOP 模块提供了面向切面编程实现，提供日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中，这样各司其职，降低业务逻辑和通用功能的耦合。</p><h2 id="4-3：Aspects"><a href="#4-3：Aspects" class="headerlink" title="4.3：Aspects"></a>4.3：Aspects</h2><p>提供与 AspectJ 的集成，AspectJ 是一个功能强大且成熟的面向切面编程（AOP）框架。</p><h2 id="4-4：Insrumentation"><a href="#4-4：Insrumentation" class="headerlink" title="4.4：Insrumentation"></a>4.4：Insrumentation</h2><p>提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</p><h2 id="4-5：Messaging"><a href="#4-5：Messaging" class="headerlink" title="4.5：Messaging"></a>4.5：Messaging</h2><p>Spring 4.0 以后新增了 Spring-messaging 模块，该模块提供了对消息传递体系结构和协议的支持。</p><h2 id="4-6：Data-Access-Intergration"><a href="#4-6：Data-Access-Intergration" class="headerlink" title="4.6：Data Access&#x2F;Intergration"></a>4.6：Data Access&#x2F;Intergration</h2><p>数据访问和集成模块，包括了 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下：</p><ul><li>JDBC 组件：提供了一个 JBDC 的样例模板，使用这些模板能消除传统冗长的 JDBC 编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处；</li><li>ORM 组件：提供与流行的“对象-关系”映射框架无缝集成的 API，包括 JPA、JDO、Hibernate 和 MyBatis 等，而且还可以使用 Spring 事务管理，无需额外控制事务；</li><li>OXM 组件：提供了一个支持 Object 与 XML 映射的抽象层实现，在 Java 对象和 XML 数据之间映射；</li><li>JMS 组件：消息服务，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用 JMS，JMS 用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信；</li><li>Transactions 组件：支持两种事务管理方式，分别是编程式和声明式；</li></ul><h2 id="4-7：Web"><a href="#4-7：Web" class="headerlink" title="4.7：Web"></a>4.7：Web</h2><p>Web 模块包括 Web、Servlet、WebSocket 和 Webflux 组件，具体介绍如下：</p><ul><li>Web 组件：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IOC 容器初始化以及 Web 应用上下文；</li><li>Servlet 组件：提供了一个 Spring MVC Web 框架实现，Spring MVC 框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的 JSP 标签，完全无缝与 Spring 其他技术协作；</li><li>WebSocket 组件：提供简单接口，用户只要实现响应接口就可以快速的搭建 WebSocket Server，实现双向通讯；</li><li>Webflux 组件：Spring WebFlux 是 Spring Framework 5.x 中引入的新的响应式 web 框架。与Spring MVC不同，它不需要 Servlet API，是完全异步且非阻塞的，并且通过 Reactor 项目实现了 Reactive Streams 规范。Spring WebFlux 用于创建基于事件循环执行模型的完全异步且非阻塞的应用程序；</li></ul><h2 id="4-8：Test"><a href="#4-8：Test" class="headerlink" title="4.8：Test"></a>4.8：Test</h2><p>Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能，包含 Mock Objects，TestContext Framework，Spring MVC Test，WebTestClient。</p><h1 id="第五节：优点"><a href="#第五节：优点" class="headerlink" title="第五节：优点"></a>第五节：优点</h1><p>实际上，前面三节说明的核心和理念都体现了 Spring 的优点，总结如下：</p><ul><li>开源免费：Spring 框架是一个开源免费的框架，这也注定了它强大的生命力；</li><li>轻量级的：Spring 本身的包很小，只需要将其引入便可以使用；</li><li>非入侵的：引入了 Spring 不会改变代码原本的任何情况，反而更加方便管理代码；</li><li><font color='DC143C'>控制反转</font>：</li><li><font color='DC143C'>面向切面</font>：</li><li>支持事务：因为 AOP 的存在，Spring 框架对事务有很好的事务支持（声明式事务）；</li><li>一站式：Spring 对任何优秀的框架都是持赞成态度，几乎对市面上所有优秀的框架都提供了整合支持；</li></ul><h1 id="第六节：开发"><a href="#第六节：开发" class="headerlink" title="第六节：开发"></a>第六节：开发</h1><p><font color='DC143C'><strong>官方网站</strong></font></p><p>Spring 是一个笼统的概念，我们通常说的 Spring 框架就是指 Spring Framework，它只是大的 Spring 家族中的一个 Project！从 Spring 的官方网站 <a href="spring.io">spring.io</a> 的首页中就能看到这些 Project：</p><p><img src="https://www.czblogs.cn/posts/java/10151/image-20240211020245080.png"></p><p>重要的是，作为一个 Java 程序员，一定要知道 Spring 的官方网址—— <a href="spring.io">spring.io</a> ！</p><p><font color='DC143C'><strong>官方下载地址</strong></font></p><p>我 Google 了一下如何查找 Spring 的官方下载地址，网上也确实有很多教程，但是最后我发现这并没有什么卵用！因为使用 Spring 的项目基本上都是利用 Maven 去引入 JAR 包的，下载下来使用的话，要么是不会用 Maven，要么就是 JAR 包收藏爱好者！</p><p><font color='DC143C'><strong>GitHub地址</strong></font></p><p>Spring 也托管在 Github 上，直接点击官网上的 Github 图标就可以访问 Spring 在 Github 上的托管项目，关于 Github 上的操作不是这篇博文的重点，不再赘述！</p><p><font color='DC143C'><strong>Maven仓库</strong></font></p><p>使用 Spring 时基本上都是用 Maven 来导包的，在 Maven 的仓库中搜索<code>spring</code>可以搜到很多：</p><p><img src="https://www.czblogs.cn/posts/java/10151/image-20240211030818829.png"></p><p>对于我们日常的开发来讲，只需要使用<code>spring-webmvc</code>即可，因为它是最庞大的包，它包含了所有的 Spring 包，比如我导入最新的版本，对应的 Maven 代码为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第七节：扩展"><a href="#第七节：扩展" class="headerlink" title="第七节：扩展"></a>第七节：扩展</h1><p>现代化的 Java 开发，说白了就是基于 Spring 的开发！在老版的 Spring 官网首页上，有这么一张图片：</p><p><img src="https://www.czblogs.cn/posts/java/10151/image-20240211162635176.png"></p><p>这是官网给每一位 Java 程序员的学习路线：</p><ul><li>Spring Boot：构建一切，是一个快速开发的脚手架，基于 Spring Boot 可以快速的开发单个微服务</li><li>Spring Cloud：协调一切，是基于 Spring Boot 的，构建的应用多了就需要使用它来进行协调；</li><li>Spring Cloud Data Flow：Connect Everything（连接一切）；</li></ul><p>在 Spring Boot 没有出来之前，Spring 已经发展了很多年，由于 Spring 的理念是让现有技术更加容易使用，所以它可以整合很多的框架！但是这样就会存在一个弊端：一旦整合的框架多了，势必会存在大量的配置，人称“配置地狱”！正是在这种背景下，Spring Boot 出现了，解决了存在大量配置的情况！</p><p>Spring Boot 的主要特点是：<font color='DC143C'>约定大于配置</font>！基本上只需要了解它的那些配置逻辑，按照它的规矩来开发就可以了，现在大多数公司都是使用 Spring Boot 来进行开发的。学习 Spring Boot 的前提就是需要完全掌握 Spring 和 SpringMVC！因此学习 Spring 和 SpringMVC 在学习 Java 的过程中是一个承上启下的角色！</p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JRebel的安装激活和使用</title>
      <link href="/post/10102.html"/>
      <url>/post/10102.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：何为-JRebel"><a href="#第一节：何为-JRebel" class="headerlink" title="第一节：何为 JRebel"></a>第一节：何为 JRebel</h1><p>JRebel 是一套 JavaEE 开发工具。JRebel 允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。</p><p>JRebel 可快速实现<a href="https://baike.baidu.com/item/%E7%83%AD%E9%83%A8%E7%BD%B2">热部署</a>，节省了大量重启时间，提高了个人开发效率。</p><p>JRebel 是一款 JAVA <a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>插件，它使得 Java 程序员能在不进行重部署的情况下，即时看到代码的改变对应用程序带来的影响。JRebel 使你能即时分别看到代码、类和资源的变化，你可以一个个地上传而不是一次性全部部署。当程序员在开发环境中对任何一个类或者资源作出修改的时候，这个变化会直接反应在部署好的应用程序上，从而跳过了构建和部署的过程，每年可以省去部署用的时间花费高达 5.25 个星期。</p><p>以上摘自百度百科，简单来说，用了 Jreble，你启动一次应用程序，就能一直搞，不管你怎么改代码，它都能立马部署进去，这就是<font color="DC143c">热部署</font>。</p><h1 id="第二节：下载-JRebel"><a href="#第二节：下载-JRebel" class="headerlink" title="第二节：下载 JRebel"></a>第二节：下载 JRebel</h1><p>下载安装 JRebel 有两种方式，分别是本地安装和在 IntelliJ Idea 的插件市场中直接安装，我更喜欢使用前者，因为在 Idea 中直接安装经常会遇到网络问题，所以我这里直接演示如何先下载再安装（而且直接在插件市场安装的话，还不能选择插件的下载位置，只能使用默认的）！</p><p>到 Idea 官方的插件库（<a href="https://plugins.jetbrains.com/idea">https://plugins.jetbrains.com/idea</a>）中进行搜索下载</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124131002940.png"></p><p>点进去可以选择最新版本，然后点击【Download】，下载下来的是一个<code>.zip</code>格式的压缩包：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124131341518.png"></p><p>注意：不要点击右上角的“Install to IntelliJ IDEA…”，这样会打开你的 Idea 然后在【设置】里面下载安装，同样很有可能会遇到网络问题！</p><h1 id="第三节：安装-JRebel"><a href="#第三节：安装-JRebel" class="headerlink" title="第三节：安装 JRebel"></a>第三节：安装 JRebel</h1><p>第一步：解压</p><p>将下载下来的压缩包解压出来，可以解压出一个名为<code>jr-ide-idea</code>的文件夹，将其放到本地的某个目录中，比如我将其放到了我本地的<code>E:\IdeaData\Plugins\JRebel</code>目录下。</p><p>第二步：安装</p><p>打开 Idea 并打开设置中的【Plugins】，点击右边【Installed】右边的小齿轮，点击“Install Plugin from Disk…”：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124132922648.png"></p><p>然后在弹出的选择框中选择下载下来的压缩包（注意是整个压缩包）：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124134505934.png"></p><p>最后点击【OK】自动安装，再点击【Apply】后，可见已经安装好的 JRebel：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124134722777.png"></p><h1 id="第四节：激活-JRebel"><a href="#第四节：激活-JRebel" class="headerlink" title="第四节：激活 JRebel"></a>第四节：激活 JRebel</h1><blockquote><p>这里我介绍三种激活方式，推荐第三种</p></blockquote><p>安装好以后，打开 Idea，会在右侧自动打开 JRebel 的设置指导，若该页面关闭了，也可以点击如下按钮来打开：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124171749916.png"></p><h2 id="4-1：官方激活"><a href="#4-1：官方激活" class="headerlink" title="4.1：官方激活"></a>4.1：官方激活</h2><p>正常的激活方式就是通过官网激活，这张方式可以忽略，因为我知道你肯定是想白嫖的~~</p><h2 id="4-2：本地激活"><a href="#4-2：本地激活" class="headerlink" title="4.2：本地激活"></a>4.2：本地激活</h2><p>第二种方式是使用反向代理，伪造官方的服务器地址，相当于本地激活。</p><p>首先需要下载一个工具，下载地址如下：<a href="https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4">https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4</a>。因为我使用的是 Windows 系统，所以下载如下的版本：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124135457205.png"></p><p>下载下来的是一个<code>.exe</code>的应用程序，直接双击运行，运行后的效果（没运行效果，就这一个黑窗口，不要关闭）：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124135722321.png"></p><p>然后打开 Idea，点击右侧绿色的 JRebel 按钮，进行如下操作：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124140427585.png"></p><p>如果使用上面的激活地址出现 “Incorrect license server group URL.Contact license severadministrator.”错误，是由于授权地址增加了GUID检测造成的，将 2 处的 URL 更换为下面这些地址中的某一个即可</p><ul><li><p><a href="http://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107ce">http://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107ce</a></p></li><li><p><a href="http://127.0.0.1:8888/ff47a3ac-c11e-4cb2-836b-9b2b26101696">http://127.0.0.1:8888/ff47a3ac-c11e-4cb2-836b-9b2b26101696</a></p></li><li><p><a href="http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a">http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a</a></p></li></ul><p>再点击<code>Activate JRebel</code>，显示已激活：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124140756140.png"></p><h2 id="4-3：在线激活"><a href="#4-3：在线激活" class="headerlink" title="4.3：在线激活"></a>4.3：在线激活</h2><p>第三种方式就是通过别人分享的激活地址和邮箱来激活，我猜测这种方式跟方式二是一样的，只不过我们不是通过本地服务来验证了，而是将验证这个环节放到了提供激活地址的人那里！</p><p>我在网页<a href="https://jpy.wang/page/jrebel.html">https://jpy.wang/page/jrebel.html</a>上找到了大神分享的激活网址，使用这个激活网址（邮箱可以随便填），也可以成功激活！</p><h2 id="4-4：离线工作"><a href="#4-4：离线工作" class="headerlink" title="4.4：离线工作"></a>4.4：离线工作</h2><p>不管是本地激活还是在线激活，在重启 Idea 或使用 JRebel 部署应用时，都会访问激活用的服务器校验证书，假如公网网络不能访问，或者许可证服务器没启动，都会导致 JRebel 不可用！</p><p>所以推荐采用离线模式来使用 JRebel，离线模式可以在激活后的 180 天内不用再激活，到期后只需要把许可证服务器启动一下，重新激活即可继续离线工作！</p><p>激活后，打开 Idea 设置，在【JRebel &amp; XRebel】菜单下点击按钮【Work Offline】：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124175657576.png"></p><p>点击后如下：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124175854098.png"></p><p>可见，此时显示 JRebel 将会离线工作到约 180 天以后！如此一来，无论我怎么重启 Idea，它也不会让我重新激活了！</p><h1 id="第五节：配置-JRebel"><a href="#第五节：配置-JRebel" class="headerlink" title="第五节：配置 JRebel"></a>第五节：配置 JRebel</h1><p>在使用 JRebel 之前，还需要在 Idea 中对它进行一些必要的设置，方便我们的使用！</p><h2 id="5-1：自动编译"><a href="#5-1：自动编译" class="headerlink" title="5.1：自动编译"></a>5.1：自动编译</h2><p>设置了自动编译，修改代码后 Idea 就会自动编译代码：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124180607657.png"></p><h2 id="5-2：运行时编译"><a href="#5-2：运行时编译" class="headerlink" title="5.2：运行时编译"></a>5.2：运行时编译</h2><p>自动编译只在当前程序不在运行时有效，当程序正在运行时，修改代码后，Idea 并不会自动编译修改的代码，那么与之对应的资源文件就不会更新，导致 JRebel 不能识别资源变化，就无法实现自动热部署！所以还需要设置运行时编译：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124192742243.png"></p><h2 id="5-3：响应时间"><a href="#5-3：响应时间" class="headerlink" title="5.3：响应时间"></a>5.3：响应时间</h2><p>JRebel 最核心的作用是可以实现热部署，单纯热部署的时间默认是 2 min 26 秒：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124193247754.png"></p><p>通过拖动上图中的游标来修改，我将其修改为 5 秒（也有人修改为 1 秒，据说越短越好，没试过，暂时设置为 5 秒吧）：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124193424510.png"></p><h2 id="5-4：设置路径"><a href="#5-4：设置路径" class="headerlink" title="5.4：设置路径"></a>5.4：设置路径</h2><p>假如你的计算机名称是中文的，那么你后续使用 JRebel 一定会遇到累死这种报错“JRebel-JVMTI [FATAL] Couldn‘t write to C:\Users\”！解决办法很简单，参考<a href="https://blog.csdn.net/chirp_CQ/article/details/124041059">这里</a>！</p><h1 id="第六节：使用-JRebel"><a href="#第六节：使用-JRebel" class="headerlink" title="第六节：使用 JRebel"></a>第六节：使用 JRebel</h1><h2 id="6-1：Project-configuration"><a href="#6-1：Project-configuration" class="headerlink" title="6.1：Project configuration"></a>6.1：Project configuration</h2><p>首先，需要配置项目，也就是先要选择 JRebel 管理哪些代码。点击 Idea 左侧边绿色的 JRebel 按钮：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124185749183.png"></p><p>然后代码目录会以 JRebel 的形式打开：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124185903478.png"></p><p>对于那些需要被 JRebel 管理的模块，勾选上即可，比如我这里（最顶部的选择框可以全选所有代码模块）：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124190132919.png"></p><p>注意：执行这个配置以后，在代码很多地方都会生成名为<code>rebel.xml</code>的文件，这些文件很重要，好在 Idea 会自动帮我们生成，所以不用自己配置！</p><h2 id="6-2：Startup-configuration"><a href="#6-2：Startup-configuration" class="headerlink" title="6.2：Startup configuration"></a>6.2：Startup configuration</h2><p>此时，可以通过点击右上角的这两个按钮来启动你的项目（在次之前要配置好自己的启动类）：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124190810460.png"></p><p>左边的按钮是 Run with JRebel，右边的按钮是 Debug with JRebel，根据自己的需要来选择！启动开始以后：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124191232536.png"></p><h2 id="6-3：Automatic-compilation"><a href="#6-3：Automatic-compilation" class="headerlink" title="6.3：Automatic compilation"></a>6.3：Automatic compilation</h2><p>启动成功以后，你可以任意修改自己的代码，修改后的代码自动编译，并被 JRebel 热部署到自己的项目上！比如我修改某个类的代码后点击保存，然后在 JRebel 的控制台会展示如下信息：</p><p><img src="https://www.czblogs.cn/posts/java/10102/image-20240124194556907.png"></p><p>当修改代码并手动保存修改，IDEA 会自动编译代码（因为设置了运行时编译和自动编译），编译完成以后，JRebel 就会识别对应的资源文件发生了变化，随之重新加载（Reloading）编译后的资源文件（比如这里的<code>.class</code>文件），最后把重新加载的资源文件热部署到项目中！</p><p><font color="DC143c">友情提示：</font>IDEA 本身是默认自动保存修改的文件的，因为我取消了 IDEA 自动保存的功能，所以在修改完代码后才需要手动保存修改！假如你没有关闭 IDEA 的自动保存功能，就不需要手动保存修改，IDEA 自动保存后，也能触发 JRebel “自动热部署”的功能！<font color="DC143c">总之，不管是自动保存还是手动保存，都需要保存才能实现“热部署”！</font></p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IntelliJ Idea </tag>
            
            <tag> JRebel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在macOS上搭建Maven环境</title>
      <link href="/post/10101.html"/>
      <url>/post/10101.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 Windows 系统上安装配置 Maven 的操作已经很熟悉了，更换了 Mac 以后，如何安装配置 Maven 呢？我这篇文章只是用来记录安装配置的过程，因为经常需要安装配置 Maven，所以记录一下，也方便以后回头查询。</p></blockquote><h1 id="第一步：下载"><a href="#第一步：下载" class="headerlink" title="第一步：下载"></a>第一步：下载</h1><p>访问<a href="https://maven.apache.org/download.cgi">官方下载地址</a>，选择下载二进制压缩包版本：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240102222309682.png"></p><h1 id="第二步：安装"><a href="#第二步：安装" class="headerlink" title="第二步：安装"></a>第二步：安装</h1><p>安装就很简单了，只需要将下载下来的压缩包解压并放到自己的目录中，比如我这里解压出来的文件夹是：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240102223040446.png"></p><p>我选择将其放到<code>/usr/local/</code>目录下，因为 Mac 的这个目录一般是用来放置本地安装的程序的：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103220838220.png"></p><h1 id="第三步：配置"><a href="#第三步：配置" class="headerlink" title="第三步：配置"></a>第三步：配置</h1><h2 id="3-1：环境变量"><a href="#3-1：环境变量" class="headerlink" title="3.1：环境变量"></a>3.1：环境变量</h2><blockquote><p>跟安装 JDK 不同的是，安装 Maven 的同时不会自动配置环境变量，需要我们自己手动配置！</p></blockquote><p>此时安装的 Maven 并不在系统的环境变量 PATH 中：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103221709823.png"></p><p>然后在用户目录下的<code>.zprofile</code>文件中，追加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Setting PATH <span class="keyword">for</span> apache-maven-3.9.6</span></span><br><span class="line">PATH=&quot;/usr/local/apache-maven-3.9.6/bin:$&#123;PATH&#125;&quot;</span><br><span class="line">export PATHH</span><br></pre></td></tr></table></figure><p>然后重新打开终端，执行命令<code>mvn -v</code>后可见 Maven 的版本号：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103222254628.png"></p><h2 id="3-2：本地仓库"><a href="#3-2：本地仓库" class="headerlink" title="3.2：本地仓库"></a>3.2：本地仓库</h2><blockquote><p>Maven 最重要的作用是下载依赖，下载的依赖所放置的地方就是本地仓库，它存在于本地。</p></blockquote><p>Maven 的配置文件<code>/usr/local/apache-maven-3.9.6/conf/settings.xml</code> 中指出了默认的本地仓库的路径：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103222702570.png"></p><p>我打算把仓库放在我安装的 Maven 的根目录下。</p><p>首先，在<code>/usr/local/apache-maven-3.9.6</code>目录下，新建名为<code>repository</code>的文件夹：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103223009068.png"></p><p>然后修改<code>/usr/local/apache-maven-3.9.6/conf/settings.xml</code>文件：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103223304270.png"></p><h2 id="3-3：阿里镜像"><a href="#3-3：阿里镜像" class="headerlink" title="3.3：阿里镜像"></a>3.3：阿里镜像</h2><blockquote><p>使用 Maven 下载依赖时，默认是从 Maven 官方网站下载，所以比较慢或者容易失败，可以配置阿里镜像来提速！</p></blockquote><p>在配置文件<code>/usr/local/apache-maven-3.9.6/conf/settings.xml</code>中找到<code>mirrors</code>标签，在里面添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是需要注意缩进：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103230001477.png"></p><h2 id="3-4：JDK版本"><a href="#3-4：JDK版本" class="headerlink" title="3.4：JDK版本"></a>3.4：JDK版本</h2><blockquote><p>新版本的 Maven 默认使用本机中的默认 JDK，一般情况下本机只安装一个版本的 JDK，所以没有必要进行配置。</p></blockquote><h2 id="3-5：集成Idea"><a href="#3-5：集成Idea" class="headerlink" title="3.5：集成Idea"></a>3.5：集成Idea</h2><blockquote><p>通常情况下，我们都是通过 Idea 集成 Maven 来进行开发的，所以需要在 Maven 中正确设置 Maven！</p></blockquote><p>打开 Idea 的设置页面（建议从开始页面先后点击【Customer】和【All Settings】，这样以后就不用再设置了，否则以后针对每个项目都要单独设置），打开【Build, Execution, Deployment】&gt; 【Build Tools】&gt;【Maven】：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103230642805.png"></p><p>可见，默认的 Maven 是 3.9.5，并不是我们系统默认的 3.9.6，这是因为 Idea 会自己内置一个 Maven，我们需要将其修改为我们自己系统默认的！进行如下配置：</p><p><img src="https://www.czblogs.cn/posts/java/10101/image-20240103232731014.png"></p><p>注意：当你选择了本地安装的 Maven 后，本地仓库的位置会自动更新，假如没有，就是你 Maven 中本地仓库的位置没有配置或配置错误！</p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> JDK </tag>
            
            <tag> IntelliJ Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制化你的WebStorm</title>
      <link href="/post/10026.html"/>
      <url>/post/10026.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><h2 id="1-1：简介"><a href="#1-1：简介" class="headerlink" title="1.1：简介"></a>1.1：简介</h2><p>WebStorm 是一款集成开发工具（IDE），它是专门为开发 Web 应用程序而设计的，是由大名鼎鼎的 JetBrains 公司开发的。这个公司还开发了很多有名的工具，其中最有名气的就是 Java 开发工具 IntelliJ Idea，它几乎是现在 Java 开发者的不二选择！</p><h2 id="1-2：优点"><a href="#1-2：优点" class="headerlink" title="1.2：优点"></a>1.2：优点</h2><p>WebStorm 提供了许多功能，例如代码自动完成、错误突出显示、重构、调试、版本控制等，可以帮助开发人员提高效率和代码质量。WebStorm 支持多种前端技术，例如 HTML、CSS、JavaScript、React、Angular、Vue.js 等等，还支持 Node.js 和其它后端技术。</p><h2 id="1-3：缺点"><a href="#1-3：缺点" class="headerlink" title="1.3：缺点"></a>1.3：缺点</h2><p>在前端代码开发时，我会毫不犹豫地选择 WebStorm！对于使用者而言，我个人认为 WebStorm 唯一的缺点就是它是收费软件，（<del>这当然难不倒会白嫖的你，哈哈哈</del>）</p><h2 id="1-4：声明"><a href="#1-4：声明" class="headerlink" title="1.4：声明"></a>1.4：声明</h2><p>这篇文章只是用来记录我对 WebStorm 的一些个性化设置，通常是一个冷门且实用的设置，不包括那些简单的设置，比如更换主题和修改字体等！我跟 WebStorm 结缘是我维护魔改 Hexo 博客的时候，也是从 VSCode 转到 WebStorm 的。</p><h1 id="第二节：基本设置"><a href="#第二节：基本设置" class="headerlink" title="第二节：基本设置"></a>第二节：基本设置</h1><h2 id="2-1：打开项目"><a href="#2-1：打开项目" class="headerlink" title="2.1：打开项目"></a>2.1：打开项目</h2><p>打开软件，点击页面的<code>Open</code>按钮：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116225454461.png"></p><p>选择我的博客文件夹后，打开项目：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116225739106.png"></p><p>注意：使用 WebStorm 打开项目后，在项目的根目录下就会产生名为<code>.idea</code>的文件夹，这个文件夹不会出现在它左边的文件目录中，在日常的项目维护中也应该忽略这个文件夹！</p><h2 id="2-2：启动时行为"><a href="#2-2：启动时行为" class="headerlink" title="2.2：启动时行为"></a>2.2：启动时行为</h2><p>默认情况下，打开 WebStorm 会直接打开上次关闭时浏览或编辑的项目，我比较喜欢打开软件时让我自己选择打开哪个项目。设置如下：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116230748912.png"></p><h2 id="2-3：文件编码"><a href="#2-3：文件编码" class="headerlink" title="2.3：文件编码"></a>2.3：文件编码</h2><p>WebStorm 打开和编辑文件的编码格式，尽量设置为 UTF-8。设置如下：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116231106429.png"></p><h2 id="2-4：编辑区选项卡"><a href="#2-4：编辑区选项卡" class="headerlink" title="2.4：编辑区选项卡"></a>2.4：编辑区选项卡</h2><p>默认情况下，编辑区选项卡只能在一行中展示，而且限制最多展示 10 个。这些都不够人性化，需要进行个性化设置：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116231735577.png"></p><p>增加数量限制和新标签页打开的位置：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116231537581.png"></p><h2 id="2-5：关闭拼写检查"><a href="#2-5：关闭拼写检查" class="headerlink" title="2.5：关闭拼写检查"></a>2.5：关闭拼写检查</h2><p>编辑区默认是开启拼写检查的，拼写检查并不是检查编程语法，而是检查语法！我认为这个没必要，需要进行如下设置：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116232416617.png"></p><h2 id="2-6：内存指示器"><a href="#2-6：内存指示器" class="headerlink" title="2.6：内存指示器"></a>2.6：内存指示器</h2><p>WebStorm 可以在右下角显示它可以使用的内存和当前使用的内存，但是需要进行如下设置：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116232756070.png"></p><h2 id="2-7：优化智能提示"><a href="#2-7：优化智能提示" class="headerlink" title="2.7：优化智能提示"></a>2.7：优化智能提示</h2><p>默认情况下，WebStorm 的智能提示是区分大小写的，其实不区分大小写的提示更适合日常使用，设置如下：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116233122944.png"></p><h2 id="2-8：视觉警示线"><a href="#2-8：视觉警示线" class="headerlink" title="2.8：视觉警示线"></a>2.8：视觉警示线</h2><p>编辑区默认有一条视觉警示线，用来提醒每行代码的最长字符数（默认 120 个），取消视觉警示线需要进行如下设置：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240116233811671.png"></p><h2 id="2-9：黄色小灯泡"><a href="#2-9：黄色小灯泡" class="headerlink" title="2.9：黄色小灯泡"></a>2.9：黄色小灯泡</h2><p>在编辑代码时，经常会在光标所在行的上一行开头出现一个黄色小灯泡：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240117205926479.png"></p><p>这个小灯泡的作用跟快捷键<code>Alt</code>+<code>Enter</code>的作用是相同的，但是由于它影响了代码的美观，挺烦人的，所以我将其隐藏：</p><p><img src="https://www.czblogs.cn/posts/tools/06/image-20240117210726930.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> WebStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化之集成豆瓣</title>
      <link href="/post/10067.html"/>
      <url>/post/10067.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：Hexo推荐"><a href="#第一节：Hexo推荐" class="headerlink" title="第一节：Hexo推荐"></a>第一节：Hexo推荐</h1><h2 id="1-1：安装插件"><a href="#1-1：安装插件" class="headerlink" title="1.1：安装插件"></a>1.1：安装插件</h2><p>打开终端，切换到本地 Hexo 博客的根目录下，执行如下命令来安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><p>比如我的执行情况如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131212417368.png"></p><h2 id="1-2：配置文件"><a href="#1-2：配置文件" class="headerlink" title="1.2：配置文件"></a>1.2：配置文件</h2><p>在站点配置文件（注意不是主题配置文件）中，进行类似如下的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">162448367</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item_per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">meta_max_line:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">customize_layout:</span> <span class="string">page</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">books/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">movies/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">games/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">song:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">songs/index.html</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my song title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my song quote&#x27;</span></span><br><span class="line">    <span class="attr">option:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>简单说明一下这些配置项：</p><ul><li><p><strong>id</strong>: 你的豆瓣 ID（纯数字格式，不是自定义的域名），网页访问豆瓣个人主页，头像旁边的数字就是你的豆瓣 ID；</p></li><li><p><strong>builtin</strong>: 将<code>hexo douban</code>命令默认嵌入进<code>hexo g</code>、<code>hexo s</code>，使其自动执行<code>hexo douban</code> 命令，默认关闭；</p></li><li><p><strong>item_per_page</strong>: 每页展示的条目数，默认是 10 ；</p></li><li><p><strong>meta_max_line</strong>: 每个条目展示的详细信息的最大行数，超过该行数则会以”…”省略，默认 4 ；</p></li><li><p><strong>customize_layout</strong>: 自定义布局文件，默认值为 page；</p><p>无特别需要留空即可。若配置为 <code>abcd</code>，则表示指定 <code>//theme/hexo-theme/layout/abcd.ejs</code> 渲染豆瓣页面；</p></li><li><p><strong>path</strong>: 生成页面后的路径，设置成<code>books/index.html</code>表示生成在博客根目录下<code>/public/books/index.html</code>；</p></li><li><p><strong>title</strong>: 对应页面的标题，比如<code>book</code>下的<code>title</code>就是该页面的页面标题；</p></li><li><p><strong>quote</strong>: 写在页面开头的一段话，支持html语法，默认是以引用的样式展示的；</p></li><li><p><strong>option</strong>: 该页面额外的 Front-matter 配置，参考 <a href="https://hexo.io/docs/front-matter.html">Hexo 文档</a>，无特别需要，留空即可；</p></li><li><p><strong>timeout</strong>: 爬取数据的超时时间，默认 10000 ms ；若使用时发现报了超时的错则可以把这个数据设置的大一点；</p></li></ul><p>比如我的配置如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131212835732.png"></p><h2 id="1-3：生成页面"><a href="#1-3：生成页面" class="headerlink" title="1.3：生成页面"></a>1.3：生成页面</h2><p>使用<code>hexo-douban</code>插件来生成页面的命令是<code>hexo douban</code>，但是需要注意如下两点：</p><ul><li>安装 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 后，原本的<code>hexo d</code>就不能用了，因为此时的<code>d</code>既可以指<code>deploy</code>，也可以指<code>douban</code>；</li><li>把<code>hexo douban</code>命令放在<code>hexo generate</code>后面，不然前者生成的页面会被后者生成的页面覆盖删除；</li></ul><p>比如我这里，执行完<code>hexo clean</code>和<code>hexo generate</code>后，再执行<code>hexo douban</code>：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131214211628.png"></p><p>假如此时显示连接超时，可以将<code>timeout</code>设置大一些，比如我这里就将<code>10000</code>改为<code>10000000</code>！</p><p>最后生成的页面在本地 Hexo 博客的<code>/public</code>文件夹中：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131214559183.png"></p><h2 id="1-4：配置路径"><a href="#1-4：配置路径" class="headerlink" title="1.4：配置路径"></a>1.4：配置路径</h2><p>在主题配置文件中，给导航栏的菜单配置<code>menu</code>中配置正确的路径，比如我的：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131214741812.png"></p><h2 id="1-5：存在问题"><a href="#1-5：存在问题" class="headerlink" title="1.5：存在问题"></a>1.5：存在问题</h2><p>因为我使用的是 Butterfly 主题，而且我想要将这些豆瓣页的侧边栏都去掉！正常情况下只需要在相应页面的 Front- matter 中设置<code>aside: false</code>即可，但是这个插件是 Hexo 级别的插件，它只能配置 Hexo 官方指定的那些配置项，配置<code>aside</code>并不会生效！</p><h1 id="第二节：Butterfly推荐"><a href="#第二节：Butterfly推荐" class="headerlink" title="第二节：Butterfly推荐"></a>第二节：Butterfly推荐</h1><p>之前，Butterfly 主题的作者自己编写了一个适配 Butterfly 主题的豆瓣插件——<a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">hexo-butterfly-douban</a>，这个插件就是在插件 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 的基础上开发的，能设置<code>aside</code>和<code>comments</code>等主题特有的 Front-matter！但是当我访问这个插件的官方介绍时发现这个插件现在已经废弃了：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131220300058.png"></p><p>虽然不维护了，但是至少现在这个插件还在，于是我打算尝试一下，毕竟如果让我自己去修改 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 插件，显然是不可能实现的，至少目前是我做不到的！</p><h2 id="2-1：安装插件"><a href="#2-1：安装插件" class="headerlink" title="2.1：安装插件"></a>2.1：安装插件</h2><p>在安装插件 <a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">hexo-butterfly-douban</a> 之前，需要卸载之前安装的 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a>！首先需要删除站点配置文件中关于插件的配置，然后打开终端，切换到本地 Hexo 博客的根目录下，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-douban</span><br></pre></td></tr></table></figure><p>然后再执行如下安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-douban</span><br></pre></td></tr></table></figure><p>比如我的执行结果如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131220408646.png"></p><p>可见，npm 提示该插件存在安全问题并停止维护了，但是我并不 care 这个问题，我更关注能让我的博客更美观！</p><h2 id="2-2：配置文件"><a href="#2-2：配置文件" class="headerlink" title="2.2：配置文件"></a>2.2：配置文件</h2><p>在站点配置文件（注意不是主题配置文件）中，进行类似如下的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">books</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">movies</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">games</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><p>大部份的配置跟  <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 的配置是一样的，我这里简单说明一下不同的配置：</p><ul><li><p><strong>user</strong>：你的豆瓣 ID；</p><p>访问豆瓣个人主页 ，此时的 URL 类似<code>https://www.douban.com/people/xx/</code> ，其中的<code>xx</code>就是你的個人ID了；</p></li><li><p><strong>meta</strong>：可选，插入 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code> 到页面；</p><p>可解决部分浏览器无法显示豆瓣图片的问题（會会导致一些插件出错，例如不蒜子计数器）；</p></li><li><p><strong>top_img</strong>：可选，是否展示页面的顶部图；</p></li><li><p><strong>aside</strong>：可选，是在展示页面的侧边栏，默认是<code>true</code>；</p></li><li><p><strong>limit</strong>：可选，限制爬取的页数；</p></li></ul><p>综合我自己的需求，我的配置如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131221007995.png"></p><h2 id="2-3：生成页面"><a href="#2-3：生成页面" class="headerlink" title="2.3：生成页面"></a>2.3：生成页面</h2><p>插件 <a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">hexo-butterfly-douban</a> 生成页面的方式跟 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 一样，打开终端切换到本地 Hexo 博客根目录下执行：</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131221225213.png"></p><p>观察上图发现两个问题：</p><ul><li>movies 爬取了 0 个，起初我以为是因为爬取超时了，所以我将<code>timeout</code>设置为<code>1000000</code>后重新生成页面，但是结果依然是这样，我试过了很多种办法都没有解决，最终偶然的机会看到别人的博客，可能是 Nodejs 的版本问题，需要降级；</li><li>songs 压根就不会爬取，因为这个插件并没有这种功能，我翻看了一下插件的 issues，发现 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 爬取音乐的功能就是 Butterfly 主题的作者提交的代码，而 <a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">hexo-butterfly-douban</a> 插件本身就没有这个功能；</li></ul><p>如此看来，我只能放弃 <a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">hexo-butterfly-douban</a> 插件了，还是继续使用 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 了！</p><h1 id="第三节：侧边栏问题"><a href="#第三节：侧边栏问题" class="headerlink" title="第三节：侧边栏问题"></a>第三节：侧边栏问题</h1><h2 id="3-1：问题描述"><a href="#3-1：问题描述" class="headerlink" title="3.1：问题描述"></a>3.1：问题描述</h2><p>前面 1.5 节已经说的很明白了，在 Butterfly 主题中使用 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 插件来集成豆瓣页时，无法取消这些豆瓣页的侧边栏！当推荐的书影音不够多或者限制了每一页的数量较少时，侧边栏就会比页面的主体内容长很多，看起来很不和谐！</p><h2 id="3-2：我的想法"><a href="#3-2：我的想法" class="headerlink" title="3.2：我的想法"></a>3.2：我的想法</h2><p>首先，我没办法去修改插件 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 本身，而且人家这个插件面向所有的 Hexo 主题的，并不是针对 Butterfly 主题的，我也不能去给人家提要求（<del>人家压根也不理我，哈哈哈</del>），所以我只能在使用这个插件的基础上，自己想办法把侧边栏去除！</p><p>不难注意到，在站点配置文件中有一个配置项<code>customize_layout</code>，显然这个配置项就是用来指定插件生成的豆瓣页的布局的，所以我门可以从这个角度来想解决办法！</p><p>我有一个猜想：自己定义一个布局文件，暂且叫它<code>douban</code>，然后它的布局跟<code>page</code>一样，然后在<code>douban</code>布局中将侧边栏去除，最后在站点配置文件中配置<code>customize_layout: douban</code>就可以了，说干就干！</p><h2 id="3-3：具体操作"><a href="#3-3：具体操作" class="headerlink" title="3.3：具体操作"></a>3.3：具体操作</h2><p>观察主题的代码，我发现<code>page</code>布局是继承<code>layout.pug</code>的，侧边栏的设置就在这个文件中，所以修改的关键点就在于这个文件！</p><p>第一步：在主题根目录下新建<code>/layout/includes/layout-douban.pug</code>文件，将<code>/layout/includes/layout.pug</code>的内容全部拷贝到新建的文件中，并修改前三行内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- var htmlClassHideAside = &#x27;hide-aside&#x27;</span><br><span class="line">- page.aside = false</span><br><span class="line">- var hideAside = &#x27;hide-aside&#x27;</span><br></pre></td></tr></table></figure><p>第二步：在主题根目录下新建<code>/layout/douban.pug</code>文件，将<code>/layout/page.pug</code>的内容全部拷贝到新建的文件中，并修改第一行内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout-douban.pug</span><br></pre></td></tr></table></figure><p>第三步：修改站点配置文件中的<code>douban.customize_layout</code>如下</p><p><img src="https://www.czblogs.cn/posts/hexo/07/image-20240131231547560.png"></p><p>最后执行如下命令看效果就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo douban &amp;&amp; gulp &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>PS：我这里的<code>gulp</code>是生成字体文件的插件命令，假如你没有进行这个设置，就可以省略这一个命令！</p>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化之图集相关</title>
      <link href="/post/10066.html"/>
      <url>/post/10066.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：基本设置"><a href="#第一节：基本设置" class="headerlink" title="第一节：基本设置"></a>第一节：基本设置</h1><p>相册页是 Butterfly 主题的一个亮点，官网上给出了图库集合页面的样式：</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117211819688.png"></p><p>但是我感觉官网上关于相册这块的设置，描述地不是很清楚，对小白很不友好，于是我打算详细记录一下如何设置主题的相册页，或者说是图库页！</p><h2 id="1-1：创建页面"><a href="#1-1：创建页面" class="headerlink" title="1.1：创建页面"></a>1.1：创建页面</h2><blockquote><p>跟创建分类页、标签页、友链页一样，相册页面也是通过命令<code>hexo new page xxx</code>创建出来的！</p></blockquote><p>第一步：执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page album</span><br></pre></td></tr></table></figure><p>这样就会在 Hexo 博客的根目录下的<code>/source</code>下生成<code>/album/index.md</code>文件，<code>album</code>可以是你自己定义的任意单词！</p><p>第二步：在<code>index.md</code>文件的 Front-matter 中添加如下内容（因为我不想在相册页面展示侧边栏和评论区）</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117211712566.png"></p><p>第三步：在主题配置文件的<code>menu</code>中设置路径，我这里是把相册页面设置到休闲这个菜单下，作为一个子菜单</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117212114858.png"></p><p>这样以来，点击首页菜单栏的<code>图片展</code>即可进入相册首页：</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117212413008.png"></p><p>可见，此时的相册页面是什么都没有的，只有一个用来展示内容的空白框！</p><h2 id="1-2：图库集合页"><a href="#1-2：图库集合页" class="headerlink" title="1.2：图库集合页"></a>1.2：图库集合页</h2><p>图库集合页面就是普通的页面，比如上面创建的<code>/album/index.md</code>页面，下面将其设置成一个图库集合页面！设置图库集合页面是使用外挂标签来实现的，书写格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里面每个<code>galleryGroup</code>中设置的内容如下：</p><ul><li><code>name</code>：图库名字</li><li><code>description</code>：图库描述</li><li><code>link</code>：链接到对应相册的地址</li><li><code>img-url</code>：图库封面的地址</li></ul><p>比如我是这样设置的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;壁紙收藏&#x27; &#x27;收藏的一些壁纸，侵删&#x27; &#x27;/album/wallpaper&#x27; https://www.czblogs.cn/album/wallpaper.jpeg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;生活记录&#x27; &#x27;相册是我快乐过的证据&#x27; &#x27;/album/life&#x27; https://www.czblogs.cn/album/life.jpeg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;迫于生计&#x27; &#x27;谁又不是在努力地活着&#x27; &#x27;/album/work&#x27; https://www.czblogs.cn/album/work.jpeg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;出差印度&#x27; &#x27;人生中的最后一段青春&#x27; &#x27;/album/indian&#x27; https://www.czblogs.cn/album/indian.jpeg %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样以来，页面就变成了这样：</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240118211635766.png"></p><h2 id="1-3：图库子页面"><a href="#1-3：图库子页面" class="headerlink" title="1.3：图库子页面"></a>1.3：图库子页面</h2><p>此时，点击任何一个图集，都会重定向到 404 页！这是因为我们还没有创建相应的子页面！这里我以《生活》这个相册为例来创建它的子页面！</p><p>第一步：打开终端，切换到本地 Hexo 博客的根目录下，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page life</span><br></pre></td></tr></table></figure><p>然后会在博客根目录下的<code>/source</code>目录下生成名为<code>life</code>的文件夹，并在其中生成一个名为<code>index.md</code>的文件，这个文件就对应着《生活》这个子页面！</p><p>但是此时图库子页面<code>/source/life/index.md</code>跟相册首页<code>/source/album/index.md</code>是平级的：</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117225259518.png"></p><p>第二步：将<code>life</code>整个文件夹都移动到<code>album</code>文件夹中：</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117225428141.png"></p><p>第三步：此时打开<code>/source/album/life/index.md</code>文件，修改如下</p><p><img src="https://www.czblogs.cn/posts/hexo/06/image-20240117230009632.png"></p><p>第四步：然后在子页面（也就是<code>/source/album/life/index.md</code>）中使用标签外挂挂上自己的照片，写法如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link"></span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>比如我下面这样，填写很多个自己的图片（图片路径需要自己填充）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/开锅.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/第一桶金.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/啤酒.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/鸽子.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/原浆.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/户外烧烤.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/篮球.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/螃蟹.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/骑行.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/软件园打球.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/球队.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/台式1.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/游玩.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/台式2.jpeg</span>)</span><br><span class="line">![](<span class="link">https://www.czblogs.cn/album/life/自拍.jpeg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里使用的是外挂标签，其中的图片就是按照 Markdown 插入图片的格式书写的，这个标签外挂会自动根据图片的尺寸大小来调整图片的大小，你只需要将图片罗列上去即可！</li><li>这里存在一个Bug：因为标签外挂<code>gallery</code>是实时监测页面尺寸的大小，然后不断地变更图片的尺寸，所以当你放入图库子页面所有的图片尺寸不一致时，有可能会导致显示图片的页面元素的尺寸不断变化，从视觉上来看就是一直在抖动！（有时候使用不同的浏览器，会出现抖动与不抖动不同的效果，我也不知道为什么）</li></ul><h1 id="第二节：进阶设置"><a href="#第二节：进阶设置" class="headerlink" title="第二节：进阶设置"></a>第二节：进阶设置</h1><h2 id="2-1：嵌套图库集合"><a href="#2-1：嵌套图库集合" class="headerlink" title="2.1：嵌套图库集合"></a>2.1：嵌套图库集合</h2><p>因为图库集合和图库子页面的本质上都是普通的页面，也就是普通的 Markdown 文件，所以我们可以嵌套使用图库集合页面，这样就可以做出来层层递进的目录效果！</p><p>比如，图库集合首页有四个分类，其中壁纸这个集合点进去按道理应该是一个图库子页面，但是因为我想根据不同的屏幕尺寸再进行一次分类，所以可以在原本是图库子页面的页面不用<code>gallery</code>而是继续使用<code>galleryGroup</code>，这样就能实现了！具体的操作我就不掩饰了，可以参考本站的效果。</p><h2 id="2-2：是否压缩图片"><a href="#2-2：是否压缩图片" class="headerlink" title="2.2：是否压缩图片"></a>2.2：是否压缩图片</h2><p>放到图库上的图片，一方面是为了展示，比如我的《生活记录》，另一方面是为了共享，比如我的《壁纸收藏》。图片加载的速度是很慢的，我的策略是：</p><ul><li>所有图库集合的封面都压缩；</li><li>所有子页面，主要用于展示的图片进行压缩、用于资源分享的图片都不压缩；</li></ul><p>当然，假如你能完美掌握图片压缩的质量和大小之间的平衡的话，你也可以把所有的图片都进行压缩！</p>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化之其它页面魔改</title>
      <link href="/post/10065.html"/>
      <url>/post/10065.html</url>
      
        <content type="html"><![CDATA[<p>Butterfly 主题的所有页面主要分为：首页和非首页这两种，在上一篇文章<a href="https://www.fattymonkey.com/post/10064.html">《Butterfly主题美化之首页魔改》</a>中，详细记录了我对首页的一些魔改操作，这篇文章就用来记录我对其他页面的魔改（我这里是基于 4.10 版本进行美化操作的）！</p><h1 id="第一节：侧边栏"><a href="#第一节：侧边栏" class="headerlink" title="第一节：侧边栏"></a>第一节：侧边栏</h1><p>正常情况下，只要我们将主体配置文件的<code>theme.aside.enable</code>设为<code>true</code>，那么每一个页面都会有侧边栏！而且对于那些具有 Markdown 文件的页面，我们可以通过将其 Front-matter 中的 aside 设置为 false 来关闭侧边栏！</p><p>侧边栏是 Butterfly 的最大亮点，但是我认为很多页面的侧边栏都应该被关闭，原因有二：</p><ul><li>除了首页和文章页，其他菜单页不应该展示侧边栏，因为存在太大的信息冗余，侧边栏实在是没存在的必要；</li><li>侧边栏很难根据不同的页面单独定义，即使可以也很费力，一般我们又想在首页的侧边栏尽量展示更多的内容，但是在别的页面就会造成主体内容留有大量的空白，很不美观；</li></ul><p>所以最终我决定：<font color='#e0736b'>仅保留首页和文章页的侧边栏，其他所有页面的侧边栏都关闭！</font>！</p><h2 id="1-1：普通页"><a href="#1-1：普通页" class="headerlink" title="1.1：普通页"></a>1.1：普通页</h2><p>普通页就是指那些通过<code>hexo new page xxx</code>命令生成的页面，这些页面都有对应的 Markdown 文件。比如标签页和分类页、关于页和友链页等等，当然也包括那些自己个性化的页面，如音乐页和视频页等等！</p><p>对于这些有 Markdown 文件的页面，若想关闭它们的侧边栏，只需要在 Front-matter 中添加<code>aside: false</code> 配置即可！</p><p>比如要关闭分类页的侧边栏，则可以在<code>/source/categories/index.md</code>中：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231028210720877.png"></p><h2 id="1-2：归档页"><a href="#1-2：归档页" class="headerlink" title="1.2：归档页"></a>1.2：归档页</h2><p>归档页面没有对应的 Markdown 文件，所以不能使用上面这种方式来关闭它的侧边栏，但可以通过主题配置文件来关闭！</p><p>打开主题配置文件，找到<code>aside</code>选项，将<code>aside.display.archive</code>设置为<code>false</code>即可：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231028213712200.png"></p><h2 id="1-3：子页面"><a href="#1-3：子页面" class="headerlink" title="1.3：子页面"></a>1.3：子页面</h2><p>经过上面的设置以后，虽然分类和标签页的侧边栏没了，但是子分类页和子标签页还有侧边栏。想要关闭这些子页面的侧边栏，也可以通过主题配置文件来关闭！</p><p>打开主题配置文件，找到<code>aside</code>选项，将<code>aside.display.archive</code>设置为<code>false</code>即可：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231028213919072.png"></p><h2 id="1-4：404-页"><a href="#1-4：404-页" class="headerlink" title="1.4：404 页"></a>1.4：404 页</h2><p>在创建 404 页面的时候，主题文档要求我们在其 Front-matter 中设置<code>type: &quot;404&quot;</code>，假如你设置了这个，那么就不会有侧边栏，不需要额外的设置。</p><h2 id="1-5：友链页"><a href="#1-5：友链页" class="headerlink" title="1.5：友链页"></a>1.5：友链页</h2><p>主题要求在友链页的 Front-matter 中设置<code>type: &quot;link&quot;</code>，但是主题的作者并没有在这个布局中默认取消侧边栏（跟 404 页不同），所以想要关闭友链页的侧边栏，还需要设置<code>aside: false</code>！</p><h1 id="第二节：评论区"><a href="#第二节：评论区" class="headerlink" title="第二节：评论区"></a>第二节：评论区</h1><h2 id="2-1：关闭评论区"><a href="#2-1：关闭评论区" class="headerlink" title="2.1：关闭评论区"></a>2.1：关闭评论区</h2><p>之前，我在<a href="https://www.fattymonkey.com/post/10063.html">《Butterfly主题之评论系统》</a>一文中详细描述了如何给主题配置评论系统，但是开启了评论系统以后，会存在这样一个问题：除了首页、归档页、404 页以外，所有的页面的最下面都会展示评论区，这显然不符合我们的需求，因为除了留言板页面和文章页，其他所有的页面都没必要展示评论区！</p><p>主题提供了关闭评论区的解决方案，跟关闭侧边栏类似，只需在相应的 Front-matter 中配置<code>comments: false</code>，比如：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231028214725420.png"></p><p>注意：404 页面本身是没有评论区的，但是这要求你在<code>404.md</code>文件的 Front-matter 中正确设置<code>type: &#39;404&#39;</code>！</p><h2 id="2-2：魔改留言板"><a href="#2-2：魔改留言板" class="headerlink" title="2.2：魔改留言板"></a>2.2：魔改留言板</h2><p>假如你像我一样，在导航栏的菜单中单独暴露出来一个留言板的页面，那么此时有一个很严重的痛点：留言板页面和文章页的评论区是一样的样式！默认的样式用在文章页还可以，但是用在评论区就显得差点意思了。实际上，这两个地方使用的是同样的组件，要想显示不同的样式，估计要费不小的力气，但是我们又该怎么样来区别这两者的样式呢？</p><p>其实，我们可以在留言板对应的 Markdown 文件中添加一些内容来充实页面，这样就不会让留言板看起来那么突兀了！我这里决定自己单独写几句话来充实一下。</p><p><strong>第一步：添加 HTML</strong></p><p>首先往留言板页面对应的 Markdown 文件中填入如下内容（除 Front-matter 外）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 实际上这个页面什么都没有，只是借用了系统的评论功能！你可以向我吐槽任何事情，甚至你有什么想吃的都可以告诉我哦～～</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;comments-title&quot;</span>&gt;</span></span>留言须知<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [X] 您对我的博客网站有任何想说的都可以给我留言</span><br><span class="line"><span class="bullet">-</span> [X] 留言时建议填入正确的邮箱（在昵称处输入正确的QQ号可以获取您的头像、昵称、邮箱），方便交流互动</span><br><span class="line"><span class="bullet">-</span> [X] 本站支持丰富的表情和图片上传，以满足您的需求</span><br><span class="line"><span class="bullet">-</span> [X] 请不要发表违反法律道德的内容，否则博主有权利删除您的留言</span><br></pre></td></tr></table></figure><p>因为 Markdown 文件中可以直接插入 HTML 文件，使用这种方式是最简单的！</p><p><strong>第二步：添加 CSS</strong></p><p>然后在自定义的样式文件中添加样式代码，关于如何引入自定义样式，可以参考我的<a href="https://www.fattymonkey.com/posts/10064.html">《Butterfly主题之首页魔改》</a>的第二节。比如我这里是主题根目录下的<code>/source/css/_custom/custom.styl</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comments-title</span></span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">14px</span></span><br><span class="line">  <span class="attribute">font-weight</span>: bold</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span></span><br><span class="line">  <span class="attribute">display</span>: block</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--monkey-comments-title-color)</span><br></pre></td></tr></table></figure><p>注意：这里的标题颜色是使用我自己的主题颜色，你需要设置一个自己的颜色，我这里是适配了深浅两种模式！</p><h1 id="第三节：文章页"><a href="#第三节：文章页" class="headerlink" title="第三节：文章页"></a>第三节：文章页</h1><h2 id="3-1：头图的优化"><a href="#3-1：头图的优化" class="headerlink" title="3.1：头图的优化"></a>3.1：头图的优化</h2><p>我个人是想在文章页保留文章的头图的，因为很多文章的头图都是我精挑细选的，跟文章的内容相呼应！但是这样存在一个问题：如果头图的颜色不够存粹时，就会导致头图上展示的相关文字信息不够明显，跟头图的颜色混在一起，不仔细看的话很难将其区分开来，这样就造成了很大的视觉疲劳！</p><p>最好的做法是给文章页头图设置毛玻璃效果，这样一来既能体现文章标题等信息，又能体现具有文章特色的背景图！但是我尝试了很多办法，都很难做到，于是放弃了，干脆就将文章页的头图页取消掉了！（<del>实际是自己能力有限，等后面有时间再来研究吧，哈哈哈</del>）</p><p>取消文章头图有三种方式：</p><ul><li>在文章的 Front-matter 中设定<code>cover: false</code>，但是这样做的话首页文章列表的卡片上的图片就没了，这不可取；</li><li>在文章的 Front-matter 中设定<code>top_img: false</code>，但是这样会把原本头图上展示的内容放到文章卡片中，不可取；</li><li>通过修改源码，实现既能在首页文章卡片上展示 cover 图，还能在文章页不加载头图，还预留出原本展示头图的位置不改变（其实也能可以通过将头图设置为透明，但是这样还会加载头图，属于浪费资源，最好不加载）；</li></ul><p>打开主题根目录下的<code>/layout/includes/header/index.pug</code>文件，文件的开头部分定义了文章页的头图：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231101222706067.png"></p><p>只需要将这段逻辑去掉，其他的什么都不用做，然后三连看效果就行了！</p><h2 id="3-2：美化选择框"><a href="#3-2：美化选择框" class="headerlink" title="3.2：美化选择框"></a>3.2：美化选择框</h2><p>在 Markdown 中编辑复选框使用下面的语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [X] 这是一个选择框</span><br><span class="line"><span class="bullet">-</span> [ ] 这是一个选择框</span><br></pre></td></tr></table></figure><p>对于选择框而言，Butterfly 渲染的效果如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231101224415465.png"></p><p>感觉这个效果差太多了，选中和没选中的效果几乎相同，所以这里只需要修改它们的颜色即可！</p><p>打开自定义样式文件，在其中添加如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复选框的颜色</span></span><br><span class="line"><span class="selector-tag">input</span>(type=checkbox)</span><br><span class="line">  <span class="attribute">cursor</span>: pointer</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span>::after&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--monkey-checkbox-bg);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--monkey-checkbox-text);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">visibility</span>: visible;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span>::after&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;✓&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：这里我对选择框的背景设置了深浅模式，最终的样式为像下面这样</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231101234200388.png"></p><h2 id="3-3：美化引用框"><a href="#3-3：美化引用框" class="headerlink" title="3.3：美化引用框"></a>3.3：美化引用框</h2><p>默认情况下，文章中的引用样式如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/05/image-20231115154751966.png"></p><p>这个颜色跟 Butterfly 原生的颜色一致，跟我个人的主题颜色有差距，所以打算对它的颜色进行修改，并且适配深浅模式！</p>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题美化之首页细致魔改</title>
      <link href="/post/10064.html"/>
      <url>/post/10064.html</url>
      
        <content type="html"><![CDATA[<p>声明：我这里魔改的 Butterfly 基础版本是 4.10.0！</p><h1 id="第一节：设置一图流"><a href="#第一节：设置一图流" class="headerlink" title="第一节：设置一图流"></a>第一节：设置一图流</h1><h2 id="1-1：何为一图流"><a href="#1-1：何为一图流" class="headerlink" title="1.1：何为一图流"></a>1.1：何为一图流</h2><p>Butterfly 首页由导航栏、Bunner 图、背景图和页脚这四部分组成，这四个分别是不同的效果（导航栏是透明的）：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231022215651368.png"></p><p>所谓一图流，就是将这四个部分设置为同一个张图片，然后把导航栏和页脚设置为透明（导航栏本身就是透明的），这样一来整个网站的背景就能够统一了！</p><h2 id="1-2：设置一图流"><a href="#1-2：设置一图流" class="headerlink" title="1.2：设置一图流"></a>1.2：设置一图流</h2><p><strong>第一步：设置网站背景图片</strong></p><p>Butterfly 主题的背景可以通过主题配置文件来设置，在主题配置文件中配置即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Website Background (设置网站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可设置图片或者颜色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://www.czblogs.cn/backgrounds/whale.webp)</span></span><br></pre></td></tr></table></figure><p><strong>第二步：非文章页的头图</strong></p><p>此时，像首页、归档、分类等页面的头图，依然展示的是我在主题配置文件中设置的<code>default_top_img</code>图片，虽然跟我设置的<code>background</code>是同样的图片，但是前者总是覆盖在后者的上面，整体感觉就像割裂了一样，风格不够统一！</p><p>首先，取消掉头图的加载，即取消主题配置文件中的<code>default_top_img</code>设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="comment"># https://www.czblogs.cn/top_imgs/whale.webp</span></span><br></pre></td></tr></table></figure><p>其次，此时头图会显示默认的蓝色，打开主题根目录下的<code>/source/css/_layout/head.styl</code>文件，进行如下修改：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231022231754950.png"></p><p><strong>第三步：文章页的头图</strong></p><p>文章页的头图此时展示的是在文章的 Front-matter 中指定的<code>cover</code>，其实不建议将其设置为一图流，因为文章页的头图是文章的个性，不建议去掉！</p><p>假如你极致追求“一图流”的话，可以在主题根目录下的<code>/layout/includes/header/index.pug</code>文件中进行如下修改：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231022232528672.png"></p><p><strong>第四步：页脚</strong></p><p>此时页脚是蓝色，只需要将其设置为透明即可（加上遮蔽色），修改<code>/source/css/_layout/footer.styl</code>文件：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231022233230563.png"></p><h2 id="1-3：优化一图流"><a href="#1-3：优化一图流" class="headerlink" title="1.3：优化一图流"></a>1.3：优化一图流</h2><p>此时的一图流仍然有一个问题：在浅色模式下，头图和页脚的遮蔽色还是挺美观的，但是在深色模式下，头图和页脚本身的背景颜色就很深，再加上遮蔽色就会更加暗了，几乎已经看不到背景！所以我打算保留浅色模式下的遮蔽色，去掉深色模式下的遮蔽色！</p><p><strong>第一步：在全局变量文件中设定两种遮蔽色</strong></p><p>也就是在主题根目录下的<code>/source/css/var.styl</code>文件中定义如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义黑色(纯黑)</span></span><br><span class="line"><span class="variable">$monkey</span>-black = <span class="number">#000000</span></span><br><span class="line"><span class="comment">// 浅色模式下的遮蔽色(浅黑色)</span></span><br><span class="line"><span class="variable">$monkey</span>-light-<span class="attribute">mask</span>-color = <span class="built_in">alpha</span>(<span class="variable">$monkey</span>-black, .<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 深色模式下的遮蔽色(没有颜色)</span></span><br><span class="line"><span class="variable">$monkey</span>-dark-<span class="attribute">mask</span>-color = none</span><br></pre></td></tr></table></figure><p><strong>第二步：在深色模式和浅色模式对应的位置定义同名的遮蔽色变量</strong></p><p>打开主题根目录下<code>/source/css/_global/index.styl</code>文件，在<code>:root</code>中添加定义（注意缩进）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义遮蔽色(浅黑色)</span></span><br><span class="line"><span class="attr">--monkey-mask-color</span>: <span class="variable">$monkey</span>-light-<span class="attribute">mask</span>-color</span><br></pre></td></tr></table></figure><p>打开主题根目录下<code>/source/css/_mode/darkmode.styl</code>文件，在<code>[data-theme=&#39;dark&#39;]</code>中添加定义（注意缩进）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义遮蔽色(没有颜色)</span></span><br><span class="line"><span class="attr">--monkey-mask-color</span>: <span class="variable">$monkey</span>-dark-<span class="attribute">mask</span>-color</span><br></pre></td></tr></table></figure><p><strong>第三步：在头图和页脚对应的样式文件中使用颜色变量</strong></p><p>打开主题根目录下的<code>/source/css/_layout/head.styl</code>文件，修改如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023003615707.png"></p><p>打开主题根目录下的<code>/source/css/_layout/footer.styl</code>文件，修改如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023004000547.png"></p><p>PS：我感觉主题的这个逻辑有点问题，按道理讲不管有没有设置<code>footer_bg</code>的图片，只要开启了<code>mask.footer</code>，就应该添加遮蔽色！因为我后续就不会修改这部分的样式了，所以没有对这部分源码进行优化了！</p><h2 id="1-4：卡片半透明"><a href="#1-4：卡片半透明" class="headerlink" title="1.4：卡片半透明"></a>1.4：卡片半透明</h2><p><font color='DC143C'>一图流的“终极形态”就是将博客中所有的卡片都设置为半透明</font>！Butterfly 主题的页面都是由一个个卡片组装起来的，将这些卡片设置为半透明以后，会让网站的背景图片更完美的呈现出来！页脚的图片已经在上面的操作中设置为透明了，所以剩下的就是所有页面的主体内容卡片和侧边栏的卡片，下面就把这些卡片背景设置为半透明！</p><p>我这里演示如何修改文章主体卡片的背景透明：</p><ul><li><p>第一步：在主题根目录下的<code>/source/css/var.styl</code>文件，定义两个透明的背景颜色</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$monkey</span>-light-card-bg = <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">6</span>) <span class="comment">// 浅色模式下要用的白色透明色</span></span><br><span class="line"><span class="variable">$monkey</span>-light-card-bg = <span class="built_in">rgba</span>(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, .<span class="number">6</span>) <span class="comment">// 浅色模式下要用的白色透明色</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：打开主题根目录下的<code>/source/css/_global/index.styl</code>，定义<code>--monkey-card-bg</code>并指向浅色背景</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 卡片背景颜色</span></span><br><span class="line"><span class="attr">--monkey-card-bg</span>: <span class="variable">$monkey</span>-light-card-bg</span><br></pre></td></tr></table></figure><p>PS：注意缩进，一定要定义在<code>:root</code>的里面且比<code>:root</code>多缩进两个空格！</p></li><li><p>第三步：打开主题根目录下的<code>/source/css/_mode/darkmode.styl</code>，定义<code>--monkey-card-bg</code>并指向深色背景</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 卡片背景颜色</span></span><br><span class="line"><span class="attr">--monkey-card-bg</span>: <span class="variable">$monkey</span>-dark-card-bg</span><br></pre></td></tr></table></figure><p>PS：注意缩进，一定要放在<code>[data-theme=&#39;dark&#39;]</code>的里面且比<code>[data-theme=&#39;dark&#39;]</code>多缩进两个空格！</p></li><li><p>第四步：打开主题根目录下的<code>/source/css/_layout/post.styl</code>文件，在顶格的<code>#post</code>下面添加一行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--monkey-card-bg)</span><br></pre></td></tr></table></figure><p>PS：注意缩进，一定要放在顶格的<code>#post</code>的里面且比<code>#post</code>多缩进两个空格！</p></li></ul><p>对于其他的卡片的透明效果，操作的方式是一样的，我就不在这里一一赘述了。但是对于分类、标签等页面的主体内容卡片，挨个修改这些卡片是有点麻烦的，所以剩下的部分我就直接在自定义的样式文件（至于如何引入自定义样式文件，参考本文第二节内容）中设置了：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span></span><br><span class="line">  <span class="comment">// 归档页主体卡片透明</span></span><br><span class="line">  <span class="selector-id">#archive</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--monkey-card-bg)</span><br><span class="line">  <span class="comment">// 其他页主体卡片透明</span></span><br><span class="line">  <span class="selector-id">#page</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--monkey-card-bg)</span><br></pre></td></tr></table></figure><h1 id="第二节：自定义样式"><a href="#第二节：自定义样式" class="headerlink" title="第二节：自定义样式"></a>第二节：自定义样式</h1><p>在魔改主题的时候，避免不了的就是修改样式（修改主题源码或者新增自己的样式），修改源码就不说了，在第一节中我就是通过修改源码来实现样式修改的！那么该怎么增加自己的样式文件呢？在 Butterfly 主题中，增加自定义样式有两种方式，下面分别介绍一下！</p><h2 id="2-1：样式注入"><a href="#2-1：样式注入" class="headerlink" title="2.1：样式注入"></a>2.1：样式注入</h2><p>样式注入是 Butterfly 提供和推荐的一种方式，主题的配置文件中，暴露出一个配置项<code>inject</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以在主题根目录（博客根目录也可以）下的<code>/source/css/</code>文件夹中创建自己的样式文件，比如<code>custom.styl</code>：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023004102878.png"></p><p>然后，在主题配置文件的<code>inject</code>中进行如下配置：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023004245912.png"></p><p>这样一来，当执行<code>hexo generate</code>命令后，会在博客根目录下生成<code>/css/custom.css</code>文件，并被引入到项目中！</p><h2 id="2-2：源码引入"><a href="#2-2：源码引入" class="headerlink" title="2.2：源码引入"></a>2.2：源码引入</h2><p>使用样式注入时，最终会产生除原本的<code>index.css</code>以外的样式文件，而下面这个做法则不会产生多余的样式文件，会将文件中自定义的样式代码合并到<code>index.css</code>文件中！</p><p>首先，最终生成的<code>index.css</code>文件是由主题根目录下的<code>/source/css/index.styl</code>文件生成的，其中的代码如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023004316987.png"></p><p>这就说明，这些文件夹中的<code>styl</code>文件代码都会被引入到最终的<code>index.styl</code>中，所以我们可以参考这种方式来引入自定义的样式文件！在博客根目录下的<code>/source/css/</code>目录下，新建一个名为<code>_custom</code>的文件夹：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023004457688.png"></p><p>然后在主题根目录下的<code>/source/css/index.styl</code>文件的最后添加一行代码：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231023004514524.png"></p><p>这样，以后只要我们在主题根目录下的<code>/source/css/_custom</code>文件夹中添加任意名称的<code>.styl</code>文件，其中的代码都会被引入到<code>/source/css/index.styl</code>文件中，并且其内容会放在该文件的最后，这实现了跟样式注入<code>inject</code>一样的效果，如此以来，一劳永逸！我强烈推荐使用这种方式！</p><p><font color=red><strong>注意</strong></font>：本文后面所有的自定义样式，我都会用这种方式将其引入到我的博客项目中！</p><h1 id="第三节：自定义字体"><a href="#第三节：自定义字体" class="headerlink" title="第三节：自定义字体"></a>第三节：自定义字体</h1><h2 id="3-1：先验知识"><a href="#3-1：先验知识" class="headerlink" title="3.1：先验知识"></a>3.1：先验知识</h2><p>网页的字体是通过<code>font-family</code>来设定的，Butterfly 主题在<code>/source/css/var.styl</code>文件中定义了一些变量：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dafault</span>-<span class="attribute">font-family</span> = -apple-system, BlinkMacSystemFont, <span class="string">&#x27;Segoe UI&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Lato, Roboto, <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line"><span class="variable">$dafault</span>-code-<span class="attribute">font</span> = consolas, Menlo, <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line"><span class="variable">$font</span>-family = <span class="built_in">hexo-config</span>(<span class="string">&#x27;font.font-family&#x27;</span>) ? <span class="built_in">unquote</span>(<span class="built_in">hexo-config</span>(<span class="string">&#x27;font.font-family&#x27;</span>)) : <span class="variable">$dafault</span>-<span class="attribute">font-family</span></span><br><span class="line"><span class="variable">$code</span>-<span class="attribute">font-family</span> = <span class="built_in">hexo-config</span>(<span class="string">&#x27;font.code-font-family&#x27;</span>) ? <span class="built_in">unquote</span>(<span class="built_in">hexo-config</span>(<span class="string">&#x27;font.code-font-family&#x27;</span>)) : <span class="variable">$dafault</span>-code-font</span><br><span class="line"><span class="variable">$site</span>-name-<span class="attribute">font</span> = <span class="built_in">hexo-config</span>(<span class="string">&#x27;blog_title_font.font-family&#x27;</span>) &amp;&amp; <span class="built_in">unquote</span>(<span class="built_in">hexo-config</span>(<span class="string">&#x27;blog_title_font.font-family&#x27;</span>))</span><br></pre></td></tr></table></figure><p>然后在<code>/source/css/_global/index.styl</code>中进行了设定：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--global-bg)</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color)</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--global-font-size)</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$font</span>-family</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">$text</span>-line-height</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>font-family</code>的工作原理我就不废话了，如果你还不了解的话，可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">这篇文章</a>。总而言之，Butterfly 主题总能匹配到访客本地的字体，不需要从网上另行加载字体并用来显示！</p><p>但是，针对不同的系统，Butterfly 的字体会有不同的展示，比如在 Mac 上使用的是<code>-apple-system</code>，即苹果系统默认的字体，而在 Windows 上，则至少会有微软雅黑来兜底！</p><h2 id="3-2：我的执念"><a href="#3-2：我的执念" class="headerlink" title="3.2：我的执念"></a>3.2：我的执念</h2><p>最一开始，我那深入骨髓的强迫症推动我去研究网站字体相关的知识，因为我无法忍受我的博客在不同的访客那里展示的不同，因此学了很多的内容，如字体选择（研究了各种常见的字体）、字体引入（浏览器如何引入字体）、字体设置（样式文件设置字体族等）！</p><p>但是经过一番折腾下来，我慢慢觉得自定义字体似乎是一件没那么必要的事情，原因有三：</p><ol><li>自定义字体，浏览器需加载额外的字体文件，中文字体文件一般很大，会严重拖慢网页加载速度（主要原因）；</li><li>我相中的字体都不能免费商用，比如苹方等优秀字体，很怕一不小心就收到律师函；</li><li>试想一下，如果访问你博客的人，人家本身就魔改了自己的浏览器，我们再去修改字体，违反了顾客的审美；</li></ol><p>随着魔改深入，我越来越想把主题的字体换掉，并且我意识到应该在魔改的一开始就把字体换掉，因为字体对整体的主题效果影响很大！这是我一直以来的执念，苦于中文字体文件过大（严重拖慢网页加载速度）这个硬伤，我一直忍着！直到我发现别的博主都在对字体文件进行裁剪和压缩，我才知道原来可以这么做！</p><h2 id="3-3：具体实现"><a href="#3-3：具体实现" class="headerlink" title="3.3：具体实现"></a>3.3：具体实现</h2><p>实际上，对于代码块字体和英文字体来说，不需要裁剪和压缩，因为它本来就不大，需要裁剪和压缩的是中文字体！把不需裁剪的字体放到<code>/source/fonts</code>文件夹中，把需要裁剪和压缩的字体放到<code>/source/font</code>中：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024193903656.png"></p><p>注意：需要裁剪的字体必须是<code>ttf</code>格式，参考店长的<a href="https://akilar.top/posts/49b73b87/">《使用gulp压缩博客静态资源》</a>，下面来处理需要裁剪的字体！</p><p><strong>第一步：安装插件</strong></p><p>打开终端，切换到博客根目录下，执行如下两条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-cli -g # 全局安装gulp指令集</span><br><span class="line">npm install gulp --save # 安装gulp插件</span><br></pre></td></tr></table></figure><p>接着安装子插件，用来裁剪和压缩字体文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-fontmin --save-dev</span><br></pre></td></tr></table></figure><p><strong>第二步：任务脚本</strong></p><p>font-min 并不会自己运行，所以需要写一个任务脚本，当执行某个命令时触发运行，以此来裁剪和压缩字体文件！</p><p>在博客根目录下创建一个名为<code>gulpfile.js</code>的文件，并编辑其内容为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用到的各个插件</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fontmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-fontmin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩字体</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minifyFont</span>(<span class="params">text, cb</span>) &#123;</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&#x27;./public/font/*.ttf&#x27;</span>) <span class="comment">// 原字体所在目录</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">fontmin</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: text</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/fontdest/&#x27;</span>)) <span class="comment">// 压缩后的输出目录</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;mini-font&#x27;</span>, <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&#x27;./public/*.html&#x27;</span>, <span class="string">&#x27;./public/**/*.html&#x27;</span>]) <span class="comment">//HTML文件所在目录请根据自身情况修改</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      buffers.<span class="title function_">push</span>(file.<span class="property">contents</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers).<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">      <span class="title function_">minifyFont</span>(text, cb);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行gulp命令时依次执行以下任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="comment">// &#x27;compress&#x27;, &#x27;minify-css&#x27;, &#x27;minify-html&#x27;,&#x27;mini-font&#x27;</span></span><br><span class="line">  <span class="string">&#x27;mini-font&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p><strong>第三步：引入字体</strong></p><p>参考第二节，添加一个自定义的样式文件，并根据最终的路径来设置，将所有的字体文件通过<code>@font-face</code>来引入。比如我这里是在<code>/source/css/_custom</code>中新建了名为<code>font.styl</code>文件，并在其中编辑如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入英文字体</span></span><br><span class="line"><span class="keyword">@font-face</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;HelveticaNeue&#x27;</span></span><br><span class="line">  <span class="attribute">font-display</span>: swap</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/HelveticaNeue-01.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入中文字体</span></span><br><span class="line"><span class="keyword">@font-face</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;GlowSansSC&#x27;</span></span><br><span class="line">  <span class="attribute">font-display</span>: swap</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fontdest/GlowSansSC-Normal-Book.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入代码块字体</span></span><br><span class="line"><span class="keyword">@font-face</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;JetBrains Mono&#x27;</span></span><br><span class="line">  <span class="attribute">font-display</span>: swap</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/JetBrainsMono-Regular.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>第四步：修改font-family</strong></p><p>打开主题根目录下的<code>/source/css/var.styl</code>文件，添加如下两处：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024204909143.png"></p><p><strong>第五节：预览效果</strong></p><p>此时打开终端，切换到本地博客根目录下，依次执行如下四条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">gulp</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中执行完第三条命令后，就会在指定的目录中（<code>/public/fontdest/</code>）中生成裁剪后的文件，实际上也就是在第三步中引入的字体文件！</p><h2 id="3-4：文章字体"><a href="#3-4：文章字体" class="headerlink" title="3.4：文章字体"></a>3.4：文章字体</h2><p>对于文章的字体大小，我进行了如下几点修改。</p><p>第一：文章内容默认的字体太小了，将其稍微放大一点，修改主题根目录下的<code>/source/css/var.styl</code>文件</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024213507949.png"></p><p>第二：为了让文章每行展示的字数跟我 Typora 接近，修改主题根目录下的<code>/source/css/_page/common.styl</code></p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024221534913.png"></p><h1 id="第四节：魔改导航栏"><a href="#第四节：魔改导航栏" class="headerlink" title="第四节：魔改导航栏"></a>第四节：魔改导航栏</h1><h2 id="4-1：魔改菜单栏"><a href="#4-1：魔改菜单栏" class="headerlink" title="4.1：魔改菜单栏"></a>4.1：魔改菜单栏</h2><p>主题默认的菜单栏是在导航栏的最右边，我准备将其修改到导航栏的中间部分，并将展开的子菜单改为横幅展示！因为修改源码比较费劲，所以我打算使用自定义的样式文件来进行样式修改！</p><p>首先在主题根目录下的<code>/source/css/_custom/cuctom.styl</code>文件（假如没有可以新建一个）中添加如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------- 导航栏魔改 -----------------------------------------</span></span><br><span class="line"><span class="comment">// 1.菜单栏设置(仅对大屏样式进行修改)</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>)</span><br><span class="line">  #nav .menus_items &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: fit-content <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.menus_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>友情提示：</p><ul><li>文件<code>custom.styl</code>会自动被引入到主题根目录下的<code>/source/css/index.styl</code>文件中，详见本文 2.2 节；</li><li>这里设置的<code>900px</code>是根据我菜单栏的宽度来制定的，假如你的菜单栏项目很多，可以适当放大这里的值；</li></ul><h2 id="4-2：去除“搜索”"><a href="#4-2：去除“搜索”" class="headerlink" title="4.2：去除“搜索”"></a>4.2：去除“搜索”</h2><p>搜索按钮右边的“搜索”二字很丑，打开主题下根目录下的<code>/layout/includes/header/nav.pug</code>：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024221639381.png"></p><p>然后导航栏就不会再出现“搜索”这两个字了！</p><h1 id="第五节：主题的颜色"><a href="#第五节：主题的颜色" class="headerlink" title="第五节：主题的颜色"></a>第五节：主题的颜色</h1><p>作为一个深度强迫症，对于主题颜色这种能明显体现主题特点的部分，毫无疑问是要修改的！Butterfly 主题有深色模式和浅色模式两种，我们先来分析一下主题原本的颜色实现逻辑！</p><h2 id="5-1：默认逻辑"><a href="#5-1：默认逻辑" class="headerlink" title="5.1：默认逻辑"></a>5.1：默认逻辑</h2><p>首先，浅色模式的颜色取自文件<code>butterfly/source/css/_global/index.styl</code>中的<code>:root</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  <span class="attr">--global-font-size</span>: <span class="variable">$font</span>-size</span><br><span class="line">  <span class="attr">--global-bg</span>: <span class="variable">$body</span>-bg</span><br><span class="line">  <span class="attr">--font-color</span>: <span class="variable">$font</span>-black</span><br><span class="line">  <span class="attr">--hr-border</span>: <span class="built_in">lighten</span>(<span class="variable">$theme</span>-hr-<span class="attribute">color</span>, <span class="number">50%</span>)</span><br><span class="line">  <span class="attr">--hr-before-color</span>: <span class="built_in">lighten</span>(<span class="variable">$theme</span>-hr-<span class="attribute">color</span>, <span class="number">30%</span>)</span><br><span class="line">  <span class="attr">--search-bg</span>: <span class="variable">$search</span>-bg</span><br><span class="line">  <span class="attr">--search-input-color</span>: <span class="variable">$search</span>-input-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--search-a-color</span>: <span class="variable">$search</span>-a-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--preloader-bg</span>: <span class="variable">$preloader</span>-bg</span><br><span class="line">  <span class="attr">--preloader-color</span>: <span class="variable">$preloader</span>-word-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--tab-border-color</span>: <span class="variable">$tab</span>-<span class="attribute">border-color</span></span><br><span class="line">  <span class="attr">--tab-botton-bg</span>: <span class="variable">$tab</span>-botton-bg</span><br><span class="line">  <span class="attr">--tab-botton-color</span>: <span class="variable">$tab</span>-botton-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--tab-button-hover-bg</span>: <span class="variable">$tab</span>-button-hover-bg</span><br><span class="line">  <span class="attr">--tab-button-active-bg</span>: <span class="variable">$tab</span>-button-active-bg</span><br><span class="line">  <span class="attr">--card-bg</span>: <span class="variable">$card</span>-bg</span><br><span class="line">  <span class="attr">--sidebar-bg</span>: <span class="variable">$sidebar</span>-<span class="attribute">background</span></span><br><span class="line">  <span class="attr">--btn-hover-color</span>: <span class="variable">$button</span>-hover-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--btn-color</span>: <span class="variable">$button</span>-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--btn-bg</span>: <span class="variable">$button</span>-bg</span><br><span class="line">  <span class="attr">--text-bg-hover</span>: <span class="built_in">rgba</span>(<span class="variable">$text</span>-bg-hover, .<span class="number">7</span>)</span><br><span class="line">  <span class="attr">--light-grey</span>: <span class="variable">$light</span>-grey</span><br><span class="line">  <span class="attr">--dark-grey</span>: <span class="variable">$dark</span>-grey</span><br><span class="line">  <span class="attr">--white</span>: <span class="variable">$white</span></span><br><span class="line">  <span class="attr">--text-highlight-color</span>: <span class="variable">$text</span>-highlight-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--blockquote-color</span>: <span class="variable">$blockquote</span>-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--blockquote-bg</span>: <span class="variable">$blockquote</span>-<span class="attribute">background-color</span></span><br><span class="line">  <span class="attr">--reward-pop</span>: <span class="variable">$reward</span>-pop-up-bg</span><br><span class="line">  <span class="attr">--toc-link-color</span>: <span class="variable">$toc</span>-link-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--card-box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">8px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, .<span class="number">05</span>)</span><br><span class="line">  <span class="attr">--card-hover-box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">8px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, .<span class="number">09</span>)</span><br><span class="line">  <span class="attr">--pseudo-hover</span>: <span class="variable">$pseudo</span>-hover</span><br><span class="line">  <span class="attr">--headline-presudo</span>: <span class="number">#a0a0a0</span></span><br><span class="line">  <span class="attr">--scrollbar-color</span>: <span class="variable">$scrollbar</span>-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--default-bg-color</span>: <span class="variable">$theme</span>-<span class="attribute">color</span></span><br><span class="line">  <span class="attr">--zoom-bg</span>: <span class="number">#fff</span></span><br><span class="line">  <span class="attr">--mark-bg</span>: <span class="built_in">alpha</span>(<span class="variable">$dark</span>-black, .<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>而<font color=red>需要适配深色模式的颜色</font>则来自于<code>butterfly/source/css/_mode/darkmode.styl</code>中的<code>data-theme=&#39;dark&#39;</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;darkmode.enable&#x27;</span>) || <span class="built_in">hexo-config</span>(<span class="string">&#x27;display_mode&#x27;</span>) == <span class="string">&#x27;dark&#x27;</span></span><br><span class="line">  <span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span></span><br><span class="line">    <span class="attr">--global-bg</span>: <span class="built_in">darken</span>(<span class="number">#121212</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="attr">--font-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--hr-border</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">4</span>)</span><br><span class="line">    <span class="attr">--hr-before-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--search-bg</span>: <span class="number">#121212</span></span><br><span class="line">    <span class="attr">--search-input-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--search-a-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--preloader-bg</span>: <span class="built_in">darken</span>(<span class="number">#121212</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="attr">--preloader-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--tab-border-color</span>: <span class="number">#2c2c2c</span></span><br><span class="line">    <span class="attr">--tab-botton-bg</span>: <span class="number">#2c2c2c</span></span><br><span class="line">    <span class="attr">--tab-botton-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--tab-button-hover-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="attr">--tab-button-active-bg</span>: <span class="number">#121212</span></span><br><span class="line">    <span class="attr">--card-bg</span>: <span class="number">#121212</span></span><br><span class="line">    <span class="attr">--sidebar-bg</span>: <span class="number">#121212</span></span><br><span class="line">    <span class="attr">--btn-hover-color</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">40</span>)</span><br><span class="line">    <span class="attr">--btn-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--btn-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="attr">--text-bg-hover</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="attr">--light-grey</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--dark-grey</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">2</span>)</span><br><span class="line">    <span class="attr">--white</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">9</span>)</span><br><span class="line">    <span class="attr">--text-highlight-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">9</span>)</span><br><span class="line">    <span class="attr">--blockquote-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--blockquote-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="attr">--reward-pop</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="attr">--toc-link-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">6</span>)</span><br><span class="line">    <span class="attr">--hl-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">7</span>)</span><br><span class="line">    <span class="attr">--hl-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="attr">--hltools-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="attr">--hltools-color</span>: <span class="number">#90a4ae</span></span><br><span class="line">    <span class="attr">--hlnumber-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="attr">--hlnumber-color</span>: <span class="built_in">alpha</span>(<span class="number">#FFFFFF</span>, .<span class="number">4</span>)</span><br><span class="line">    <span class="attr">--hlscrollbar-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="attr">--hlexpand-bg</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, <span class="built_in">rgba</span>(<span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">2</span>), .<span class="number">6</span>), <span class="built_in">rgba</span>(<span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">2</span>), .<span class="number">9</span>))</span><br><span class="line">    <span class="attr">--scrollbar-color</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="attr">--timeline-bg</span>: <span class="built_in">lighten</span>(<span class="number">#121212</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="attr">--zoom-bg</span>: <span class="number">#121212</span></span><br><span class="line">    <span class="attr">--mark-bg</span>: <span class="built_in">alpha</span>(<span class="variable">$dark</span>-black, .<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>然后，在主题 UI 相应的<code>.styl</code>文件中，在设置颜色时通过<code>var()</code>来适配不同模式的颜色值！</p><h2 id="5-2：我的思路"><a href="#5-2：我的思路" class="headerlink" title="5.2：我的思路"></a>5.2：我的思路</h2><p>我的思路如下：</p><ul><li>将主题颜色（深&#x2F;浅）全部定义到<code>butterfly/source/css/var.styl</code>中，然后在上述两个文件中通过变量名来获取不同的颜色值；</li><li>对于那些适配两种模式的颜色，我首先会在上述两个文件中定义同名的全局变量（形如<code>--card-bg</code>），然后再修改其对应的<code>styl</code>代码（使用<code>var(--card-bg)</code>来赋予颜色），这样一来，就适配了两种模式！</li></ul><p>至于细节的实现，我这里就不详细记载了（<del>修改的地方比较多，不好记录</del>）</p><h1 id="第六节：侧边栏卡片"><a href="#第六节：侧边栏卡片" class="headerlink" title="第六节：侧边栏卡片"></a>第六节：侧边栏卡片</h1><p>首页的侧边栏有很多的卡片，Butterfly 页提供了自定义侧边栏的功能，<a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=aside#%E8%A8%AA%E5%95%8F%E4%BA%BA%E6%95%B8-busuanzi-UV-%E5%92%8C-PV">官方文档</a>中的描述是“可自行決定哪個項目需要顯示，可決定位置，也可以設置不顯示側邊欄”，并且基本的设置都可以在主题配置文件中的<code>aside</code>进行配置！</p><h2 id="6-1：站长信息配置"><a href="#6-1：站长信息配置" class="headerlink" title="6.1：站长信息配置"></a>6.1：站长信息配置</h2><p>站长信息是一个单独的卡片，在这个卡片上设置可以设置的内容很多，我这里做个备忘：</p><ul><li>作者名称下面可展示描述，可通过<code>card_author.description</code>来设置（若不设置则展示站点<code>description</code>）；</li><li>在上述三个按钮下面可以展示一个比较大的按钮，这个按钮可以通过<code>aside.card_author.description</code>设置；</li></ul><h2 id="6-2：引入社交图标"><a href="#6-2：引入社交图标" class="headerlink" title="6.2：引入社交图标"></a>6.2：引入社交图标</h2><p>Butterfly 默认使用 <a href="https://fontawesome.com/">Font Awesome V5</a> 的字符图标，目前已经更新到 5.13.0，总共有 1588 个免费图标。但是由于是国外的图标网站，对于国内的一些网站不支持，因此我们可以使用国内的一些图标网站！</p><p>国内最出名的就是 <a href="https://www.iconfont.cn/">iconfont</a>（阿里巴巴矢量图标库）了，它功能强大且图标内容很丰富，很多 Font Awesome 不支持的图标都可以在这里找到。</p><p><strong>第一步：挑选图标</strong></p><p>登陆 iconfont 官网，注册账号，然后选取找到喜欢的图标，鼠标悬停在图标上面，点击添加购物车按钮。</p><p><strong>第二步：下载图标</strong></p><p>点击购物车按钮，再点击“下载代码”的按钮，这样就下载下来一个压缩包。</p><p><strong>第三步：处理文件</strong></p><p>下载下来的是一个压缩包，先把它解压出来，然后：</p><ul><li>将<code>iconfont.ttf</code>文件复制到主题根目录下的<code>/source/css/fonts</code>中（假如没有就新建）；</li><li>将<code>iconfont.css</code>文中的代码复制到自己的样式代码中（参考本文第二节）；</li></ul><p><strong>第四步：修改样式</strong></p><p>修改上一步拷贝的<code>css</code>代码，可设置图标的颜色和大小，如我的设置（注意根据自己的实际情况修改<code>url</code>的值）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/fonts/iconfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">// font-size: 20px; 统一设置图标大小</span></span><br><span class="line">  <span class="comment">// color: #60ce41; 统一设置图标颜色</span></span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-circle-email</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5ea3ef</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e8cc&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-weixin</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#60ce41</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e60b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-qq</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>; <span class="comment">// 单独设置图标大小</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#67ade4</span> // 单独设置图标颜色</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e64c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-weibo</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#d33437</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e60c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-rss</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ed702d</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\e773&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第五步：配置RSS订阅</strong></p><p>主题没有关于 RSS 订阅的设置，需要自己设置。首先，打开终端，切换到博客根目录下，执行如下命令来安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>然后，在站点配置文件（博客根目录下的<code>_config.yml</code>）文件中添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 RSS 订阅</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>插件的官网上，给出了这些配置的解释：</p><ul><li>enable: 默认开启可以省略</li><li>type: RSS 的类型（atom&#x2F;rss2）</li><li>path: 文件路径，默认是 atom.xml&#x2F;rss2.xml</li><li>limit: 展示文章的数量,使用 0 或则 false 代表展示全部</li><li>hub: 如果使用不到可以为空</li><li>content: （可选）设置 true 可以在 RSS 文件中包含文章全部内容，默认：false</li><li>content_limit: （可选）摘要中使用的帖子内容的默认长度。 仅在内容设置为 false 且未显示自定义帖子描述时才使用。</li><li>content_limit_delim :（可选）如果 content_limit 用于缩短帖子内容，则仅在达到字符限制之前在此分隔符的最后一次出现处剪切，默认不使用。</li><li>icon: (可选）自定义图标。默认为主配置中指定的电子邮件头像。</li><li>autodiscovery: 添加提要自动发现，默认开启</li><li>template : 自定义模板路径，该文件用于生成 xml 文件</li></ul><p>这样当用<code>Hexo g</code>生成静态网页的时候会在<code>public</code>文件夹中（也就是你静态网页文件夹中）生成一个<code>atom.xml</code>文件！</p><p><strong>第五步：在主题配置文件中开启社交图标的配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Settings (社交图标设置)</span></span><br><span class="line"><span class="comment"># formal:</span></span><br><span class="line"><span class="comment">#   icon: link || the description || color</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment"># fab fa-github: https://github.com/fattymonkey || Github || &#x27;#24292e&#x27;</span></span><br><span class="line">  <span class="comment"># fas fa-envelope: mailto:1185349843@qq.com || Email || &#x27;#4a7dbe&#x27;</span></span><br><span class="line">  <span class="attr">iconfont icon-circle-email:</span> <span class="string">mailto:1185349843@qq.com</span> <span class="string">||</span> <span class="string">邮箱</span></span><br><span class="line">  <span class="attr">iconfont icon-weixin:</span> <span class="string">https://www.czblogs.cn/socials/WeChat.jpg</span> <span class="string">||</span> <span class="string">微信</span></span><br><span class="line">  <span class="attr">iconfont icon-weibo:</span> <span class="string">https://weibo.com/u/5102287461</span> <span class="string">||</span> <span class="string">微博</span></span><br><span class="line">  <span class="attr">iconfont icon-qq:</span> <span class="string">https://www.czblogs.cn/socials/QQ.jpg</span> <span class="string">||</span> <span class="string">QQ</span></span><br><span class="line">  <span class="attr">iconfont icon-rss:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">RSS</span></span><br></pre></td></tr></table></figure><p>注意这里，因为前面已经设置了图标的颜色，所以这里就不用设置颜色了（即使设置了也没有效果）！</p><p><font color=red>友情提示</font>：此时你使用<code>hexo server</code>启动本地预览时，点击 RSS 订阅的按钮，此时展示的<code>atom.xml</code>中的中文可能是乱码的，不要慌，此时你再去点击部署到远程的 RSS 订阅，发现不存在乱码问题，所以不用慌，不影响正常使用！至于为什么本地预览会出现乱码，就不得而知了～～</p><h2 id="6-3：社交图标旋转"><a href="#6-3：社交图标旋转" class="headerlink" title="6.3：社交图标旋转"></a>6.3：社交图标旋转</h2><p>每次鼠标放上去时图标都会旋转 360 度，我不喜欢这个特效，修改主题目录下<code>/source/css/_layout/aside.styl</code>：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024221718147.png"></p><h1 id="第七节：音乐播放器"><a href="#第七节：音乐播放器" class="headerlink" title="第七节：音乐播放器"></a>第七节：音乐播放器</h1><p>对于在首页添加全局吸底的音乐播放器，Butterfly 的官方文档<a href="https://butterfly.js.org/posts/507c070f/">《Butterfly添加全局吸底Aplayer教程》</a>已经讲解的很详细了，这也使我基本没有遇到什么坑，只需紧跟官方文档操作即可！</p><p>官方文档介绍了安装和不安装插件 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 的两种实现方案，我这里选择了不安装插件的做法！</p><h2 id="7-1：开启配置"><a href="#7-1：开启配置" class="headerlink" title="7.1：开启配置"></a>7.1：开启配置</h2><p>在主题配置文件中，找到<code>aplayerInject</code>，将<code>enable</code>和<code>per_page</code>都设置为<code>true</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>   <span class="comment"># 开启Aplayer</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span> <span class="comment"># 是否在每个页面都开启</span></span><br></pre></td></tr></table></figure><h2 id="7-2：插入代码"><a href="#7-2：插入代码" class="headerlink" title="7.2：插入代码"></a>7.2：插入代码</h2><p>将如下代码插入到主题配置文件的<code>inject.bottom</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5324765788&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-lrctype=&quot;1&quot;</span> <span class="string">data-mutex=&quot;true&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-loop=&quot;all&quot;</span> <span class="string">data-listFolded=&quot;true&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">data-volume=&quot;0.3&quot;</span> <span class="string">data-listmaxheight=&quot;265px&quot;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里的参数：</p><ul><li><p><code>data-id</code>：必填项，没有默认值，可选值为<code>song id</code>、<code>playlist id</code>、<code>album id</code>、<code>search keyword</code>；</p></li><li><p><code>data-server</code>：必填项，没有默认值，可选值为 <code>netease</code>、 <code>tencent</code>、 <code>kugou</code>、 <code>xiami</code>、 <code>baidu</code>；</p></li><li><p><code>data-type</code>：必填项，没有默认值，可选值为<code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code>；</p></li><li><p><code>data-fixed</code>：吸底模式，默认是<code>false</code>，若设置为<code>true</code>，播放器会固定在浏览器窗口的页底（吸底固定）；</p></li><li><p><code>data-mini</code>：是否开启迷你模式，默认是<code>true</code>；</p></li><li><p><code>data-lrctype</code>：歌词格式，默认是<code>0</code>（在页脚展示小字体歌词），设置为<code>1</code>则不会展示歌词；</p></li><li><p><code>data-mutex</code>：默认值<code>true</code>，防止同时播放多个播放器，当该播放器开始播放时暂停其他播放器；</p></li><li><p><code>data-order</code>：播放顺序， 可选值有<code>list</code>(列表循环，默认值)、 <code>random</code>(随机播放)；</p></li><li><p><code>data-loop</code>：循环模式，可选值有：<code>all</code>(全部循环，默认值)、<code>one</code>(单曲循环)、<code>none</code>(不循环)；</p></li><li><p><code>data-listfolded</code>：是否折叠播放列表，默认值是<code>false</code>；</p></li><li><p><code>data-preload</code>：预加载模式，可选项： <code>none </code>、<code>metadata</code>、 <code>auto</code>（默认值），建议设置为<code>none</code>；</p></li><li><p><code>data-autoplay</code>：自动播放，默认值为<code>false</code>；</p><p>一般浏览器会阻止自动播放，即使设置了自动播放也不会生效，还会在控制台预警，所以建议设置为<code>false</code>！</p></li><li><p><code>data-volume</code>：默认音量，默认值<code>0.7</code>，注意播放器会记住用户的设置，当用户设置后，此设置值将失效；</p></li><li><p><code>data-listmaxheight</code>：播放列表的最大高度，我试了一下，大概设置为<code>265px</code>可以恰好展示 8 首歌曲；</p></li><li><p><code>data-storagename</code>：默认值是<code>metingjs</code>，LocalStorage 中存储播放器设定的键名；</p></li><li><p><code>data-theme</code>：播放器的颜色，默认值是<code>#2980b9</code>，我这里将其修改为我的主题色（暂时没有适配深浅模式）；</p></li></ul><h2 id="7-3：开启Pjax"><a href="#7-3：开启Pjax" class="headerlink" title="7.3：开启Pjax"></a>7.3：开启Pjax</h2><p>最后，如果你想切换页面时，音乐不会中断，就将主题配置文件中的<code>pjax</code>打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pjax</span></span><br><span class="line"><span class="comment"># It may contain bugs and unstable, give feedback when you find the bugs.</span></span><br><span class="line"><span class="comment"># https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - xxxx</span></span><br><span class="line">    <span class="comment"># - xxxx</span></span><br></pre></td></tr></table></figure><h2 id="7-4：收入侧边"><a href="#7-4：收入侧边" class="headerlink" title="7.4：收入侧边"></a>7.4：收入侧边</h2><p>即使设置了迷你模式，播放器依然在页底展示为一个方形的区域，不会被收入到侧边中：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024221823792.png"></p><p>即使在移动设备（屏幕比较小的设备）上也是这样，这看起来是很突兀的！于是我想把它修改成这样：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024222017732.png"></p><p>由于 Aplayer 的样式文件是通过网络加载的，所以我们不能修改它的源码，只能在自定义的样式文件中对其进行设置！</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页底播放器收入侧边</span></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5：样式优化"><a href="#7-5：样式优化" class="headerlink" title="7.5：样式优化"></a>7.5：样式优化</h2><p>在 8.4 中，我们已经将音乐播放器收入到侧边了，但是这样存在一个问题，因为是先加载默认样式再加载我们的自定义样式的，所以在加载的时候会先显示方形的播放器，然后再将其收侧边！</p><p>其实，我们也可以将 Aplayer 的样式文件下载下来放到自己的资源平台上，然后再修改其中的源码并在博客中引入它，这样也可以实现相同的效果，并且可以解决“先展示方形再收入侧边”的小问题（注意移除主题本身引入该文件的逻辑，否则就造成了重复加载，具体细节就不记录了）！</p><h1 id="第八节：页脚的魔改"><a href="#第八节：页脚的魔改" class="headerlink" title="第八节：页脚的魔改"></a>第八节：页脚的魔改</h1><p>Butterfly 的页脚一直是各路魔改大神最关注的地方，因为页脚的可定制化程度很高，做为页面的最后部分，既可以作为优秀的导航系统，也可以作为信息展示的渠道。我看到了很多大神的页脚，五花八门、各式各样，我真的很喜欢！所以我在自己的页脚处也下了很大的功夫！</p><h2 id="8-1：整体思路"><a href="#8-1：整体思路" class="headerlink" title="8.1：整体思路"></a>8.1：整体思路</h2><p>默认情况下，在主题配置文件中有页脚信息的设置，可以配置三个信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2023</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">这里配置自定义的页脚信息</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p>配置后的样式如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024223027129.png"></p><p>但是我最终想要做成类似下面这样的效果：</p><p><img src="https://www.czblogs.cn/posts/hexo/04/image-20231024224026531.png"></p><p>对于页脚的魔改，首先我们要明确如下两个地方：</p><ul><li>页面元素：主题根目录下的<code>/layout/includes/footer.pug</code>；</li><li>样式文件：主题根目录下的<code>/source/css/_layout/footer.styl</code>；</li></ul><p>对于具体的魔改过程我就不废话了，涉及的地方很多，有很多细节，总体而言就是修改上述两个文件！</p><h2 id="8-2：随机文章"><a href="#8-2：随机文章" class="headerlink" title="8.2：随机文章"></a>8.2：随机文章</h2><p>随机文章的功能添加，参考了大神<a href="https://blog.zhheo.com/">HEO张洪</a>的<a href="https://blog.zhheo.com/p/c116857c.html">《Hexo的Butterfly魔改教程：随机网页跳转（无缝版）》</a>这篇文章，具体细节就不详述了，直接给出来步骤！</p><p><strong>第一步：创建JS文件</strong></p><p>创建<code>/themes/butterfly/scripts/helpers/random.js</code>文件，并在其中编辑如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;random&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = hexo.<span class="property">config</span>.<span class="property">random</span> || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> posts = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> locals.<span class="property">posts</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (post.<span class="property">random</span> !== <span class="literal">false</span>) posts.<span class="title function_">push</span>(post.<span class="property">path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">path</span> || <span class="string">&#x27;monkey/random.js&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">`var posts=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(posts)&#125;</span>;function toRandomPost()&#123;pjax.loadUrl(&#x27;/&#x27;+posts[Math.floor(Math.random() * posts.length)]);&#125;;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>假如你没开启 Pjax 的话，就用下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;random&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = hexo.<span class="property">config</span>.<span class="property">random</span> || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> posts = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> locals.<span class="property">posts</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (post.<span class="property">random</span> !== <span class="literal">false</span>) posts.<span class="title function_">push</span>(post.<span class="property">path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">path</span> || <span class="string">&#x27;monkey/random.js&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">`var posts=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(posts)&#125;</span>;function toRandomPost()&#123;window.open(&#x27;/&#x27;+posts[Math.floor(Math.random() * posts.length)],&quot;_self&quot;);&#125;;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>第二步：引入JS文件</strong></p><p>在主题配置文件中的<code>inject.bottom</code>中，将创建的JS文件引入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;script</span> <span class="string">src=&quot;/monkey/random.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步：调用JS函数</strong></p><p>最后在你想添加“随机文章”的 DOM 元素上，添加一个<code>onclick</code>事件来调用函数<code>toRandomPost()</code>，即可完成跳转。</p><p>比如我是在主题根目录下的<code>/layout/includes/footer.pug</code>文件中，随机文章的元素上添加的点击事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.footer-item(onclick=&quot;toRandomPost()&quot;) 随机文章</span><br></pre></td></tr></table></figure><p>这样就完成了页脚随机文章的功能添加！</p><h2 id="8-3：打赏列表"><a href="#8-3：打赏列表" class="headerlink" title="8.3：打赏列表"></a>8.3：打赏列表</h2><p>我的打赏列表是放在页脚的，实际上它只是一个普通的 Page，是使用命令<code>hexo new page XXX</code>创建的页面！至于具体的打赏列表，我就直接在 Markdown 中用表格编写的！</p><p>比如，我生成的打赏列表页面是使用命令<code>hexo new page donate</code>创建的，那么就在对应的 Markdown 文件中写入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note green &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">感谢以下客官的打赏，每篇文章的结尾都有给我充电的入口哦～～</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| 客官大名  | 渠道  |  金额  | 留言  |</span><br><span class="line">|:-----:|:---:|:----:|:---:|</span><br><span class="line">| 饭饭爱吃饭 | 支付宝 | 8.88 | 无留言 |</span><br><span class="line">| 我是武松啊 | 微信  | 6.60 | 无留言 |</span><br></pre></td></tr></table></figure><p>最后在页脚处添加如下链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.footer-item(href=&quot;/donate/&quot;) 客官打赏</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题配置之评论系统</title>
      <link href="/post/10063.html"/>
      <url>/post/10063.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：静态博客评论系统"><a href="#第一节：静态博客评论系统" class="headerlink" title="第一节：静态博客评论系统"></a>第一节：静态博客评论系统</h1><p>静态博客没有后台，自然也就没有数据库，所以静态博客的硬伤就是评论系统，Hexo 如此，Hugo 也是如此！由于我个人在搭建 Hexo 博客之前也没用过静态博客，所以对市面上五花八门的第三方评论系统也没有亲身体会过（<del>没有实践就没有发言权</del>）！</p><p>好在网上有很多经验丰富的博主，他们给出了一些总结性的见解，我主要参考了下面这些大神的文章：</p><ul><li><a href="https://eallion.com/comments/">《静态博客评论系统的选择》</a>—— <a href="https://eallion.com/">小小的大蜗牛</a>；</li><li><a href="https://yoouu.cn/2022-11-10-comment-system-for-static-blog/">《静态博客有哪些评论系统？》</a>—— <a href="https://yoouu.cn/">SunSeekerX</a></li></ul><p>现总结如下，第三方评论系统主要分为三类：</p><ul><li><p><font color=red>第一类：基于 SaaS 的评论解决方案，无需部署，引入 API 就可以使用的第三方评论系统</font></p><p>包括 Disqus、多说、来必力等，其中 Disqus 就是目前最优秀的评论系统。久经考验，服务稳定，体验良好。不仅限于博客，在各行各业的网站上都能看到它的身影。但是迫于中国的网络环境，在境内并不能使用原生 Disqus，所以不建议面向中文读者的网站使用 Disqus。</p></li><li><p><font color=red>第二类：基于 Github Issues 的评论系统，依靠 Github 提供服务</font></p><p>包括 Gitalk、Gitment、Utterances，其中比较推荐的是 Utterances，因为跟其他两个相比，这个评论系统要求的用户权限很少，其他两个要的用户权限很大，存在很大的安全问题！但是，他们依托于 Github 的服务，同样会因为网络问题在国内受限。</p></li><li><p><font color=red>第三类：基于 PaaS 的评论系统，需要自己部署在诸如 LeanCloud 这类平台上</font></p><p>包括 Valine 和它的一些衍生品，现在这类评论系统很火爆，部署简单，容易上手，有很多保姆级别的教程，还有数不胜数的自定义样式，连小白也能轻松配置。</p><p>但是伴随着 Valine 流行度的上升和用户下沉，它的问题也慢慢浮现。比如它不再开源、安全问题越来越多、它依赖的后端 LeanCloud 限流，LeanCloud 自己也出过安全问题，处于这些考虑，基本上就可以放弃 Valine 了！</p><p>但是在种种情况下，Valine 的衍生品就来了，各路豪杰纷纷表示要重新创造轮子，在网上也能搜到不少半成品，目前有两个比较优秀 – Twikoo 和 Waline</p><p>Twikoo 采用腾讯云开发 CloudBase 作为后端数据库（当然也可以使用其他的平台），隐私安全，但是可能部署起来没那么简单；而 Waline 诞生的主要原因就是为了解决 Valine 的安全性问题。</p></li></ul><h1 id="第二节：Butterfly-评论系统"><a href="#第二节：Butterfly-评论系统" class="headerlink" title="第二节：Butterfly 评论系统"></a>第二节：Butterfly 评论系统</h1><p>Butterfly 4.10.0 内置支持的评论系统有如下这些：</p><ul><li>Disqus；</li><li>Disqusjs；</li><li>Livere（来必力）；</li><li>Gitalk；</li><li>Valine；</li><li>Waline；</li><li>Utterances；</li><li>facebook_comments；</li><li>Twikoo；</li><li>Giscus；</li><li>remark42；</li><li>artalk；</li></ul><p>可见主题原生支持的评论系统有很多，我们需要做个选择。首先排除掉 gitalk、disqus、disqusjs；来必力就算了，当初号称国内最大的多说都倒了，更别说这个来自韩国的了；valine 还好，但是限流比较严重；剩下比较主流的就是 Twikoo 和 Waline 了，我们可以从这两个中选择一个！</p><h1 id="第三节：Twikoo的详细配置"><a href="#第三节：Twikoo的详细配置" class="headerlink" title="第三节：Twikoo的详细配置"></a>第三节：Twikoo的详细配置</h1><p>我选择的是 <a href="https://twikoo.js.org/">Twikoo</a>，这个评论系统现在非常火，使用它的人非常多，而且它的官方文档是中文的，它的优点非常多，而缺点基本上只有一个，就是不支持 IE 浏览器（估计现在也没有人使用 IE 浏览器了），所以这个缺点可以忽略。关于 Twikoo 的详细介绍，可以直接查看官网。</p><p>总之，跟其他评论系统相比 Twikoo 具备以下特点：</p><ul><li>免费且开源，正是因为开源，所以才值得信任；</li><li>没有广告，不像 Disqus 这种带广告的，恶心至极；</li><li>匿名性好，不强制要求评论者登录社交账号；</li><li>有新的评论时，站长可以收到即时通知，比如邮箱和微信；</li><li>游客的评论被回复时，游客也可以收到邮件提醒；</li><li>支持评论数据的导入和导出；</li></ul><p><a href="https://twikoo.js.org/">Twikoo的官方文档</a>是中文的，非常友好！此外，使用 Twikoo 的人非常多，假如遇到了问题去网上找解决方案也是比较方便的，所以我才选择了它！</p><h2 id="3-1：整体流程"><a href="#3-1：整体流程" class="headerlink" title="3.1：整体流程"></a>3.1：整体流程</h2><p>Hexo 博客配置 Twikoo 评论系统，总体而言分为两个部分：</p><ul><li>云函数部署</li><li>前端部署</li></ul><p>像 Twikoo 这类 web app 的配置思路大致是：数据库负责储存数据，deploy 平台通过执行代码来将其变为 app，最后连接到博客从而在网页显示出来。所以必须按顺序操作，每一步都需要前一步得到的信息从而连接到一起！</p><h2 id="3-3：云函数部署"><a href="#3-3：云函数部署" class="headerlink" title="3.3：云函数部署"></a>3.3：云函数部署</h2><p>Twikoo 的云函数支持多种部署平台，官网上有说明，我们来分析一下各种部署平台的优劣：</p><ul><li>腾讯云一键部署：部署简单，但是仅支持按量计费环境，也就是说，当免费资源用尽后将会产生费用；</li><li>腾讯云手动部署：需付费购买开发环境才能部署，但现在计费方式进行了修改，免费资源用尽以后采取按量计费；</li><li>腾讯云命令行部署：仅针对具有 Nodejs 开发经验的开发者；</li><li>Vercel 部署：免费，在中国大陆访问速度较慢甚至无法访问，但是可以通过绑定自己的域名来提高访问速度；</li><li>Railway 部署：部署简单，有免费额度，但不足以支持一个月的运行，适合全球访问；</li><li>Zeabur 部署：部署简单，有充足的免费额度，但需要绑定支付宝或信用卡，适合中国大陆访问；</li><li>私有部署：适合有服务器的用户，需要自行申请 HTTPS 证书；</li></ul><p>首先，从访问速度来看，首选腾讯云的平台，但是这些平台都是需要收费的，并且都是按量计费，但是一旦网站被恶意攻击刷流量的话，可能一觉醒来就欠了平台好多钱，所以我放弃了腾讯云平台，虽然它优秀的访问速度是很大的吸引力！</p><p>其次，私有部署也不是很好的选择，首先你需要购买一个服务器，先不说云服务器昂贵的价格让我望而却步，而且还需要自己申请 SSL 证书，还要实名认证，整体上部署起来很复杂，所以基本上可以放弃了！</p><p>最后就是三个优秀的服务部署平台，其中 Railway 就直接毙了，因为 Railway 的免费资源实在是少的可怜！Zeabur 需要绑定信用卡或者支付宝，所以我也放弃了，最后就剩 Vercel 这一个了，并且因为我的博客网站本身就是使用 Github + Vercel 的方式部署的，所以就干脆选择使用 Vercel 了！</p><h3 id="3-3-1：注册账号"><a href="#3-3-1：注册账号" class="headerlink" title="3.3.1：注册账号"></a>3.3.1：注册账号</h3><p>MongoDB 数据库是用来存储评论数据的，MongoDB Atlas 是一个云数据库平台，云 MongoDB 的本质是把数据库安装在远程服务器上，并对外暴露一个服务地址，我们用这个服务地址来连接数据库进行操作！并且 MongoDB Atlas 提供有免费版本。访问 <a href="https://www.mongodb.com/cloud/atlas/register">MongoDB Atlas 官网注册页</a>，使用邮箱注册，填写账号信息后点击 Create yuor Altas account 创建一个账号，这个过程就不废话了！</p><h3 id="3-3-2：创建MongoDB项目"><a href="#3-3-2：创建MongoDB项目" class="headerlink" title="3.3.2：创建MongoDB项目"></a>3.3.2：创建MongoDB项目</h3><p>默认情况下，刚创建的时候就会存在一个名为<code>Project 0</code>的默认项目，所以我们也可以不创建而使用这个：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022144038556.png"></p><h3 id="3-3-3：部署数据库"><a href="#3-3-3：部署数据库" class="headerlink" title="3.3.3：部署数据库"></a>3.3.3：部署数据库</h3><p>点击上图中的<code>+ Create</code>按钮后，进入创建云数据库的页面，按照如下的信息来选择：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022144823482.png"></p><p>然后进入创建数据库的页面，首先创建一个用户，输入用户名和密码后（可自己修改），点击 Create User：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022145051646.png"></p><p>然后，第二步设置允许所有 IP 地址访问：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022145535496.png"></p><p>这样就添加了一个<code>0.0.0.0</code>的 IP 地址，原本存在的本机 IP 地址可以删掉，最后点击 Finish and Close 按钮，接着点击 Go to Overview，这样就进入了数据库控制台：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022145914098.png"></p><p>注意：此时我们需要记录上面创建的数据库的链接字符串！点击上图中 Cluster0 下面的 CONNECT 按钮，再点击 Connect to you application，然后就能看到连接字符串了：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022150110303.png"></p><p>需要注意的是：这个连接字符串需要使用前面创建的用户密码来替换其中的<code>&lt;password&gt;</code>！</p><h3 id="3-3-4：注册-Vercel-账号"><a href="#3-3-4：注册-Vercel-账号" class="headerlink" title="3.3.4：注册 Vercel 账号"></a>3.3.4：注册 Vercel 账号</h3><p>这部分就不废话了，详情可以参考我的<a href="https://www.fattymonkey.com/post/10023.html">《Github + Vercel 搭建免费的个人图床》</a>中的 3.2.1 节！</p><h3 id="3-3-5：部署-Twikoo-到-Vercel"><a href="#3-3-5：部署-Twikoo-到-Vercel" class="headerlink" title="3.3.5：部署 Twikoo 到 Vercel"></a>3.3.5：部署 Twikoo 到 Vercel</h3><p>浏览器登录 Vercel 官网后，点击 Twikoo 官网上的部署教程的 Deploy 按钮：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022153345105.png"></p><p>然后就自动跳转到 Vercel 页面，并自动将 Twikoo 部署到 Vercel（注意你的 Vercel 账号和仓库名称）：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022153637959.png"></p><p>然后点击上图红框下面的 Create 按钮，然后稍等一会儿，等待 Vercel 部署，等屏幕撒花了，就是部署完成了：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022154028261.png"></p><h3 id="3-3-6：配置-Vercel-环境变量"><a href="#3-3-6：配置-Vercel-环境变量" class="headerlink" title="3.3.6：配置 Vercel 环境变量"></a>3.3.6：配置 Vercel 环境变量</h3><p>点击上图中右上角的 Continue to Dashboard 进入控制台，接着点击 Settings &gt; Environment Variables，添加一个变量：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022154944980.png"></p><p>这里添加的环境变量，key 是固定的，value 就是前面 3.3.2 中部署数据库时生成的连接字符串（注意替换password）！</p><h3 id="3-3-7：重新部署-Vercel-项目"><a href="#3-3-7：重新部署-Vercel-项目" class="headerlink" title="3.3.7：重新部署 Vercel 项目"></a>3.3.7：重新部署 Vercel 项目</h3><p>切换到 Deployments 页签下，点击<code>Redeploy</code>按钮：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022155648635.png"></p><p>此时会有弹窗“Use existing Build Cache”，勾选它，继续点击<code>Redeploy</code>，稍等一会儿，重新部署完成：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022160049959.png"></p><h3 id="3-3-8：Vercel-绑定域名"><a href="#3-3-8：Vercel-绑定域名" class="headerlink" title="3.3.8：Vercel 绑定域名"></a>3.3.8：Vercel 绑定域名</h3><p>上图中<code>Domains</code>下面有三个地址，这是 Vercel 分给我们的地址，实际上现在就可以通过这三个地址来访问评论系统，但由于<code>vercel.app</code>这个后缀的域名已经被墙了，在国内大陆不能访问，所以需要我们绑定一个自定义域名。关于这部分的操作，可以参考我的<a href="https://www.fattymonkey.com/post/10023.html">《Github + Vercel 搭建免费的个人图床》</a>中的 3.2.3 和 3.2.4 这两节，我这里就不赘述了！</p><h2 id="3-4：前端部署"><a href="#3-4：前端部署" class="headerlink" title="3.4：前端部署"></a>3.4：前端部署</h2><p>因为 Butterfly 主题本身提供了对 Twikoo 的支持，所以前端配置就简单很多了！</p><p>第一步：打开主题配置文件，配置 Twikoo 为我们博客的评论系统</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Twikoo</span> <span class="comment"># 选择使用Twikoo评论系统</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span> <span class="comment"># 打开懒加载，能稍微提高博客性能，这里我暂时先不开启</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p>第二步：配置 Twikoo 的环境 Id</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Twikoo</span></span><br><span class="line"><span class="comment"># https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://www.fattymonkey.cn</span> <span class="comment"># 这里配置我们前面给Vercel项目配置的域名</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><h2 id="3-5：重新部署"><a href="#3-5：重新部署" class="headerlink" title="3.5：重新部署"></a>3.5：重新部署</h2><p>此时打开终端，切换到本地博客根目录下，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>然后找到某篇文章，重新加载即可看到评论区：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022161750227.png"></p><h2 id="3-6：配置密码"><a href="#3-6：配置密码" class="headerlink" title="3.6：配置密码"></a>3.6：配置密码</h2><p>第一次使用的时候，点击上图中的设置按钮（齿轮按钮）：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20230808005548582.png"></p><p>自己设置一个密码，然后点击注册，然后就可以进入 Twikoo 的后台管理了：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20230808005958805.png"></p><p>在后台管理这里，我们可以配置 Twikoo 的很多行为，比如插件、通知、隐私等等，下一节详述！</p><h1 id="第四节：对Twikoo进行配置"><a href="#第四节：对Twikoo进行配置" class="headerlink" title="第四节：对Twikoo进行配置"></a>第四节：对Twikoo进行配置</h1><h2 id="4-1：通用配置"><a href="#4-1：通用配置" class="headerlink" title="4.1：通用配置"></a>4.1：通用配置</h2><p>通用配置的部分很简单，基本没什么坑点，我这里就简单记录说明一下吧：</p><ul><li><p><code>SITE_NAME</code>：网站名称，设置为自己的网站名称即可</p></li><li><p><code>SITE_URL</code>：网站地址，设置为自己的博客网址即可</p></li><li><p><code>BLOGGER_NICK</code>：博主的名称，按照自己的需求设置</p></li><li><p><code>BLOGGER_EMAIL</code>：博主的邮箱地址，用于邮件通知、博主标识</p></li><li><p><code>COMMENT_PAGE_SIZE</code>：评论列表分页大小，默认为 8</p></li><li><p><code>MASTER_TAG</code>：博主标识自定义文字，默认为 “博主”</p></li><li><p><code>COMMENT_BG_IMG</code>：评论框自定义背景图片 URL 地址</p></li><li><p><code>GRAVATAR_CDN</code>：自定义头像 CDN 地址，我这里选择使用默认的值。</p><p>可选的值有 cn.gravatar.com、cravatar.cn、sdn.geekzu.org、gravatar.loli.net</p></li><li><p><code>DEFAULT_GRAVATAR</code>：默认的头像显示，我这里选择使用默认的。</p><p>可选的有：”404”、”mp”、”identicon”、”monsterid”、”wavatar”、”retro”、”robohash”、”blank”，默认”identicon”</p></li><li><p><code>COMMENT_PLACEHOLDER</code>：评论框提示信息，可用<code>&lt;br&gt;</code>换行，默认为空。比如我设置的是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">留下正确的邮箱才可以收到回复哦～～&lt;br&gt;（在昵称处输入QQ号可以自动识别头像、昵称和邮箱）</span><br></pre></td></tr></table></figure></li><li><p><code>DISPLAYED_FIELDS</code>：界面上展示的输入框，默认：nick,mail,link</p></li><li><p><code>REQUIRED_FIELDS</code>：评论必填信息。</p><p>假如设为<code>nick,mail,link</code>代表全必填，设为<code>none</code> 代表全选填，默认<code>nick,mail</code></p></li><li><p><code>HIDE_ADMIN_CRYPT</code>：隐藏管理面板入口。</p><p>设置一个“暗号”，只有在“昵称”一栏输入该“暗号”时，管理面板入口才会显示，留空则不隐藏管理面板入口</p></li></ul><h2 id="4-2：图片上传"><a href="#4-2：图片上传" class="headerlink" title="4.2：图片上传"></a>4.2：图片上传</h2><p>Twikoo 评论系统支持图片上传，默认是开启的，假如你是使用腾讯云开发环境部署的 Twikoo，那么就不需配置图床，评论者上传的图片会默认存储在腾讯云存储中！但是假如你不是用腾讯云开发环境部署的，比如我使用 Vercel 部署的，此时上传图片的话就会报错“博主还未进行图床设置”！</p><p>因此，假如你不是使用腾讯云开发环境部署的 Twikoo 又想开启图片上传功能的话，就要自己配置第三方图床！除了腾讯云开发环境自带的 qcloud，Twikoo 还支持另外两种图床：</p><ul><li><code>7bu</code>：这是由<a href="https://dusays.com/241/">杜老师</a>提供的个人公益图床，叫做“去不图床”，它使用的是阿里云和腾讯云的对象存储服务。官方保证 SLA &gt;&#x3D; 99% ，目前来看是不错的选择，但是它没有免费套餐。</li><li><code>smms</code>：由<a href="https://u.sb/sm-ms/">烧饼博客</a>维护的个人图床，有免费和收费两种版本。</li></ul><p>可见，也就 smms 图床的配置比较简单，下面演示如何配置。</p><p><strong>第一步：注册账号并获取 token</strong></p><p>浏览器访问<a href="https://sm.ms/">官网</a>，点击 Sign up：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022163313814.png"></p><p>然后使用邮箱注册：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022163415448.png"></p><p>注册成功后返回官网登录，登录成功后，点击导航栏的 User 下拉框，点击 Dashboard 进入控制面板：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022163603854.png"></p><p>点击侧边栏的 API Token，然后点击 Generate Secret Token 按钮，生成一个 token：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022211039008.png"></p><p><strong>第二步：给 Twikoo 配置 smms</strong></p><p>打开博客任意评论区，点击齿轮按钮，输入 Twikoo 管理员密码进入管理面板，点击<code>配置管理</code>&gt;<code>插件</code>，进行如下配置：</p><p><img src="https://www.czblogs.cn/posts/hexo/03/image-20231022211453740.png"></p><p>填写完这些以后，不要忘记点击最下面的保存按钮，当显示“保存成功”后，表示配置成功，此时图片上传功能配置完成！</p><h2 id="4-3：邮件通知"><a href="#4-3：邮件通知" class="headerlink" title="4.3：邮件通知"></a>4.3：邮件通知</h2><p>邮件通知的配置很简单，这里给出一个我的模板供参考：</p><p>MAIL_TEMPLATE：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">亲爱的$&#123;PARENT_NICK&#125;，您好，您在$&#123;SITE_NAME&#125;($&#123;SITE_URL&#125;)上的评论收到了回复！！！&lt;br&gt;&lt;br&gt;&lt;br&gt;您的评论内容如下：$&#123;PARENT_COMMENT&#125;&lt;br&gt;$&#123;NICK&#125;对您的评论做出了如下回复：$&#123;COMMENT&#125;&lt;br&gt;点击&lt;a href=&#x27;$&#123;POST_URL&#125;&#x27;&gt;这里&lt;/a&gt;可以查看详细内容&lt;br&gt;&lt;br&gt;友情提示：如果您对这里的链接不放心，可直接访问我的博客网站并搜索关键字查找相应的文章，然后在评论区查找相关评论！</span><br></pre></td></tr></table></figure><p>MAIL_TEMPLATE_ADMIN：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">昵称：$&#123;NICK&#125;&lt;br&gt;邮箱：$&#123;MAIL&#125;&lt;br&gt;评论：$&#123;COMMENT&#125;&lt;br&gt;&lt;br&gt;点击&lt;a href=&#x27;$&#123;POST_URL&#125;&#x27;&gt;这里&lt;/a&gt;查看详情&lt;br&gt;</span><br></pre></td></tr></table></figure><h1 id="第五节：Twikoo的个性优化"><a href="#第五节：Twikoo的个性优化" class="headerlink" title="第五节：Twikoo的个性优化"></a>第五节：Twikoo的个性优化</h1><h2 id="5-1：使用懒加载"><a href="#5-1：使用懒加载" class="headerlink" title="5.1：使用懒加载"></a>5.1：使用懒加载</h2><p>评论系统的懒加载很简单，只需要将主题配置文件中的<code>comments.lazyload</code>设置为<code>true</code>！这样一来，只要当鼠标滚轮没有滑动到最下面，就暂时不加载评论系统。</p><p>~~持续更新</p><p>~~持续更新</p><p>~~持续更新</p>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Twikoo </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题配置之基本配置</title>
      <link href="/post/10062.html"/>
      <url>/post/10062.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><h2 id="1-1：主题选择"><a href="#1-1：主题选择" class="headerlink" title="1.1：主题选择"></a>1.1：主题选择</h2><p>在搭建 Hexo 博客的过程中，我尝试过很多主题，每个主题都有自己鲜明的特点。截止到我发布这篇文章，Hexo 已经有 300 多个主题了，但是其中能拿得出手的也就二十多个。如果你是第一玩 Hexo，面对这么多主题肯定得眼花缭乱，尤其像我这种完美主义者，再加上患有很严重的选择困难症，真是不知道该选择哪个好！往往是刚开始选择了一个主题并折腾了一番以后，又发现别的主题有一个很牛逼的功能，就又想换主题了，反反复复，很是折腾！</p><p>再后来慢慢折腾不动了，终于想明白了一个道理，个人博客最重要的是内容，而不是“颜值”，踏踏实实写好博文才是博客真正的魅力！但所谓“颜值即正义”，选择一个好看的主题也是第一步！经过最终的选择比较，我选择了 Butterfly 主题，主要是因为这个主题具备以下几个优势：</p><ol><li>颜值高。Butterfly 的颜值可是数一数二的，这一点只有你用过很多种主题以后才能有所体会；</li><li>可扩展性强。Butterfly 自带的配置文件有一千行，集成了很丰富的外观和功能扩展，通过简单配置就可实现；</li><li>社区良好。Butterfly 一直在不断更新，并且开发者是香港人，中文文档良好，遇到了问题查找解决方案比较简单；</li></ol><p>但除此之外，我认为它还有一个不算缺点的缺点，就是它的灵活度太高了。怎么说呢？刚开始起步的时候，需要配置的东西比较零散，需要耐心！</p><p><font color=red>友情提示</font>，我这篇博文的主要内容包括两个部分：</p><ul><li>更换主题：Hexo 博客更换每个主题的方式都一样，我这篇博文是以 Butterfly 来举例的；</li><li>基本配置：更换主题后，需要生成基本页面、替换博主自己的资料、内置的功能需要手动配置；</li></ul><h2 id="1-2：基本环境"><a href="#1-2：基本环境" class="headerlink" title="1.2：基本环境"></a>1.2：基本环境</h2><p>我本地使用的是 macOS，基本软件环境如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021182042502.png"></p><p>Hexo 自带的 npm 包如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021182204967.png"></p><p>在当前所有的依赖里面，只有<code>hexo-deployer-git</code>是我自己安装的，是为了支持将本地生成的静态博客文件上传到 Github，其他的都是 Hexo 程序自带的！</p><h1 id="第二节：更换主题"><a href="#第二节：更换主题" class="headerlink" title="第二节：更换主题"></a>第二节：更换主题</h1><h2 id="2-1：下载主题"><a href="#2-1：下载主题" class="headerlink" title="2.1：下载主题"></a>2.1：下载主题</h2><p>Butterfly 主题是托管在 Github 上的：<a href="https://github.com/jerryc127/hexo-theme-butterfly">传送门</a>。默认分支是开发分支 dev，我选择下载稳定版本，截止到我当前更新这篇博文的时间，最新的稳定版本是 4.10.0 ！你可以在本地博客工程的<code>/themes</code>文件夹下使用 Git 来 clone 主题文件夹，也可以从 Github 网页上直接下载，我是直接从网页上下载的，下载下来的是一个文件夹：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021182545503.png"></p><h2 id="2-2：更换主题"><a href="#2-2：更换主题" class="headerlink" title="2.2：更换主题"></a>2.2：更换主题</h2><p><strong>第一步：重命名并移动</strong></p><p>将下载下来的主题文件夹重命名为<code>butterfly</code>，并放到本地博客工程目录下的<code>/themes</code>文件夹中：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021182726075.png"></p><p><font color=red><strong>注意</strong></font>：放到本地博客工程<code>/themes</code>文件夹中的主题文件夹必须重命名为<code>butteryfly</code>，后面我会解释为什么！此外，根目录下的<code>/themes</code>文件夹中原本存在名为<code>.gitkeep</code>的文件，这是为了保证空文件夹<code>/themes</code>能被 Git 管理，因为此时这个文件夹已经不是空的呢，所以<code>.gitkeep</code>文件也可以删除了！</p><p><strong>第二步：修改站点配置文件</strong></p><p>打开本地博客工程根目录，找到其中的<code>_config.yml</code>文件，在其中找到<code>theme</code>：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021182939112.png"></p><p><strong>第三步：安装插件</strong></p><p>Butterfly 依赖模板引擎 pug 和 CSS 预处理语言 stylus，而 Hexo 程序本身自带 stylus，所以我们必须先安装 pug！</p><p>打开终端，切换到本地博客工程目录下，执行如下安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug</span><br></pre></td></tr></table></figure><p>安装完以后查看一下是否安装成功：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021183117999.png"></p><p><strong>第四步：清理缓存</strong></p><p>修改了博客根目录下的<code>_config.yml</code>文件，要想修改生效，就必须先清理缓存！</p><p>打开终端切换到本地博客工程目录下先后执行如下两条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>执行完以后，打开浏览器访问<code>http://localhost:4000/</code>，可见效果：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021183343092.png"></p><h2 id="2-3：配置文件"><a href="#2-3：配置文件" class="headerlink" title="2.3：配置文件"></a>2.3：配置文件</h2><p>更换主题后，整个博客工程中就存在了两个名为<code>_config.yml</code>的配置文件，第一个是在本地博客工程根目录下的，另一个是在于主题根目录下的。在本地使用<code>hexo generate</code>生成静态博客文件时，会获取这两个配置文件中的内容作为关键信息，在对博客主题进行修改优化的时候，会频繁地用到这两个文件，所以一定要区分清楚。习惯上，我们会将前者称为<font color=red>站点配置文件</font>，将后者称为<font color=red>主题配置文件</font>！</p><p>然而 Butterfly 主题有一个更好的处理，Butterfly 的官方文档上写的很清楚：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021183422366.png"></p><p>按照官网指示来操作，从此博客根目录下就有了两个配置文件：<code>_config.yml</code>和<code>_config.butterfly.yml</code>！</p><p><font color=red><strong>但是一定要注意</strong></font>：在本文的 2.2 中，假如你放到博客工程<code>/themes</code>中的主题文件夹没有重命名为<code>butterfly</code>的话，那么此时在这里创建的名为<code>_config.butterfly.yml</code>的配置文件就不会生效！此外，假如你按照官网的指示来管理配置文件的话，此时博客工程根目录下自带的<code>_config.landscape.yml</code>文件就可以删除了，这个文件是用来支持默认主题的！</p><p><font color=red><strong>从现在开始</strong></font>：</p><ul><li>博客工程根目录下的<code>_config.yml</code>文件是用来修改整个网站的样式行为的，我称之为站点配置文件；</li><li>博客工程根目录下的<code>_config.butterfly.yml</code>文件是用来修改主题的样式和行为的，我称之为主题配置文件；</li><li>通常，修改了站点配置文件后，要清理缓存后重新生成静态资源（或预览），修改的内容才会生效！！！</li></ul><h1 id="第三节：基本配置"><a href="#第三节：基本配置" class="headerlink" title="第三节：基本配置"></a>第三节：基本配置</h1><p>Butterfly 主题的配置文件很长，大概有一千行，基本上所有的配置都可以在主题配置文件中找到。</p><h2 id="3-01：Front-matter"><a href="#3-01：Front-matter" class="headerlink" title="3.01：Front-matter"></a>3.01：Front-matter</h2><p>Front-matter 是 Hexo 中的概念，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量！在你写博客和主题基本设置之前，一定要先学习这部分内容！</p><ul><li>首先，Hexo 中预置的 Front-matter，参看官网的<a href="https://hexo.io/zh-cn/docs/front-matter">这篇博文</a>；</li><li>其次，Butterfly 在 Hexo 的基础上还定义了一些 Front-matter，参看 Butterfly 官方的<a href="https://butterfly.js.org/posts/dc584b87/#Page-Front-matter">这篇博文</a>；</li></ul><h2 id="3-02：网站语言设置"><a href="#3-02：网站语言设置" class="headerlink" title="3.02：网站语言设置"></a>3.02：网站语言设置</h2><p>Butterfly 默认语言是 en，同时支持三种语言：</p><ul><li>default（en）；</li><li>zh-CN（简体中文）；</li><li>zh-TW（繁体中文）；</li></ul><p>可以在站点配置文件<code>_config.yml</code>中进行设置，比如修改<code>language</code>的值为<code>zh-CN</code>则表示设置为简体中文！</p><h2 id="3-03：网站基本资料"><a href="#3-03：网站基本资料" class="headerlink" title="3.03：网站基本资料"></a>3.03：网站基本资料</h2><p>在站点配置文件<code>_config.yml</code>的<code>Site</code>处可以配置网站的基本资料，包括如下内容：</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">网站标题</td></tr><tr><td align="center">subtitle</td><td align="center">副标题，在 Butterfly 主题中展示为描述</td></tr><tr><td align="center">description</td><td align="center">网站描述</td></tr><tr><td align="center">keywords</td><td align="center">网站的关键词，支持多个关键词</td></tr><tr><td align="center">author</td><td align="center">网站作者，修改为自己的名字</td></tr><tr><td align="center">language</td><td align="center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td align="center">timezone</td><td align="center">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai</td></tr></tbody></table><p>比如我的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">繁体猴の客栈</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;记录学习过程，分享学习成果和心得，内容以编程技术为主&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> [<span class="string">HTML</span>, <span class="string">CSS</span>, <span class="string">JavaScript</span>, <span class="string">Java</span>, <span class="string">Linux</span>, <span class="string">Python</span>, <span class="string">Mac</span>, <span class="string">macOS</span>, <span class="string">shell</span>]</span><br><span class="line"><span class="attr">author:</span> <span class="string">Chen</span> <span class="string">Zheng</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-04：导航栏的设置"><a href="#3-04：导航栏的设置" class="headerlink" title="3.04：导航栏的设置"></a>3.04：导航栏的设置</h2><p>导航栏可以设置三个参数，分别是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="comment">#image</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># fixed navigation bar</span></span><br></pre></td></tr></table></figure><ul><li>logo：网站的 logo，支持图片，直接填入图片链接即可，相对路径或图片的网络URL都可以；</li><li>display_title：是否展示网站的标题，默认是展示的；</li><li>fixed：是否固定在页面，建议不固定，因为只要鼠标滚轮向上翻动页面就会自动展示；</li></ul><p>这部分内容可以根据自己的需要和习惯来自行修改，比如我这里就没有进行任何设置！</p><h2 id="3-05：导航栏的菜单"><a href="#3-05：导航栏的菜单" class="headerlink" title="3.05：导航栏的菜单"></a>3.05：导航栏的菜单</h2><p>导航栏还可以展示菜单栏，需要在主题配置文件中打开设置，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>这里需要注意两点：</p><ul><li>菜单的每个页面路径必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名，如果不想显示图标，图标名可不写；</li><li>若主题版本大于 4.0.0，可以直接在子目录里添加<code>hide</code>来隐藏子目录，比如：<code>List||fas fa-list||hide:</code>；</li></ul><p>这里展示的文字可以自行更改，比如我创建的菜单如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Menu 目錄</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">    <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">休闲||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">图片展:</span> <span class="string">/images/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">音乐汇:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">电影院:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/comment/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment-dots</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>这只是展示在导航栏的菜单，对应的页面还没有（只有 Home 和 Archives 这两个是预置的），在满足主题菜单的配置规则下，我们可以任意组织自己的个性化菜单，最后还要创建对应的页面，如何创建可以查看本文 3.06！</p><h2 id="3-06：创建页面"><a href="#3-06：创建页面" class="headerlink" title="3.06：创建页面"></a>3.06：创建页面</h2><p>主题中给定的菜单目录是可以自己定义的，根据自己的需要设置一级目录和二级目录，这里只是配置了菜单，菜单对应的这些页面还不存在（除首页和归档页是 Hexo 自带的），需要我们自己创建！</p><p><font color=red><strong>第一类：创建菜单中的页面</strong></font></p><p>比如下面创建一个分类页：</p><ol><li><p>打开终端，切换到博客工程根目录下，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>执行成功以后，就会在博客根目录下的<code>/source</code>目录下生成一个名为<code>categories</code>的子文件夹，文件夹中生成了一个名为<code>index.md</code>的文件，这个文件就是最终的分类页！</p></li><li><p>然后在生成的<code>/source/categories/index.md</code>中的 Front-matter 中添加<code>type: &quot;categories&quot;</code>：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2023-09-01 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p><font color=red>注意</font>：<code>title</code>和<code>date</code>是自动生成的，我们可以任意修改这两项的值，但是必须添加<code>type: &quot;categories&quot;</code>，这样主题才能按照设定的 categories 布局来渲染这个页面！同理，对于其他的页面也要按照这种方式来生成，只是 Front-matter 中的<code>type</code>配置项要设置为相应的值（分类、标签、友情链接和 404 页这四个页面必须设置，其他页面不设置，因为主题没有为其他页面设置相应的布局）！</p><p>友情提示：实际上，使用<code>hexo new page</code>命令来生成目录和页面不是必须的，也可以直接在资源管理器或访达中手动创建这些文件夹和文件并手动编辑！如果想要查看详细信息，可参考 Butterfly 的官方文档：<a href="https://butterfly.js.org/posts/dc584b87/#%E6%A8%99%E7%B1%A4%E9%A0%81">传送门</a>！</p><p><font color=red><strong>第二类：创建404页面</strong></font></p><p>对于<code>404.md</code>页面，不用在<code>/source</code>目录下创建名为<code>404</code>的文件夹，而是直接放在<code>/source</code>目录下的，编辑内容为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2023-09-01 00:00:00</span><br><span class="line">type: &quot;404&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>此外，还要在主题配置文件中，打开 404 的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;您访问的页面找不到了~&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure><p><font color=red><strong>第三类：友链页的信息</strong></font></p><p>友链页展示的信息，要在博客根目录下的<code>/source/_data/</code>下创建名为<code>link.yml</code>的文件，并在其中按如下格式添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">一些优秀的博客网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">张洪Heo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://blog.zhheo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://img02.anheyu.com/adminuploads/1/2022/09/02/6311fc38f1465.webp</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">一个真正的大佬</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安知鱼</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://blog.anheyu.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">极致的Butterfly</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Leonus</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://blog.leonus.cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://q1.qlogo.cn/g?b=qq&amp;nk=990320751&amp;s=5</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">优秀的Butterfly</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">技术站点</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">一些优秀的技术站点</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Hexo官方网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Butterfly</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://butterfly.js.org</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://butterfly.js.org/img/avatar.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">美观且强大的Hexo主题</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pug</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.pugjs.cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://www.pugjs.cn/img/logo.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Pug模板引擎中文文档</span></span><br></pre></td></tr></table></figure><h2 id="3-07：网站域名"><a href="#3-07：网站域名" class="headerlink" title="3.07：网站域名"></a>3.07：网站域名</h2><p>在设置之前，网站中的文章链接或者其他部分展示网站域名的地方都是默认的<code>http://example.com</code>，比如：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021194511662.png"></p><p>网站的域名是在站点配置文件<code>_config.yml</code>中配置的，只需要将<code>url</code>的值改为自己的域名即可：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021194806085.png"></p><p>修改之后：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021194931999.png"></p><h2 id="3-08：永久链接"><a href="#3-08：永久链接" class="headerlink" title="3.08：永久链接"></a>3.08：永久链接</h2><p>Hexo 会给每一篇博文生成一个永久性链接，默认情况下，链接的内容由博文发布时间和博文文件名称组成的。</p><p><font color='red'>常规优化</font>：常规做法是安装 <a href="https://links.jianshu.com/go?to=https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> 插件，它可以将博客文件名称中的中文转为拼音，各个汉子之间用符号<code>-</code>来连接，但是如果我们在日常发布中，修改了某篇博客文件中 Front-matter 的时间或者文件名后重新发布，那么原本生成的永久链接就会失效！而且假如博客文件的中文名称很长，那么永久链接就会更长！出于这两点考虑，我选择放弃这种优化方式！</p><p><font color='red'>我的做法</font>：我选择使用 <a href="https://links.jianshu.com/go?to=https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件来为博文生成永久静态短链接！</p><p>第一步：打开终端，切换到本地博客工程根目录下，执行安装插件的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>第二步：打开站点配置文件，先找到并修改<code>permalink</code>，再在最后增加<code>abbrlink</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改permalink</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增abbrlink配置,支持博文永久链接</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span> <span class="comment"># 算法选项，可选值为crc16和crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>   <span class="comment"># 输出进制，dec为十进制，hex为十六进制</span></span><br></pre></td></tr></table></figure><p>第三步：清理缓存后再执行<code>hexo generate</code>，可见此时生成的博文永久链接为数字类型</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021195619687.png"></p><p>此时打开博文的MD文件，可见在 Front-metter 部分自动新增了<code>abbrlink</code>项目！</p><p><font color='red'><strong>最后效果</strong></font>：</p><ul><li>以后，当在<code>_post</code>文件夹中创建一个新的 Markdown 文件或者复制一个 Markdown 文件过来以后，只要实行预览或者生成静态博客文件的命令，就会在 Front-matter 中自动生成<code>abbrlink</code>的配置项；</li><li>以后无论是修改博文的文件名还是修改博文的 Front-matter 中的<code>date</code>，只要不改变<code>abbrlink</code>的值，这篇博文的链接就永远不会改变，而且链接的长度不会很长（当然网站的 URL 也不能变）；</li><li>而且我们可以在新建文章的时候，直接在 Front-matter 中指定<code>abbrlink</code>的值，只要跟其他文章的<code>abbrlink</code>的值不重复，就不会存在问题（后续即使自动生成的<code>abbrlink</code>也不会跟我们的自己指定的值重复）；</li></ul><h2 id="3-09：高亮配置"><a href="#3-09：高亮配置" class="headerlink" title="3.09：高亮配置"></a>3.09：高亮配置</h2><p>代码相关的设置，参考<a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E4%BA%AE%E4%B8%BB%E9%A1%8C">Butterfly官方文档</a>，官网上写的太清楚了，没有什么坑点，我就不废话了！我这里设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------- Code Blocks (代码相关) -----------------------------------------------------------------</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span> <span class="comment"># copy button</span></span><br><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">true</span> <span class="comment"># show the code language</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span> <span class="comment"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="number">140</span> <span class="comment"># unit: px</span></span><br><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>需要注意的是：Butterfly 主题还支持自定义代码块主题，详细教程在官网上也有，<a href="https://butterfly.js.org/posts/b37b5fe3/">参考这里</a>！</p><h2 id="3-10：本地搜索"><a href="#3-10：本地搜索" class="headerlink" title="3.10：本地搜索"></a>3.10：本地搜索</h2><p>Butterfly 主题提供了两种本地搜索的选项，我选择使用的是插件 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a>。</p><p>第一步：打开终端切换到本地博客工程根目录下，执行如下命令来安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>安装以后，使用<code>npm list</code>来确保一下依赖是否安装成功：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021201918983.png"></p><p>第二步：打开站点配置文件，添加如下的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>第三步：打开主题配置文件，将<code>local_search.enable</code>设置为<code>true</code>，并进行自己的一些修改，比如我的配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><p>这么设置以后，就会在导航栏展示搜索按钮，输入文本就可以搜索相应的文章内容了！</p><h2 id="3-11：字数统计"><a href="#3-11：字数统计" class="headerlink" title="3.11：字数统计"></a>3.11：字数统计</h2><p>Butterfly 主题可以展示字数统计，但是该功能需要安装插件 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>，所以需要先安装该插件！</p><p>第一步：打开终端切换到本地博客工程根目录下，执行如下命令来安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>安装以后，使用<code>npm list</code>来确保一下依赖是否安装成功：</p><p><img src="https://www.czblogs.cn/posts/hexo/02/image-20231021203201106.png"></p><p>第二步：打开主题配置文件，进行字数统计的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 字数统计开关</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span> <span class="comment"># 文章页的字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">false</span> <span class="comment"># 显示文章阅读时长(不喜欢这个就关闭了)</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span> <span class="comment"># 打开后侧边栏展示站点总字数</span></span><br></pre></td></tr></table></figure><h2 id="3-12：网站图标"><a href="#3-12：网站图标" class="headerlink" title="3.12：网站图标"></a>3.12：网站图标</h2><p>网站的图标<code>favicon</code>是可以通过配置来修改的，在主题配置文件中配置图片的路径，可以使用相对路径也可以使用绝对路径 URL，我这里选择使用的是绝对路径 URL（避免升级带来的麻烦）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">https://www.czblogs.cn/favicons/favicon.png</span></span><br></pre></td></tr></table></figure><h2 id="3-13：个人头像"><a href="#3-13：个人头像" class="headerlink" title="3.13：个人头像"></a>3.13：个人头像</h2><p>头像展示在侧边栏，打开主题配置文件，搜索<code>avatar</code>，可以配置头像的路径，默认的头像是用的URL，我也使用URL！</p><p>在主题配置文件中进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">https://www.czblogs.cn/avatars/boy.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>友情提示：配置项<code>effect</code>是一个特效，如果设置了<code>true</code>，那么头像就会一直转圈！</p><h2 id="3-14：头图相关"><a href="#3-14：头图相关" class="headerlink" title="3.14：头图相关"></a>3.14：头图相关</h2><p>Butterfly 主题提供了很多的背景图设置！</p><p><font color=red><strong>第一类：头图——top_img</strong></font></p><p>先来解释一下什么叫 Banner 图，因为我刚开始设置这一块的时候就很迷茫，不知道什么是 Banner 图，导致在设置的时候犯了很多低级错误！所谓 Banner 图就是指首页的图片以及每个页面（标签页和归档页等菜单页）顶部的图片，所以在 Butterfly 主题中，Banner 图又叫头图（top_img）！</p><p>在主题配置文件中有很多关于背景图片的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable all banner image</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">https://www.czblogs.cn/top_imgs/whale.webp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br></pre></td></tr></table></figure><p>我这里暂时只是设置了默认的头图<code>default_top_img</code>，其他的图片没有进行设置！</p><p><font color=red><strong>第二类：封面图——cover</strong></font></p><p>在 Butterfly 主题的配置文件中，有很多关于封面图的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否在首页的文章列表中显示封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否在侧边栏的最新文章列表中展示封面</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否在归档页的文章列表中展示封面</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 首页的文章封面图显示的位置，可选的参数为left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 设置默认的cover，假如文章的cover没设置的话，默认展示这里的cover，可以设置多个，随机选择展示</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/00.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/01.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/02.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/03.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/04.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/05.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/06.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/07.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/08.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://www.czblogs.cn/default_covers/09.webp</span></span><br></pre></td></tr></table></figure><p>我这里设置了多个默认的封面，这样以来文章的封面图会随机选用我这里设置的其中一张！</p><p>注意：</p><ul><li>设置的默认封面图是站点级别的，不管什么文章，只要没有在 Front-matter 中指定<code>cover</code>，就随机选用其中一张；</li><li>假如不想使用默认的文章封面图，还可以在文章的 Front-matter 中指定<code>cover</code>，即给文章设定特定的封面图；</li></ul><h1 id="第四节：文章相关"><a href="#第四节：文章相关" class="headerlink" title="第四节：文章相关"></a>第四节：文章相关</h1><h2 id="4-01：文章描述"><a href="#4-01：文章描述" class="headerlink" title="4.01：文章描述"></a>4.01：文章描述</h2><p>Butterfly 主题首页展示的文章卡片上默认会展示文章发布日期和文章的描述，在主题配置文件中，有这部分的详细配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># 首页</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日期或更新日期或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 显示绝对日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">false</span> <span class="comment"># true or false 是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 是否显示描述文字</span></span><br><span class="line">  <span class="attr">post:</span> <span class="comment"># 文章页</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章頁日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 显示绝对日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 是否显示描述文字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display the article introduction on homepage</span></span><br><span class="line"><span class="comment"># 1: description</span></span><br><span class="line"><span class="comment"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span></span><br><span class="line"><span class="comment"># 3: auto_excerpt (default)</span></span><br><span class="line"><span class="comment"># false: do not show the article introduction</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p>我对这里没做大修改，只把<code>index_post_content.method</code>设置为 2，因为这样一来，只要我在文章的 Front-matter 中设置了<code>description</code>，那么就展示<code>description</code>的内容，否则就展示文章的前 500 个字！这样比较灵活！</p><p>提示：<code>description</code>不是 Hexo 内置的 Front-matter 参数，是主题 Butterfly 自建的参数！</p><h2 id="4-02：文章锚点"><a href="#4-02：文章锚点" class="headerlink" title="4.02：文章锚点"></a>4.02：文章锚点</h2><p>我现在还没搞懂文章锚点是什么东西，但是官网上说这个功能会增加浏览器的历史记录，默认是关闭的，所以我也就没做修改配置，保持默认的配置！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="attr">button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">always_show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span> <span class="comment"># when you scroll in post, the URL will update according to header id.</span></span><br></pre></td></tr></table></figure><h2 id="4-03：图片描述"><a href="#4-03：图片描述" class="headerlink" title="4.03：图片描述"></a>4.03：图片描述</h2><p>在 Butteryfly 中，关于图片描述有如下的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># figcaption (图片描述)</span></span><br><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 Markdown 中，插入图片的语法是<code>![alt text](image.jpg)</code>，开启了<code>photofigcaption</code>功能后，会将 Markdown 插图中的 alt 文本作为图片的标题描述，放到图片的正下方！假如没有 alt 文本的话，就不会展示了，并且也不会留出来多余的空间！</p><h2 id="4-04：复制设置"><a href="#4-04：复制设置" class="headerlink" title="4.04：复制设置"></a>4.04：复制设置</h2><p>Butteryfly 提供了别人复制你的文章时追加版权信息的设置！默认的设置为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p>我设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制设置</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否允许复制</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否在复制的内容后面加上版权信息</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span> <span class="comment"># 字数限制，当复制的文字大于这个数字的时候，才增加版权信息</span></span><br></pre></td></tr></table></figure><p>友情提示：</p><ul><li><p><code>enable</code>设置为<code>false</code>后，代码块只能点击代码块右上角的复制按钮来全部复制，不能复制部分代码；</p></li><li><p>若想修改版权信息文本，就修改主题根目录下的<code>/languages</code>里面的<code>_zh-CN.yml</code>文件，其中的<code>copyright</code>就是用来配置版权信息的；</p></li></ul><h2 id="4-05：TOC目录"><a href="#4-05：TOC目录" class="headerlink" title="4.05：TOC目录"></a>4.05：TOC目录</h2><p>在每一篇文章的侧边栏会有 TOC 目录，主题配置文件中可以配置它，我的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>           <span class="comment"># 是否在文章页展示TOC目录</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span>          <span class="comment"># 是否在普通页展示TOC目录</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>        <span class="comment"># 是否自动给TOC添加章节数(因为我编辑文章时会自己添加数字，所以设置为false)</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">true</span>         <span class="comment"># 是否默认展开TOC(我不喜欢目录收起的功能)</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span>  <span class="comment"># 简洁模式，设置为true的话，侧边栏就只展示TOC，只对文章页有效</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span> <span class="comment"># 是否展示滚动百分比</span></span><br></pre></td></tr></table></figure><p>PS：我后期会将其进行优化，优化后的效果为——默认展开两级，当浏览到某个三级标题时，再展开对应的三级标题！</p><h2 id="4-06：文章打赏"><a href="#4-06：文章打赏" class="headerlink" title="4.06：文章打赏"></a>4.06：文章打赏</h2><p>在文章的结尾有赞赏码功能，默认关闭的，我们可以在主题配置文件中开启并设置自己的二维码图片：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sponsor/reward</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">支持一下</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://www.czblogs.cn/rewards/wechat.jpeg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://www.czblogs.cn/rewards/alipay.jpeg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><p>PS：对于没有二维码的，可配置一张软件的icon图片，然后在link上添加相应的打赏链接，用户点击图片就会跳转到链接去（<code>link</code>可以不写，会默认为图片的链接）</p><h2 id="4-07：相关推荐"><a href="#4-07：相关推荐" class="headerlink" title="4.07：相关推荐"></a>4.07：相关推荐</h2><p>在某篇文章的最后，上一篇下一篇的后面，会给出本站的推荐文章，相关文章的推荐原理是根据当前文章的标签的比重来推荐的！默认的配置如下，我觉得没必要修改，保持默认配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章页最底部的相关推荐</span></span><br><span class="line"><span class="comment"># Related Articles</span></span><br><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># Number of posts displayed</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日</span></span><br></pre></td></tr></table></figure><h2 id="4-08：上下一篇"><a href="#4-08：上下一篇" class="headerlink" title="4.08：上下一篇"></a>4.08：上下一篇</h2><p>文章的结尾处，会有上一篇下一篇的卡片按钮，默认情况下，下一篇是指你当前阅读的文章的上一篇（创建时间在当前文章的前面），这是很反人类的！可以痛殴修改默认的配置来修正这种逻辑：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上一篇｜下一篇</span></span><br><span class="line"><span class="comment"># post_pagination (分頁)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="4-09：过期提醒"><a href="#4-09：过期提醒" class="headerlink" title="4.09：过期提醒"></a>4.09：过期提醒</h2><p>假如文章过期了，可以在文章的最上面展示提醒！默认设置为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章過期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">500</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章过期提醒</span></span><br><span class="line"><span class="comment"># Displays outdated notice for a post (文章過期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">100</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">这篇文章距离上次更新已经有</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">天了，或许部分内容已经不够准确，请注意甄别，同时欢迎客观留言提醒！</span></span><br></pre></td></tr></table></figure><h2 id="4-10：文章分享"><a href="#4-10：文章分享" class="headerlink" title="4.10：文章分享"></a>4.10：文章分享</h2><p>文章分享有两种，开启一个就可以了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Share System (分享，下面的两个分享功能开启一个就可以了)</span></span><br><span class="line"><span class="comment"># Share.js</span></span><br><span class="line"><span class="comment"># https://github.com/overtrue/share.js</span></span><br><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AddToAny</span></span><br><span class="line"><span class="comment"># https://www.addtoany.com/</span></span><br><span class="line"><span class="attr">addtoany:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item:</span> <span class="string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span></span><br></pre></td></tr></table></figure><h1 id="第五节：页脚相关"><a href="#第五节：页脚相关" class="headerlink" title="第五节：页脚相关"></a>第五节：页脚相关</h1><h2 id="5-1：页脚默认信息"><a href="#5-1：页脚默认信息" class="headerlink" title="5.1：页脚默认信息"></a>5.1：页脚默认信息</h2><p>Butterfly 主题的每个页面都有页脚，页脚可以用来展示信息，默认的信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2020</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p>我暂时只是修改了站点开始时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2023</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p>PS：后面我会继续进行优化，在页脚添加一些有趣的组件和信息！</p><h1 id="第六节：侧边栏设置"><a href="#第六节：侧边栏设置" class="headerlink" title="第六节：侧边栏设置"></a>第六节：侧边栏设置</h1><h2 id="6-1：整体配置"><a href="#6-1：整体配置" class="headerlink" title="6.1：整体配置"></a>6.1：整体配置</h2><p>默认的设置就不说了，这里列出我的设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aside (侧边栏)</span></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启侧边栏，设置为false的话可以关闭所有的侧边栏，并且让主体内容变宽，占据侧边栏原本的空间</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span>  <span class="comment"># 隐藏侧边栏，设置为true的话，侧边栏会被隐藏，原本显示侧边栏的地方就成了空白区域</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 是否在手机上展示侧边栏</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># 侧边栏展示的位置(left/right)</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span>  <span class="comment"># 是否在归档页展示侧边栏</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span>      <span class="comment"># 是否在子标签页展示侧边栏</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span> <span class="comment"># 是否在子分类页展示侧边栏</span></span><br><span class="line">  <span class="comment"># 站长信息</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">进一步有近一步的欢喜</span> <span class="comment"># 是否展示作者名称下面的文字描述，假如不设置的话，就展示站点配置文件中的描述</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">我的Github</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/fattymonkey</span></span><br><span class="line">  <span class="comment"># 公告栏</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">建站不久，很多功能尚未完善，正在努力建设中～～</span></span><br><span class="line">  <span class="comment"># 最新文章</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="comment"># 分类</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># 默认是8，设置为0表示所有</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="comment"># 标签</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># 默认是40，设置为0表示所有</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="comment"># 归档</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">YYYY年MM月</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="comment"># 网站资讯</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_post_series:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span> <span class="comment"># Order by title or date</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br></pre></td></tr></table></figure><h2 id="6-2：访问统计"><a href="#6-2：访问统计" class="headerlink" title="6.2：访问统计"></a>6.2：访问统计</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问统计(这部分展示在侧边栏的最后一个卡片上)</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注意：假如想修改这里的文字，就修改主题根目录下的<code>languages</code>中的<code>zh-CN.yml</code>文件！</p><h2 id="6-3：运行时间"><a href="#6-3：运行时间" class="headerlink" title="6.3：运行时间"></a>6.3：运行时间</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="comment"># Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2023-09-01</span></span><br></pre></td></tr></table></figure><h2 id="6-4：最新评论"><a href="#6-4：最新评论" class="headerlink" title="6.4：最新评论"></a>6.4：最新评论</h2><p>不打算展示最新评论，所以没有开启：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="第七节：右下角按钮"><a href="#第七节：右下角按钮" class="headerlink" title="第七节：右下角按钮"></a>第七节：右下角按钮</h1><h2 id="7-1：繁简转换"><a href="#7-1：繁简转换" class="headerlink" title="7.1：繁简转换"></a>7.1：繁简转换</h2><p>默认是不开启的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 繁简转换</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;簡&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-2：阅读模式"><a href="#7-2：阅读模式" class="headerlink" title="7.2：阅读模式"></a>7.2：阅读模式</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阅读模式(Read Mode): </span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="7-3：深色模式"><a href="#7-3：深色模式" class="headerlink" title="7.3：深色模式"></a>7.3：深色模式</h2><p>浅色模式和深色模式的转换按钮是默认开启的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br></pre></td></tr></table></figure><h2 id="7-4：展示百分比"><a href="#7-4：展示百分比" class="headerlink" title="7.4：展示百分比"></a>7.4：展示百分比</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show scroll percent in scroll-to-top button</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客之整体搭建流程</title>
      <link href="/post/10061.html"/>
      <url>/post/10061.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><p>静态博客框架 Hexo 的基本原理：使用特定的主题，将以 Markdown 语法编写的文章转为 HTML 文件，并配合一些 CSS 和 JS 文件，一起部署到服务器上（当然也不一定非是服务器，现在有很多提供静态网站托管的第三方 Pages 服务，比如 Github Pages 和 Gitee Pages），最后用户通过访问这些静态资源来访问博客网站！</p><p>Hexo 博客的整体搭建流程主要分为下面三步：</p><ul><li>第一步：本地安装，在本地安装 Hexo 程序，是用来生成和管理静态资源的；</li><li>第二步：远程部署，将本地静态资源部署到静态资源托管平台或者服务器上；</li><li>第三步：绑定域名（非必要），绑定域名后，可以实现使用域名直接访问博客（逼格拉满）；</li></ul><p>我这篇博文就是详细记录如何从零开始搭建一个基本可以使用的 Hexo 博客网站，网站是部署在 Github 上的，不包括博客网站的基本设置（关于网站的主题替换、外观美化、性能优化等操作，我会在后续的几篇博文中详细记录和说明）。</p><p>友情提示：该系列的 Hexo 博客搭建文章记录的都比较详细，主要是为了照顾一些零基础的小伙伴，此外对一些基本概念性的内容进行了详细解释和我的一些个人理解（包括但不局限于 Github 和 Gitee 的对比、使用 Git 推送的注意项、域名的解析配置等），对于一些有计算机基础的小伙伴可以自行跳跃查看！</p><h1 id="第二节：本地安装"><a href="#第二节：本地安装" class="headerlink" title="第二节：本地安装"></a>第二节：本地安装</h1><h2 id="2-1：前提条件"><a href="#2-1：前提条件" class="headerlink" title="2.1：前提条件"></a>2.1：前提条件</h2><p>在本地安装 Hexo 程序，首先需安装 Git 和 Nodejs，安装 Git 有两个用处：</p><ol><li><p>在使用 hexo-cli 初始化本地 Hexo 程序文件时，会默认使用 Git 从 Github 下载 Hexo 程序源文件；</p></li><li><p>本地安装 Hexo 程序后，还需要使用 Git 将本地 Hexo 生成的静态博客文件上传到服务器或代码托管平台；</p></li></ol><p>安装 Nodejs 也有两个用处：</p><ol><li><p>Hexo 程序是基于 Nodejs 的，Hexo 的运行要依赖 Nodejs 环境；</p></li><li><p>Nodejs 自带的 npm 是安装 hexo-cli 的工具，而且后续 Hexo 程序需要的插件都要依赖 npm 下载；</p></li></ol><p>关于 Git 和 Nodejs 的介绍、安装和使用，不是这篇博文的重点，本身也很简单，我这里就不赘述了~~</p><h2 id="2-2：全局安装-hexo-cli"><a href="#2-2：全局安装-hexo-cli" class="headerlink" title="2.2：全局安装 hexo-cli"></a>2.2：全局安装 hexo-cli</h2><blockquote><p>hexo-cli 是一个 npm 软件包，封装了一些命令，它并不是 Hexo 程序，安装完 hexo-cli 后，再通过它来安装 Hexo！</p></blockquote><p><font color='red'>安装 hexo-cli 一定要使用全局安装</font>！只有这样，我们才可以在本机的任何目录都能使用 hexo-cli，这样我们就可以自由地选择在哪个目录下初始化我们的 Hexo 程序（就可以任意选择将我们的博客工程放在哪个目录下）！</p><p>打开终端，执行如下命令来全局安装 hexo-cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成以后使用命令<code>npm list -g</code>查看是否安装成功：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021173638924.png"></p><p>成功安装后会在<code>/usr/local/bin/</code>目录中创建名为<code>hexo</code>的软链接并指向<code>hexo-cli/bin</code>下面的<code>hexo</code>命令：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021174400442.png"></p><p>因为<code>/usr/local/bin</code>目录在系统环境变量 PATH 里面，因此此时我们可以在任意目录下直接执行这里的<code>hexo</code>命令，并且这个命令就是我们前面全局安装的<code>/usr/local/lib/node_modules/npm-cli.js</code>！这就是为什么我们一定要全局安装 hexo-cli 的原因！</p><h2 id="2-3：下载安装-Hexo"><a href="#2-3：下载安装-Hexo" class="headerlink" title="2.3：下载安装 Hexo"></a>2.3：下载安装 Hexo</h2><blockquote><p>初始化 Hexo 可以理解为下载 Hexo 程序，也就相当于安装了一个免安装的程序，类似于安装 Maven 一样。</p></blockquote><p>打开终端，切换到你想安装 Hexo 程序（博客工程）的目录下，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 自定义文件夹名</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里使用的<code>hexo</code>命令是前面安装的<code>hexo-cli</code>包中自带的命令，也就是<code>/usr/local/bin/hexo</code>；</li><li>执行这条命令时，计算机会使用 Git 从 Github 上下载 Hexo 程序到本地（所以之前一定要先安装 Git）；</li><li>下载下来的 Hexo 程序会被重命名为命令中指定的文件夹名称，这个目录就是博客工程的根目录；</li></ul><p>比如我打算把博客工程直接放在我的桌面上，并将其命名为<code>MyBlogs</code>，那么就这么操作：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021174859408.png"></p><p>命令执行成功以后，就会在桌面生成名为<code>MyBlogs</code>的文件夹，其初始内容如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021174945457.png"></p><p><font color=red><strong>注意</strong></font>：从现在开始，我们再使用<code>hexo</code>命令，就要切换到博客根目录下，否则使用的依然是<code>/usr/local/bin/hexo</code>，也就是<code>/usr/local/bin/hexo</code>（2.2 中全局安装的<code>hexo-cli</code>中的<code>hexo</code>命令），会发生意料之外的错误！</p><p>然后，切换到本地博客工程根目录下，执行<code>hexo --version</code>来查看安装的 Hexo 和 Nodejs 的版本信息：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021175105119.png"></p><p>此外，刚下载的 Hexo 程序，其中自带的 npm 包如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021175202989.png"></p><h2 id="2-4：本地预览-Hexo"><a href="#2-4：本地预览-Hexo" class="headerlink" title="2.4：本地预览 Hexo"></a>2.4：本地预览 Hexo</h2><blockquote><p>安装了 Hexo 程序后，我们就可以使用它来生成静态博客文件了，也可以在本地预览此时的博客是什么样子的</p></blockquote><p>打开终端，切换到本地博客工程根目录下，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server  # 也可简写成&quot;hexo s&quot;</span><br></pre></td></tr></table></figure><p>执行成功时，终端中应该是这个样子：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021175253054.png"></p><p>此时不要关闭终端，接着打开浏览器访问<code>http://localhost:4000/</code>，可以看到此时博客的样子：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021175504507.png"></p><p>这就是目前本地的 Hexo 程序生成的博客网站的样子！若想停止预览，可在之前的终端窗口中用快捷键<code>Ctrl</code>+<code>C</code>来停止。</p><p>友情提示：此时 Hexo 博客网站使用的是默认的主题<code>landscape</code>，并且在博客工程根目录下的<code>source/_post/</code>中下有一篇默认的博文《hello-world.md》，也就是上图中展示的这篇博文！</p><h1 id="第三节：远程部署"><a href="#第三节：远程部署" class="headerlink" title="第三节：远程部署"></a>第三节：远程部署</h1><p>经过第一步，我们已经在本地安装了 Hexo 程序，并可以在本地通过浏览器来预览我们的博客网站了。但是要想让其他人也能看到这个博客网站的话，就需要将本地生成的静态博客资源部署到静态资源托管平台或者服务器上！</p><h2 id="3-1：我的选择"><a href="#3-1：我的选择" class="headerlink" title="3.1：我的选择"></a>3.1：我的选择</h2><p>部署静态博客网站，目前只有两个选择，一是服务器，二是静态资源托管平台。关于如何选择部署平台，可以参考我之前发布的一篇文章—-<a href="https://www.fattymonkey.com/post/10042.html">《静态博客托管平台》</a>。其中详细描述了各种不同部署平台以及它们的优劣，我选择使用 Github 来做演示，因为 Gitee 的各种实名认证是真的逃也逃不掉，这是由国内的政策决定的，而且完成这些实名认证不仅费时，还费财（网站备案需要购买一台云服务器，真无语）！而 Github 建站简单、维护简单、完全免费（只需要自己购买域名，配套的 Vercel 也是免费的）！相比之下，选哪个比较合适不言而喻。</p><h2 id="3-2：创建仓库"><a href="#3-2：创建仓库" class="headerlink" title="3.2：创建仓库"></a>3.2：创建仓库</h2><p>首先，你需要注册 Github 账号，并创建一个仓库：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818202939395.png"></p><p><font color='red'>友情提醒</font>：</p><ul><li>仓库名称建议使用<code>username.github.io</code>的形式，这样最后生成的博客网站的网址最简洁，当然你也可以使用其他的名称，但是不仅最后生成的网址不够简洁，而且在在对你的网站进行个性化设置的时候，还会出现各种和路径相关的问题，最常见的就是加载不到网站的 CSS 和 JS 文件，所以，强烈建议这种命名方式，这里的 username 指的是你的 Github 的用户名；</li><li>仓库必须选择 Public，公开的意思仅仅是公开给别人看和下载，假如别人想要提交代码到你的仓库，是需要经过你的同意的，不用担心自己的博客被别人修改；</li><li>建议添加 README 文件，不然后续你在 Github 网页查看自己的仓库时，总会有要你添加该文件的提示；</li><li>不需要添加<code>.gitignore</code>文件，因为 Hexo 程序生成的静态文件中就有这个文件，后续我们可以将这个文件上传到这个仓库，所以压根就不需要在创建仓库的时候添加这个文件；</li><li>建议在创建仓库的时候就直接添加一个开源许可证，不添加也没什么关系；</li><li>此时创建的仓库的默认分支是 main，而不是 master；</li></ul><p>点击创建以后，就创建了一个仓库，仓库中只有 Readme 文件和开源许可证：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818203601586.png"></p><h2 id="3-3：创建口令"><a href="#3-3：创建口令" class="headerlink" title="3.3：创建口令"></a>3.3：创建口令</h2><p>后面我们需要将本地生成的静态博客资源上传到这个仓库，从 2021 年 8 月 13 日开始，Github 就不再接受用户名和密码这种形式的验证了，转而接受用户名和口令（token）！</p><p>关于这一部分的内容，可以参考我的这篇博文—-<a href="https://www.fattymonkey.com/post/10021.html">《Github使用口令替代密码来进行上传验证》</a>，这篇博文中详细描述了口令的创建和使用注意事项，在这里我就不再赘述了！</p><h2 id="3-4：部署插件"><a href="#3-4：部署插件" class="headerlink" title="3.4：部署插件"></a>3.4：部署插件</h2><p>使用 Git 可以将 Hexo 静态博客文件上传到服务器，此外 Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上，一键部署依赖插件 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><p>第一步：在本地安装这个插件。打开终端，切换到博客工程根目录下，执行如下安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>比如我的安装情况：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021175938349.png"></p><p>第二步：配置插件。打开博客工程根目录下的<code>_config.yml</code>文件，找到<code>deploy</code>并进行如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/fattymonkey/fattymonkey.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>Hexo 的官网上对这里的配置描述的很清楚：</p><ul><li>type：上传方式，hexo-deployer-git 插件支持 Git 上传，所以这里配置为 Git；</li><li>repo：仓库地址，没有默认值，必须要配置为自己的仓库；</li><li>branch：分支名称，现在在 Github 上的仓库，默认主分支是 main，不再是 master；</li><li>message：自定义提交信息，因为每次提交设置的提交信息都应该不同，所以不在这里配置死；</li><li>token：可选的口令值，用于认证 repo，用<code>$</code>作为前缀从而从环境变量中读取令牌（即3.3中生成的口令）；</li></ul><p>注意：建议只配置<code>type</code>、<code>repo</code>、<code>branch</code>这三项，这三项是必填项，<code>token</code>可以没必要配置，第一次我们提交静态资源到仓库时，使用输入的方式来验证以后，token 会缓存到你的电脑上，也不再需要验证了，所以压根不用在这里配置，而且还容易造成口令泄露，存在安全隐患！</p><h2 id="3-5：配置文件"><a href="#3-5：配置文件" class="headerlink" title="3.5：配置文件"></a>3.5：配置文件</h2><p>假如此时我们在本地生成静态资源文件并上传到仓库，那么 Github 仓库中原本存在的两个文件就会被覆盖掉！为了让它们不被覆盖掉，我们需要将它们下载下来放到本地博客工程根目录下的<code>/source</code>目录中：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818204519199.png"></p><p>但是这样还不够！因为 Hexo 程序会将所有的 Markdown 文件渲染为 html 文件，如果我们不做处理的话，这里的 readme 文件会被渲染为 html 文件，但是我们并不想让它把 readme 文件也渲染，Hexo 程序考虑到了这种情况，只要我们在程序根目录下的<code>_config.yml</code>文件中，进行如下配置：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818205005468.png"></p><p>这样配置<code>skip_render</code>的值以后，Hexo 在渲染时，就会跳过这个文件，而文件<code>LICENSE</code>本身就不会被渲染！</p><h2 id="3-6：生成文件"><a href="#3-6：生成文件" class="headerlink" title="3.6：生成文件"></a>3.6：生成文件</h2><p>打开终端，切换到博客根目录下，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  # 修改了_config.yml文件后，要想生效就要清理缓存，也可以简写为&quot;hexo cl&quot;</span><br><span class="line">hexo generate  # 执行程序，渲染文件，也可以简写为&quot;hexo g&quot;</span><br></pre></td></tr></table></figure><p>这个命令还有其他的一些参数，官网上写的很明白：</p><ul><li><code>-d</code>或<code>--deploy</code>：文件生成后立即部署网站；</li><li><code>-w</code>或<code>--watch</code>：监视文件变动；</li><li><code>-b</code>或<code>--bail</code>：生成过程中如果发生任何未处理的一场则抛出异常；</li><li><code>-f</code>或<code>--force</code>：强制重新生成文件，Hexo 引入了查分机制，如果<code>public</code>目录存在，那么<code>hexo g</code>只会重新生成改动的文件；</li><li><code>-c</code>或<code>--concurrency</code>：最大同时生成文件的数量，默认无限制；</li></ul><p>比如我的执行情况是：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20231021180503857.png"></p><p><font color='red'>注意</font>：</p><ul><li>执行以后，博客根目录下就生成了<code>/public</code>文件夹，其中的文件就是要推送到仓库中的内容；</li><li><code>/public</code>文件夹中此时会生成名为<code>index.html</code>的文件，上传到仓库以后，我们就能访问博客网站了；</li><li>执行<code>hexo generate</code>后，不仅会生成 public 文件夹，还会生成名为<code>db.json</code>的缓存数据文件；</li></ul><h2 id="3-7：上传仓库"><a href="#3-7：上传仓库" class="headerlink" title="3.7：上传仓库"></a>3.7：上传仓库</h2><p>生成了静态博客文件以后，我们就可以使用如下命令来将它们上传到 Github 仓库（在本地博客根目录下执行）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy  # 也可以简写成&quot;hexo s&quot;</span><br></pre></td></tr></table></figure><p>按下回车，假如你是第一次往你的 Github 仓库上传代码，需要你输入用户名和密码（密码是在 3.3 中生成的口令）！</p><p>上传成功后，仓库中的内容如下：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818205636053.png"></p><h2 id="3-8：访问博客"><a href="#3-8：访问博客" class="headerlink" title="3.8：访问博客"></a>3.8：访问博客</h2><p>此时，就可以使用地址<code>https://username.gitee.io</code>来访问博客了！</p><h1 id="第四节：部署-Vercel"><a href="#第四节：部署-Vercel" class="headerlink" title="第四节：部署 Vercel"></a>第四节：部署 Vercel</h1><p>经过前面的操作，此时我们已经可以用网址<code>https://username.github.io</code>来访问我们的博客了，但是现在有一个很严重的问题，就是访问速度！此时我们可以将网站部署到 Vercel 上，它可以提供全局的公共 CDN 加速服务！</p><h2 id="4-1：注册账号"><a href="#4-1：注册账号" class="headerlink" title="4.1：注册账号"></a>4.1：注册账号</h2><p>关于这部分内容，可以参考我的这篇博文—-<a href="https://www.fattymonkey.com/post/10023.html">《Github + Vercel 搭建免费的个人图床》</a>，其中的 3.2.1 详述了如何注册 Vercel 账号！</p><h2 id="4-2：部署仓库"><a href="#4-2：部署仓库" class="headerlink" title="4.2：部署仓库"></a>4.2：部署仓库</h2><p>进入 Vercel 控制面板，点击页面的<code>Create a New Project</code>，在<code>Import Git Repository</code>处选择博客仓库：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818210319751.png"></p><p>点击上面博客仓库对应的<code>import</code>按钮后，接着直接点击下图中的<code>Deploy</code>部署按钮：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818210551466.png"></p><p>稍等片刻，就能看到部署成功的提示（撒花庆祝）：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818210800222.png"></p><h2 id="4-3：访问博客"><a href="#4-3：访问博客" class="headerlink" title="4.3：访问博客"></a>4.3：访问博客</h2><p>部署成功以后，Vercel 会给我们的网站自动分配一个个性化域名，点击上图中的<code>Continue to Dashboard</code>进入控制台：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818211055825.png"></p><p>上图红框内的内容，就是 Vercel 分配给我们的个性化域名，通过这个域名就可以访问我们的博客网站了！</p><p>由于<code>.vercel.app</code>这个域在国内被墙了，所以假如你在国内，此时通过 Vercel 分配的这个域名是访问不到博客网站的！</p><h1 id="第五节：配置域名"><a href="#第五节：配置域名" class="headerlink" title="第五节：配置域名"></a>第五节：配置域名</h1><p>此时，我已经拥有了一个可以使用<code>fattymonkey.github.io</code>和<code>fattymonkey-github-io.vercel.app/</code>这两个域名来访问的博客网站，由于<code>.vercel.app</code>这个域在国内被墙了，所以假如你在国内，此时通过 Vercel 分配的这个域名是访问不到博客网站的！</p><p>域名可以通过域名解析配置到两个不同的地方，此时我们可以选择将我们的域名解析到如下两个地方：</p><ul><li>解析到 Github Pages 仓库，这样通过域名来访问时，实际上还是访问的 Github Pages；</li><li>解析到 Vercel 分配给我们的域名上，这样就能解决 Vercel 域名在国内被墙的问题；</li></ul><p>因为 Vercel 具备全局加速的 CDN 服务，所以我们当然是将域名解析到 Vercel 上了啊！</p><h2 id="5-1：购买域名"><a href="#5-1：购买域名" class="headerlink" title="5.1：购买域名"></a>5.1：购买域名</h2><p>建议在腾讯云购买域名，价格较便宜的同时，还可附赠 DNSPod（用来配置域名解析），即使是老用户，也可以在购买域名的同时加购 DNSPod，总体而言还是比较优惠的。</p><p>至于如何购买域名，就不废话了，自行登录腾讯云官网查看购买，官方文档的描述很详细！</p><h2 id="5-2：配置解析"><a href="#5-2：配置解析" class="headerlink" title="5.2：配置解析"></a>5.2：配置解析</h2><p>打开 Vercel 博客项目的控制台：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818211659989.png"></p><p>点击右上角的<code>Domains</code>，将自己购买的域名填入（填入二级域名，也就是主域名），比如我的：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818212515262.png"></p><p>然后点击<code>Add</code>按钮，接着在弹窗中点击<code>Add</code>：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818212725654.png"></p><p>添加成功后，发现当前的解析记录是无效的：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818213353915.png"></p><p>因为我们自己购买的域名现在还没有解析到 Vercel，打开你的域名解析，按照上面提示添加两条解析记录：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818213644868.png"></p><p>待解析生效，Vercel 还会自动帮我们生成 SSL 证书，生成以后，显示当前域名添加完成：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818213824474.png"></p><p>此时，你就可以用你自己的域名来访问博客网站了（使用<code>fattymonkey.com</code>或<code>www.fattymonkey.com</code>都可以）！</p><h1 id="第六节：写在后面"><a href="#第六节：写在后面" class="headerlink" title="第六节：写在后面"></a>第六节：写在后面</h1><h2 id="6-1：发布流程"><a href="#6-1：发布流程" class="headerlink" title="6.1：发布流程"></a>6.1：发布流程</h2><p>经过以上的操作，我们就搭建了一个最简单的 Hexo 博客，其他用户可以通过浏览器来访问我们的博客！</p><p>此后，假如我们需要发布博客的话，就创建 Markdown 文件，并将其放到博客工程根目录下的<code>/source/_posts</code>中，然后依次执行如下两个命令，就可以完成博文的发布：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>注意，除了这种方式，我们还有三种命令，可以将生成静态博文件和推送合并成一步：</p><ul><li><code>hexo generate &amp;&amp; hexo deploy</code>；</li><li><code>hexo generate -deploy</code>；</li><li><code>hexo deploy -generate</code>；</li></ul><p>PS：上述的每个<code>deploy</code>都可以用<code>d</code>来替代，每个<code>generate</code>都可以用<code>g</code>替代；</p><p>此时博客工程根目录下的<code>/source/_post/hello-word.md</code>文件就可以删除了，然后自己创建一个 Markdown 的文件替换它即可。比如我写了一篇，名为<code>first-test.md</code>，内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客搭建成功</span><br><span class="line">date: 2023-03-01 06:43:58</span><br><span class="line">updated: 2023-08-18 21:42:05</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我的 Hexo 博客搭建成功了，这是一篇用来做测试博文</span><br><span class="line"></span><br><span class="line"># 标题一</span><br><span class="line"></span><br><span class="line">&gt; 这是一段引用文本</span><br><span class="line"></span><br><span class="line">下面是一段 Python 代码：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">myStr = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;</span><br><span class="line">    for i in myStr:</span><br><span class="line">        print(i)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">显示一个微笑的emoji表情：:smile:</span><br></pre></td></tr></table></figure><p>然后打开终端，切换到本地博客根目录下，执行发布命令，即可完成博文的发布：</p><p><img src="https://www.czblogs.cn/posts/hexo/01/image-20230818214804298.png"></p><h2 id="6-2：后续优化"><a href="#6-2：后续优化" class="headerlink" title="6.2：后续优化"></a>6.2：后续优化</h2><p>到现在为止，我们已经有了一个可以基本使用的博客网站了，为什么说基本呢？因为此时的 Hexo 博客还需要很多很多的折腾！比如下面这些后续操作：</p><ul><li>更换主题；</li><li>主题的基本配置（永久链接、代码高亮、全局搜索等）；</li><li>主题的功能配置（评论系统等）；</li><li>主题美化；</li><li>性能优化；</li></ul><p>这些内容都会在我后续的博文中详细介绍！</p>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Vercel </tag>
            
            <tag> GitHub </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客框架该怎么选</title>
      <link href="/post/10043.html"/>
      <url>/post/10043.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><p>这篇博文是我搭建个人博客系列的第一篇，本文没有记录任何搭建博客的实际操作，旨在分析当下几种流行的博客平台和博客框架，包括第三方博客平台以及各种博客框架的优势和缺点，如果你还没有拥有自己的博客网站，并且从现在开始想做一个属于自己的博客网站的话，那么这篇博文应该会对你有所帮助。</p><p>特别提示：本文提及的博客框架很多，其中有一些我自己也没有用过，对于我没使用过的这些框架，主要是参考了大神我不是咕咕鸽的<a href="https://blog.laoda.de/archives/blog-choosing/">这篇文章</a>。</p><h1 id="第二节：博客是什么"><a href="#第二节：博客是什么" class="headerlink" title="第二节：博客是什么"></a>第二节：博客是什么</h1><p>博客正式名称为网络日记，又音译为部落格或部落阁等。博客（英语：Blog）是一种在线日记形式的个人网站，借由张贴文章、图片或视频来记录生活、抒发情感或分享信息。</p><p>到现在为止，博客的形式更加具体化，博客网站的内容会大部分偏向于某个方面，比如程序员分享技术、数码博主分享数码产品体验和测评、个人或平台分享美食和美妆等等。在博客平台上，博主不仅可以分享自己，还可以跟志同道合的人互动交友、交流交换信息。尤其像我这种程序员，个人博客就显得尤为重要了。首先我可以将博客作为自己的个人笔记来使用，程序员每天都要学习新的东西，并且学习的知识点多而且杂，经常为了完成某个需求而在网络上苦苦需求大半天，而找到的结果可能用一次就不会再用了，这种情况下我就需要一个类似“个人笔记”的东西来记录，个人博客就是一个很优秀的个人笔记！其次，由于博客是在线的，只要有网络的地方就可以访问，这相比于实体的存储设备具备更大的灵活性；而且，博客是分享自己是最直接的方式，学习是没有止境的，但是学习的最终形态就是输出！此外，博客平台一般具备评论系统，我们可以借助评论系统来进行沟通交流，也促进了自己个人的进步；最后，假如哪天你想要换一份工作，一个优秀的个人网站也会给你的面试添彩不少！</p><p>总而言之，在当下信息爆棚的时代，拥有一个个人博客，是一件很有必要也很有意义的事情！</p><h1 id="第三节：第三方平台"><a href="#第三节：第三方平台" class="headerlink" title="第三节：第三方平台"></a>第三节：第三方平台</h1><p>即使你从来没有写过博客，你肯定也接触过别人写的博客！当你用浏览器搜索时，经常会在搜索结果中看到一些博客的链接，比如简书、博客园、CSDN、知乎等等。这些都是第三方平台，它们的用户在这些平台上发布自己的博文。使用这些第三方平台来写博客是很简单的，你只需要在这些平台上注册一个账号，然后就可以直接使用它们提供了服务了，发布文章、评论文章以及回复评论等，全部在平台上来实现，甚至不用花一分钱！</p><p>曾经我也是使用第三方平台来写自己的技术博客的，知乎、CSDN、博客园等我都用过，但是在我身上发生过好几次这样的事情，就是我经常会发现我之前写的博文莫名其妙被删除了，给我的理由是包含违规内容之类的，实际上存不存在违规内容不知道，反正我辛辛苦苦写的博文就这么莫名其妙地没了！</p><h1 id="第四节：自建的博客"><a href="#第四节：自建的博客" class="headerlink" title="第四节：自建的博客"></a>第四节：自建的博客</h1><p>对于喜欢折腾的人来说，自己搭建一个博客网站会是更好的选择，不仅可以避免第三方博客平台存在的问题，还可以定制化自己的网站，更好的展示自己！由于很多编程技术和博客框架技术的进步，现在搭建自己的个人博客已经没有那么高的要求了，对于没有编程经验的人来说，甚至半个小时就能搭建出一个属于自己的网站。</p><p>从大的方面来讲，现在主流的博客框架分为两种：</p><ul><li>静态博客框架：静态博客网站就是由一些 HTML、CSS、JS 等前端资源组成的，这些静态资源部署在代码托管平台或者服务器上，当访客访问博客网站时，浏览器从服务器直接获取这些静态资源，然后展示给访客。</li><li>动态博客框架：动态博客才是实质意义上的网站，不仅有前端资源，还有后台数据库等资源，当用户访问时，获取的数据来自数据库，而浏览器则负责前端页面的渲染；</li></ul><p>当下最流行的博客网站有下面五种，现在我们来简单说一下这五种博客框架的优缺点。</p><h2 id="4-1：Hexo"><a href="#4-1：Hexo" class="headerlink" title="4.1：Hexo"></a>4.1：Hexo</h2><ul><li><p><strong>优点</strong></p><p><font color=red>静态博客网站</font>。它是基于 Nodejs 的，使用特定的主题将 Markdown 文件渲染成静态的博客网站文件，然后通过命令将静态博客文件上传到服务器，以此来完成博客网站的部署，快速且优雅；</p><p><font color=red>建站成本很低</font>。Hexo 是静态博客网站，其原理就是把生成的静态博客文件上传到服务器，所以可以将博客部署到 Github 或 Gitee 上，不用另外花钱购买服务器，当然你也可以自己购买服务器来部署；</p><p><font color=red>使用的人很多</font>。假如你遇到了问题去网上搜解决方案的话，也是比较容易的。而且 Hexo 是台湾人开发的，中文文档非常友好；</p></li><li><p><strong>缺点</strong></p><p><font color=red>没有后端</font>！因为没有后端，所以静态博客存在很多天生的弊端。第一，博客部署完成以后，一旦换了一台电脑，就不得不重新部署环境，而且你需要拷贝你的博客在云端，否则你配置好新的电脑并推送过去的话，你之前写的博客就都没了；第二，因为没有后端，所以基本上你只能在本地写文章，假如你的电脑不再身边，就没办法写文章并发布了（不过现在可以将 Hexo 程序部署到服务器 Docker 上，可以在线写文章）；第三，没有后端就意味着没有数据库，那么博客的评论系统必须外接其他平台，你需要从它们当中选一个来配置。我总担心评论数据会丢失，之前还暴出大家用的很多的 Valine 存在安全问题，总之评论系统的配置还是比较繁琐的！第四，Hexo 博客依赖于 theme 和 plug，如果想做出满意的博客网站，肯定需要很大的折腾，而且如果你想做出满意的效果，就要具备一些前端的编程技术，越想搞好难度就越高；</p></li><li><p><strong>总结</strong></p><p>如果你愿意折腾的话，Hexo 是我最推荐的，如果你有时间折腾，一定要玩一玩 Hexo，还能学到很多知识！</p></li></ul><h2 id="4-2：Hugo"><a href="#4-2：Hugo" class="headerlink" title="4.2：Hugo"></a>4.2：Hugo</h2><ul><li><p><strong>优点</strong></p><p>跟 Hexo 一样，Hugo 也是静态博客网站，也具备静态博客天生的缺点，但是它比 Hexo 更简单一些！而且它是用 Go 语言写的，如果你有几百篇 Markdown 的文章要渲染，它可以在几秒钟的时间就完成渲染，而 Hexo 则可能需要更长的时间；</p></li><li><p><strong>缺点</strong></p><p>使用 Hugo 的人比 Hexo 的人少很多，相对可用的主题也比较少，如果你遇到问题去网上查找解决方案的话，可能有找不到解决方案的风险，或者需要很长的时间！</p></li><li><p><strong>总结</strong></p><p>同 Hexo，如果你爱折腾，而且你的文章有很多（几百篇的样子），那么我还是比较推荐你使用 Hugo 的。虽然可用的主题比较少，但是依然有一些简约美观的主题可以选择。</p></li></ul><h2 id="4-3：Typecho"><a href="#4-3：Typecho" class="headerlink" title="4.3：Typecho"></a>4.3：Typecho</h2><ul><li><p><strong>优点</strong></p><p><font color=red>非常轻量</font>，整个文件才385KB，而且到我写博文的时间，还在一致不断地更新优化；</p><p><font color=red>带有后端</font>，因为带有后端，所以假如你换了一台电脑，就不需要重新部署，可以直接登录后端来写博客；</p></li><li><p><strong>缺点</strong></p><p><font color=red>需要购买服务器</font>；</p><p><font color=red>可扩展性也有限</font>。对于单纯的博客来说，这个问题其实不是问题，说它扩展性有限是因为跟 Wordpress 相比。</p></li><li><p><strong>总结</strong></p><p>对于只是想写博客，不想搞花里胡哨的人，而且服务器配置有限的话，那我推荐使用 Typecho！</p></li></ul><h2 id="4-4：Halo"><a href="#4-4：Halo" class="headerlink" title="4.4：Halo"></a>4.4：Halo</h2><ul><li><p><strong>优点</strong></p><p><font color=red>部署和维护方便</font>，因为可以使用 Docker 来部署和维护；</p><p><font color=red>日渐丰富的主题</font>；</p><p><font color=red>活跃的社区</font>，开发者非常友好，基本上你碰到任何问题，都能在社区中找到答案；</p></li><li><p><strong>缺点</strong></p><p>Halo 是使用 Java 编写的，所以比较迟服务器的配置；</p></li><li><p><strong>总结</strong></p><p>如果你有一台配置不错的服务器，那么你真的要试一下 Halo！你会发现它真的是太省心了，与 Hexo 和 Hugo 相比，它自带了后端，你随时随地都可以发布文章（只要有网络和浏览器）；与 Typecho 相比，你不需要去下载邮件插件等一系列插件，Halo 都贴心地给你集成好了，你只需要简单的几个设置就可以使用；如果你想换主题，也可以轻松地利用远程下载，一键换成新主题，非常方便；你还可以随时利用博客自带的备份功能来备份你博客的所有数据，并把他们下载到你的本地；当 Halo 更新了，你也可以利用 docker 在 10s 钟内就完成博客的升级……</p><p>总之，假如你有一台配置不错的服务器，那就选 Halo 吧！</p></li></ul><h2 id="4-5：WordPress"><a href="#4-5：WordPress" class="headerlink" title="4.5：WordPress"></a>4.5：WordPress</h2><ul><li><p><strong>优点</strong></p><p><font color=red>用的人极多</font>。截至 2019 年 10 月的统计，全球所有网站中，有超过 34.7% 的网站采用 WordPress 方式搭建，也就是说每 3 个就有 1 个是用 WordPress 搭建的，小到一个个人博客，大到美国白宫官方网站。你遇到的 99.9% 的问题，世界上其他人肯定都遇到过，所以你可以比较容易在网上找到解决方案。Wordpress 不仅仅可以搭博客，它还可以搭一个论坛，它甚至还可以搭一个商城。</p><p><font color=red>生态丰富</font>。适配的插件非常多，你能想到的功能，99.9% Wordpress 都有，利用庞大的插件库，你可以完成你对网站的一切幻想。</p></li><li><p><strong>缺点</strong></p><p><font color=red>需要服务器</font>；</p><p><font color=red>臃肿</font>。由于功能过于强大，Wordpress 与上面几个博客框架相比，显得非常臃肿，尤其是当你的博客内容多了之后，需要你有一定的网站优化能力（当然这个可以慢慢学，也有很多插件可以帮上忙）</p></li><li><p><strong>总结</strong></p><p>如果你有一台配置不错的服务器，实际上我也不建议使用 Wordpress，因为它太臃肿了，我觉得是没必要！</p></li></ul><h1 id="第五节：我的选择"><a href="#第五节：我的选择" class="headerlink" title="第五节：我的选择"></a>第五节：我的选择</h1><p>由于我个人财力有限，现在个人服务器的价格也不便宜，即使你因为新用户特权，可以在一些平台上享受优惠，但是到期后再续费的话，费用也很高！所以我只能从 Hexo 和 Hugo 里面选择，由于我个人又比较爱折腾（<del>主要是因为我本人得了强迫症晚期，哈哈哈</del>），对 Nodejs 和前端又有所了解，所以我就选择了 Hexo！</p><p>我的这个博文系列，从搭建部署到基本设置，再从外观美化到性能优化，全程都是针对 Hexo 博客的！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 技术白话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态博客托管平台</title>
      <link href="/post/10042.html"/>
      <url>/post/10042.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：有哪几种博客网站"><a href="#第一节：有哪几种博客网站" class="headerlink" title="第一节：有哪几种博客网站"></a>第一节：有哪几种博客网站</h1><p>拥有属于自己的博客的重要性不言而喻，不管是作为自己的个人笔记来使用，还是说你想要更好地展示自己（<del>比如你想要换工作时</del>），博客都是一个非常不错的选择！</p><p>而且，现在很多人都拥有自己的博客，并且做的都还不错，当我遇到了问题到网上搜索答案的时候，经常能遇到一些颜值高、内容好的个人博客网站。</p><p>从大的方面来区分，目前常见的个人博客有两种。第一种就是借助第三方博客平台，比较有名的有博客园、CSDN、简书、知乎等；第二种就是自建博客网站，就是自己来创建一个博客网站，实现跟博客平台相类似的功能。</p><h2 id="1-1：借助平台"><a href="#1-1：借助平台" class="headerlink" title="1.1：借助平台"></a>1.1：借助平台</h2><p>借助第三方博客平台是成本最小的实现个人博客的途径，你只需要注册一个账号，即可实现写文章、发布文章的基本功能和评论文章等互动功能，你不需要进行任何部署就可以使用！</p><p>第三方平台确实方便，但是跟自建博客网站比起来，它还是具备一些缺点的。比如你的博客页面被插入了广告时，你毫无办法；当你的博文因为一些过于严苛的审核导致被删除了，你只能默默忍受；当你想要定制化自己的主页时，也只能在平台提供的功能下进行筛选，并不能创造……</p><p>其实，上述所有缺点的根本原因是注册第三方平台只是获得了免费的“个人博客空间”，你的博客空间是依赖于平台的，所有的数据也是存在于平台的数据库上的，你只能做平台允许你这个账号的操作，对于你账号权限以外的事情你是没有办法控制的。因此自建博客网站就出来了！</p><h2 id="1-2：动态博客"><a href="#1-2：动态博客" class="headerlink" title="1.2：动态博客"></a>1.2：动态博客</h2><p>第一种自建博客网站的方式就是动态博客。这种方式比较传统，整个博客网站至少包含数据库、后台管理系统、前台页面展示这三个部分。由于所有的数据都是存在自己的数据库中的，数据经过前端技术的渲染后呈现给访客，呈现的内容会根据数据库返回内容的变化而变化，即动态变化，所以通常我们也将这种传统的自建博客网站称为“动态博客”。</p><p>现在也有很多优秀且成熟的开源方案，比如 Wordpress 和 Halo，使用这些方案，让部署动态博客变得很简单，所以跟静态博客网站相比，使用门槛较低。虽然门槛较低，但是使用者至少要拥有一个个人云服务器，此外还会包含域名解析和配置 SSL 证书、CDN 等内容，整个建站过程涉及的内容还是非常多的。</p><h2 id="1-3：静态博客"><a href="#1-3：静态博客" class="headerlink" title="1.3：静态博客"></a>1.3：静态博客</h2><p>第二种自建博客网站的方式就是静态博客。静态博客框架是在站长自己本地计算机上的，通过运行框架程序生成静态文件 HTML、CSS、JS 等，然后将这些动态生成的静态文件布署到 Web 服务器即可，不需要依赖数据库，当然也不需要管理后台，所有存在于服务器上的博客文章都是静态文件。目前已经有许多优秀的静态博客框架，比如 Hexo 和 Hugo 等。把这种无需依赖数据库系统，也不需要管理后台建立的博客称为静态博客。</p><p>跟动态博客相比，静态博客的优势非常明显：</p><ol><li><strong>速度极快</strong>，因为当用户访问博客时，只用从服务器调取编译好的静态资源即可，无需实时从数据库查询获取博文、图片、评论、访问量等资源，效率极高，打开网站的速度会非常快速！</li><li>作者可以<strong>专心生产博文</strong>，不用管服务器维护等琐事，基本不需要维护，折腾党除外。</li><li><strong>成本低</strong>，市面上有很多开源免费的静态网站托管平台，不用担心高昂的服务器费用。</li><li><strong>很安全</strong>，无需担心数据库注入，跨站攻击等网站安全问题。</li></ol><p>凡事都有两面性，有优点就有缺点：</p><ol><li><strong>硬伤</strong>，无法支持原生评论和访问量统计（可以通过插件来实现），也没办法实现注册登录等功能。</li><li><strong>维护繁琐</strong>，虽然静态博客不用管服务器维护，不用担心高昂的服务器费用，但是没有后台管理，全靠手动编译，如果在原有的基础上改动过多（美化和功能增删）的话，维护起来也是挺费劲的；</li><li><strong>上手难</strong>， 由于无后台管理功能，那么静态博客对新手菜鸟来说真的是难以使用，不懂点前端编程知识的话，根本不用谈使用了，因为你连发布文章都会非常吃力，所以想玩好静态博客，不经历点摸爬滚打是不可能的。不要跟我说简单，因为你的简单只建立在原生无改动的情况下。</li><li><strong>生成速度（编译速度）</strong>，不同的静态博客生成器的速度各不相同，一旦静态资源存在大量图片，速度就会有明显的变化，当然对于坚定静态博客并且喜欢折腾的人来说，这点可以忽略不计。</li></ol><h1 id="第二节：静态网站托管平台"><a href="#第二节：静态网站托管平台" class="headerlink" title="第二节：静态网站托管平台"></a>第二节：静态网站托管平台</h1><h2 id="2-1：静态网站托管"><a href="#2-1：静态网站托管" class="headerlink" title="2.1：静态网站托管"></a>2.1：静态网站托管</h2><p>引用腾讯云上对静态网站托管的一段描述：</p><blockquote><p>静态网站托管是云开发为开发者提供的托管静态网站资源的服务，它提供了一种简单、快速、安全的方式来托管静态网站。静态网站是指网站内容无需动态生成，而是由静态文件（HTML、CSS、JavaScript、图片）组成的网站。静态网站托管可以将这些静态文件存储在云端，并通过 CDN（内容分发网络）加速访问，从而提高网站的访问速度和稳定性。此外，腾讯云静态网站托管还提供了一些方便的工具和功能，如自动部署、自定义域名、HTTPS 支持等，使网站的管理和维护更加简单和高效。</p></blockquote><p><strong>总而言之，静态网站托管是一种服务，这种服务可以将你托管在云端的静态网站资源转变为网站网页！</strong></p><p>我们可以来简单分析一下：因为动态博客的数据是存储于服务器的数据库中的，每次访问的数据都是动态从数据库中查询出来的，所以动态博客需要“计算能力”，至少需要数据库的查询操作吧，所以部署动态博客的话，你至少得购买一台云服务器（当然搭建个人博客所需要的云服务器配置要求不高，毕竟访问量没有那么庞大）。</p><p>相比于动态博客，静态博客就简单很多了，它的数据不是从数据库中获取的，而是直接存在于 HTML 页面中的，所以理论上它不需要“计算能力”，即使是页面上展示出来的一些动态效果，也是 JS 等触发的浏览器行为！因此，我们可以将这些静态代码托管在类似 GitHub 和 Gitee 等平台上，这些平台提供的 Pages 服务（即前面说的静态网站托管服务）可以直接将我们的静态资源转变为网站网页，因此我们可以不用购买昂贵的个人云服务器。也就是说，静态博客不需要服务器大动干戈，只要一个托管平台就解决问题。</p><p>当你想搭建静态博客时，网上搜索，可供使用的平台并不多，以为资源匮乏，实际上只是你未曾了解而已，下面我们来一一例举一些比较常见的静态网站托管平台，并结合我的使用经历和一些大神的心得，来分析一下它们的优劣点，希望对你能有所帮助！</p><h2 id="2-2：Gitee-Pages"><a href="#2-2：Gitee-Pages" class="headerlink" title="2.2：Gitee Pages"></a>2.2：Gitee Pages</h2><p>Gitee Pages 是国内最大的代码托管平台 Gitee 提供的 Pages 服务。</p><p><strong>优点</strong>非常明显，就是稳定性强，速度快（服务器位于上海）。</p><p><strong>缺点</strong>也是很明显的，仓库的最大容量和单个文件大小有限制，对仓库内容非常敏感，需要各种恶心人的实名认证，自定义域名和自动部署都需要收费！</p><p><strong>使用体验</strong>：刚开始我是打算把网站部署在 Gitee Pages 上面的，看重的就是它优秀的访问速度，但是<strong>在搭建的过程中</strong>，各种恶心人的实名认证快给我逼疯了。原本我还认真地按照要求去进行实名认证，直到最后搭建成功以后，在绑定域名的过程中，需要对部署在 Gitee Pages 上面的网站进行备案，而备案的要求是你得有一台云服务器，我瞬间就破防了！先不说我已经在购买域名、开通 Pages 服务这两个步骤中已经实名认证过了，咱就是说你网站备案还要求用户具备云服务器，我就想问一下，假如我有一台云服务器的话，我还会选择用你的 Gitee Pages？此外，实名认证时还要求我上传手持身份证的照片，不知道的还以为我在搞什么网贷呢！其中，网站备案的过程又臭又长，对小白很不友好！这吃相我也是服了（当然这也不能怪 Gitee 本身，毕竟政策要求~~）即使你搭建完成，<strong>在使用的过程中</strong>，每次修改、更新、发布你的文章，推送了代码以后还要用浏览器访问你的 Pages 服务，通过点击更新按钮来重新部署（让你的修改生效），体验感很差（需要注意的是，实际上手动更新这个步骤完全可以免掉，但这是收费功能，真是小气至极）！</p><p><strong>个人建议</strong>：假如部署静态博客网站，我建议你尽量不要选择 Gitee Pages，当然你不怕恶心、不怕个人信息暴露，而且时间多爱折腾的话，你也可以选择它，毕竟跟其他平台相比，它的速度还是数一数二的！（估计也是唯一的优点，跟它的缺点比起来，这个优点可以忽略了）</p><h2 id="2-3：Github-Pages"><a href="#2-3：Github-Pages" class="headerlink" title="2.3：Github Pages"></a>2.3：Github Pages</h2><p>Github Pages 跟 Gitee Pages 是一样的原理，总体上而言它跟 Gitee Pages 的优缺点<font color=red>恰好相反</font>！</p><p><strong>优点</strong>有两点，第一：搭建过程中不需要任何一个实名认证，完全甩 Gitee 十条街；第二，Github Pages 会自动识别仓库代码的变化，并随之更新，不需要每次推送代码后都手动更新（是不是很给力）！</p><p><strong>缺点</strong>也有两点：第一就是访问速度，由于国内的网络限制，Github 在很多地区访问速度很慢，甚至压根无法访问；第二就是原生的 Github Pages 网站无法被百度收录，因为百度的爬虫过于强大，Github 认为它影响了 Github 网站的运行，所以 Github 官方屏蔽了百度的爬虫，使得百度爬虫无法爬取 Github 上的内容！</p><p>但是对于我上述的 Github 的两个缺点，我们都可以借助公共 CDN 技术来解决，比较优秀的就是 Vercel，操作简单而且一劳永逸，一旦配置完成就不用再管了。</p><h2 id="2-4：Cloudflare-Pages"><a href="#2-4：Cloudflare-Pages" class="headerlink" title="2.4：Cloudflare Pages"></a>2.4：Cloudflare Pages</h2><p>Cloudflare Pages 是 Cloudflare 推出的全新网页托管服务。</p><p>优点：不限站点数、请求数和带宽，全球都拥有 CDN 节点，支持自定义域名和自动部署。</p><p>缺点：国内访问速度和稳定性一般，每月构建次数、文件数量和大小都有限制。</p><p>个人观点：放弃 Gitee Pages 和 GitHub Pages 后的一个选择，稳定性不好，经常超时，不过有时候挺快的。但是这种不稳定性是我个人接受不了的，当然也没有尝试过使用它。</p><h2 id="2-5：Coding-Pages"><a href="#2-5：Coding-Pages" class="headerlink" title="2.5：Coding Pages"></a>2.5：Coding Pages</h2><p>国内的平台，但是现在被腾讯收购了，不再免费，使用送的代金券可以适用几个月，所以基本上可以放弃了，再来分析它的优缺点似乎就失去了意义！</p><h2 id="2-6：CloudBase"><a href="#2-6：CloudBase" class="headerlink" title="2.6：CloudBase"></a>2.6：CloudBase</h2><p><a href="https://cloud.tencent.com/document/product/876/40270">CloudBase</a> 是腾讯云推出的静态网站托管服务，也是收费的项目。这里有个故事，它之前的收费方式是有免费套餐和包年包月的套餐，一度成为很多人的选择，但是后来“单方面撕毁计费协议”，所有的套餐都变成了“基础套餐+按量计费”的形式！先不说每个月都要固定支出套餐费用，反正我只要看到“按量计费”这四个字就会放弃，可能是因为我看到过太多博主讲述过他们的凄惨遭遇（个人网站遭受到攻击，被恶意刷流量，导致一觉醒来欠费好几千）！</p><p><strong>个人观点</strong>：使用 CloudBase 这类收费软件，虽然价格不高，但是部署起来比较繁琐，需要配置的东西蛮多的，如果你不差钱的话也可以使用它，它的速度很快（我没试过，但是我觉得最终也逃不过实名认证，况且我对这种无法估算的“按量计费”方式很抵触，所以从一开始就放弃了它）！</p><h2 id="2-7：Vercel"><a href="#2-7：Vercel" class="headerlink" title="2.7：Vercel"></a>2.7：Vercel</h2><p>Vercel 是一个开箱即用的网站托管服务，全球都拥有 CDN 节点，支持自定义域名和自动部署，前身叫 ZEIT。</p><p><strong>优点</strong>：国内访问速度比 Github Pages 和 Cloudflare Pages 要快，支持自定义域名和自动部署。</p><p><strong>缺点</strong>：构建次数和构建时长有限制，每月带宽限制 100G。</p><p><strong>使用体验</strong>：免费静态博客的终极选择，不仅是静态博客，还有基于 Github 的图床等，也可以使用 Vercel 来解决访问速度的痛点！</p><h2 id="2-8：Netlify"><a href="#2-8：Netlify" class="headerlink" title="2.8：Netlify"></a>2.8：Netlify</h2><p><a href="https://netlify.com/">Netlify</a> 是国外平台，免费，国内访问速度还可以，个人感觉仅次于 Vercel，但和 Vercel 一样，带宽限制为每月 100G，可作为 Vercel 的替代方案！</p><p>~~</p><p>~~</p><p>~~</p>]]></content>
      
      
      <categories>
          
          <category> 技术白话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
            <tag> Github </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名背后那些事儿</title>
      <link href="/post/10041.html"/>
      <url>/post/10041.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：概念理解"><a href="#第一节：概念理解" class="headerlink" title="第一节：概念理解"></a>第一节：概念理解</h1><h2 id="1-1：IP地址是什么"><a href="#1-1：IP地址是什么" class="headerlink" title="1.1：IP地址是什么"></a>1.1：IP地址是什么</h2><blockquote><p>IP 地址（Internet Protocol Address）是指互联网协议地址，又译为网际协议地址。</p></blockquote><p>IP 地址是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><p>位于网络上的每个服务器都有一个唯一的IP地址，例如<code>61.135.169.125</code>就是百度的官网地址之一，如果每次访问百度都输入 IP 的话，估计到今天互联网还没有走出鸿蒙阶段！</p><h2 id="1-2：域名是什么"><a href="#1-2：域名是什么" class="headerlink" title="1.2：域名是什么"></a>1.2：域名是什么</h2><p><font color=red>域名就是 IP 地址的别名！</font>在网络发展历史上，最开始确实就是直接使用 IP 地址来访问远程主机的。早期联网的每台计算机都是采用主机文件（即我们俗称的 hosts 文件）来进行地址配置和解析的，也就是将主机的域名和IP的对应关系配置在主机文件中。这样，在地址栏输入更容易记忆的域名，就可以解析成 IP 地址，就可以实现连接访问。</p><p>域名比 IP 地址更容易记忆，本质上只是为数字化的互联网资源提供了易于记忆的别名，就像在北京提起“故宫博物院”就都知道指的是“东城区景山前街4号”的那个大院子一样。如果把 IP 地址看成电话号码，那域名系统就是通讯录。我们在通讯录里保存了朋友和家人的信息，每次通过名字找到某人打电话的时候，通讯录就会查出与之关联的电话号码再拨号过去。我们可能记不下多少完整的电话号码，但是联系人的名字却是一定记得的。</p><h2 id="1-3：DNS是什么"><a href="#1-3：DNS是什么" class="headerlink" title="1.3：DNS是什么"></a>1.3：DNS是什么</h2><blockquote><p>域名系统（DNS）就是用来将域名解析成 IP 地址的网络服务！</p></blockquote><p>后来联网机器越来越多，主机文件的更新和同步就成了很大的问题。于是，1983 年保罗·莫卡派乔斯发明了域名解析服务和域名系统，在 1985 年 1 月 1 日，世界上第一个域名 <a href="http://nordu.net/">nordu.net</a> 才被注册成功。单凭这一个名字我们并不能访问到正确的地址，只有能将域名解析成实际的网络地址，网络访问才能成功。这种解析工作由专门的「域名系统」（Domain Name System，简称 DNS）完成，DNS 也是互联网的核心基础服务之一。</p><h1 id="第二节：域名解析"><a href="#第二节：域名解析" class="headerlink" title="第二节：域名解析"></a>第二节：域名解析</h1><h2 id="2-1：域名层次结构"><a href="#2-1：域名层次结构" class="headerlink" title="2.1：域名层次结构"></a>2.1：域名层次结构</h2><p>我们经常听到有人说「顶级域名」、「一级域名」、「二级域名」等概念，域名级别究竟是怎么划分的呢？</p><ul><li><p><font color=red><strong>根域名</strong></font></p><p>所有域名的根域名都是一样的，就是<code>.root</code>！以百度为例，通过一些域名解析工具，我们可以看到百度的官方域名显示为<code>www.baidu.com.</code>，细心的人会注意到最后有一个点，这不是 bug，而是所有域名的尾部都有根域名，所以百度真正的域名是<code>www.baidu.com.root</code>，简写为<code>www.baidu.com</code>，又因为根域名对于所有的域名都一样，所以平时是省略的，最终就变成了我们常见的样子<code>www.baidu.com</code>。</p></li><li><p><font color=red><strong>一级域名（TLD），也叫顶级域名</strong></font></p><p>根域名的下一级叫做顶级域名，也叫做一级域名，常见的如 <code>.com</code>、<code> / .net</code>、<code>/ .org</code>、<code>/ .cn</code> 等等。</p></li><li><p><font color=red><strong>二级域名（SLD），也叫主域名</strong></font></p><p>一级域名的下一级就是二级域名，比如<code>baidu.com</code>。</p></li><li><p><font color=red><strong>次级域名，也叫主机名</strong></font></p><p>二级域名的下一级域名就是三级域名，比如<code>www.baidu.com</code>。</p></li></ul><p>一般来说我们购买一个域名就是购买一个二级域名（SLD）的管理权（如 leancloud.cn），有了这个管理权我们就可以随意设置三级、四级域名了。</p><h2 id="2-2：域名解析过程"><a href="#2-2：域名解析过程" class="headerlink" title="2.2：域名解析过程"></a>2.2：域名解析过程</h2><p><font color=red><strong>DNS系统也是一个树状结构</strong></font>，<font color=red><strong>不同级别的域名由不同的域名服务器来解析</strong></font>，<font color=red><strong>整个过程是一个层级式的</strong></font>。</p><ul><li>层级式域名解析体系的第一层就是<font color=red><strong>根域名服务器</strong></font>，全世界IPv4根域名服务器只有 13 台(名字分别为 A 至 M)，其中1 个为主根服务器在美国，其余 12 个均为辅根服务器，它们负责管理世界各国的域名信息。一个域名必须首先经过根数据库的解析后，才能转到顶级域名服务器进行解析；</li><li>根域名服务器下面是<font color=red><strong>顶级域名服务器</strong></font>，即相关国家域名管理机构的数据库，比如我们中国的互联网络信息中心(CNNIC)；</li><li>然后是再下一级的权威域名服务器和 ISP 的缓存服务器；</li></ul><p>举个例子，来模拟一下这个流程！假设北京市设立了一个专门的“道路咨询局”，里面设置了局长、部长、处长、科员好几个级别的公务员，不同的部门、科室、人员负责解答不同区域的道路问题。这里的人都有一个共同特点，信奉“好记性不如烂笔头”的哲理，喜欢将自己了解到的信息记录到笔记本上。但是有一点遗憾的是，他们写字用的墨水只有一种，叫“魔术墨水”，初写字迹浓厚，之后会慢慢变淡，1 小时之后则会完全消失。道路咨询局门口还有一个门卫大爷，所有的人要问路都需要通过他来传达和回复，市民并不能进入办公楼。</p><p>如果市民 A 先生来找门卫大爷询问“北海公园”的地址，门卫大爷会先看一下自己的笔记本，找找看在此之前的一个小时内有没有人问过北海公园。如果没有，他就会拨打内线去找局长求助。局长说北海是西城区，你去问负责西城区道路信息的赵部长吧。门卫大爷又去问赵部长，赵部长查了一下，说这个地址你去问负责核心区的钱处长吧。门卫大爷又给钱处长打过去电话，钱处长说这个地址我也不掌握啊，你去问一下负责景山片区的科员小孙吧。门卫大爷从小孙那里终于知道了北海公园地址，他赶紧记到自己的小本本上，然后把结果告诉了市民 A 先生。接下来一小时内，如果还有市民 B 先生再来问北海公园的话，门卫大爷就直接用笔记本上记载的结果回复了。当然，如果市民 C 女士过来问别的地址的话，门卫大爷就要把处理 A 先生问询的流程再走一遍了。</p><h2 id="2-3：分级查询实例"><a href="#2-3：分级查询实例" class="headerlink" title="2.3：分级查询实例"></a>2.3：分级查询实例</h2><p>举个例子来说明域名解析的分级查询。比如，现在我在谷歌浏览器的地址栏输入一个网址<code>https://news.qq.com</code>，那么浏览器会从接收的URL中抽取出域名字段(<code>news.qq.com</code>)，然后将它传给DNS客户端(操作系统提供的)来解析。</p><p>在Linux系统中，<code>/etc/resolv.conf</code>文件中，制定了本地DNS服务器的地址，Windows系统会有所不同：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> cat /etc/resolv.conf</span><br><span class="line">nameserver 202.106.0.20</span><br><span class="line">nameserver 202.106.196.115</span><br></pre></td></tr></table></figure><p>然后我们用dig工具查看一下new.qq.com的解析结果(其中中文部分是解释说明)：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> dig news.qq.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; news.qq.com</span><br><span class="line">这是 dig 程序的版本号与要查询的域名</span><br><span class="line"></span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">以下是要获取的内容。</span><br><span class="line"></span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 47559</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line">这个是返回应答的头部信息：</span><br><span class="line">1. opcode：操作码，QUERY 代表查询操作；</span><br><span class="line">2. status: 状态，NOERROR 代表没有错误;</span><br><span class="line">3. id：编号，在 DNS 协议中通过编号匹配返回和查询；</span><br><span class="line">4. flags: 标志，含义如下:</span><br><span class="line">   - qr：query，查询标志，代表是查询操作</span><br><span class="line">   - rd：recursion desired，代表希望进行递归查询操作;</span><br><span class="line">   - ra：recursive available，代表查询的服务器支持递归查询操作;</span><br><span class="line">5. QUERY 查询数，与下面 QUESTION SECTION 的记录数一一对应；</span><br><span class="line">6. ANSWER 结果数，与下面的 ANSWER SECTION 的记录数一一对应；</span><br><span class="line">7. AUTHORITY 权威回复数，如果查询结果由管理域名的域名服务器而不是缓存服务器提供的，则称为权威回复。</span><br><span class="line">             0 表示所有结果都不是权威回复；</span><br><span class="line">8. ADDITIONAL 额外记录数；</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;news.qq.com.INA</span><br><span class="line">查询部分,从左到右部分意义如下:</span><br><span class="line">1、要查询的域名；</span><br><span class="line">2、要查询信息的类别，IN 代表类别为 IP 协议，即 Internet。</span><br><span class="line">3、查询的记录类型，A 记录(Address)代表要查询 IPv4 地址。</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">news.qq.com.136INCNAMEhttps.qq.com.</span><br><span class="line">https.qq.com.476INA125.39.52.26</span><br><span class="line">回应部分，从左到右各部分意义：</span><br><span class="line">1、对应的域名</span><br><span class="line">2、TTL，time to live，缓存时间，单位秒，代表缓存域名服务器可以在缓存中保存的期限。</span><br><span class="line">3、查询信息的类别</span><br><span class="line">4、查询的记录类型，CNAME 表示别名记录，A 记录(Address)代表 IPv4 地址。</span><br><span class="line">5、域名对应的 ip 地址。</span><br><span class="line"></span><br><span class="line">;; Query time: 56 msec</span><br><span class="line">;; SERVER: 202.106.0.20<span class="params">#5</span>3(202.106.0.20)</span><br><span class="line">查询使用的服务器地址和端口,其实就是本地 DNS 域名服务器</span><br><span class="line">;; WHEN: Thu Jul 11 15:59:37 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 65</span><br><span class="line">查询的时间与回应的大小，收到 65 字节的应答数据。</span><br></pre></td></tr></table></figure><p>从这个结果可以看到，我们得到的结果不是权威回复，只是本地DNS服务器从缓存中给出的答案。</p><p>接下来我们在dig命令中新增一个参数<code>+trace</code>，看看完整的分级查询过程：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> dig +trace news.qq.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace news.qq.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.432944INNSg.root-servers.net.</span><br><span class="line">.432944INNSk.root-servers.net.</span><br><span class="line">.432944INNSb.root-servers.net.</span><br><span class="line">.432944INNSh.root-servers.net.</span><br><span class="line">.432944INNSi.root-servers.net.</span><br><span class="line">.432944INNSf.root-servers.net.</span><br><span class="line">.432944INNSd.root-servers.net.</span><br><span class="line">.432944INNSe.root-servers.net.</span><br><span class="line">.432944INNSj.root-servers.net.</span><br><span class="line">.432944INNSl.root-servers.net.</span><br><span class="line">.432944INNSc.root-servers.net.</span><br><span class="line">.432944INNSm.root-servers.net.</span><br><span class="line">.432944INNSa.root-servers.net.</span><br><span class="line">;; Received 228 bytes from 202.106.0.20<span class="params">#5</span>3(202.106.0.20) in 45 ms</span><br><span class="line">这些就是神秘的根域名服务器，由本地 DNS 服务器返回了所有根域名服务器地址。</span><br><span class="line"></span><br><span class="line">com.172800INNSg.gtld-servers.net.</span><br><span class="line">com.172800INNSa.gtld-servers.net.</span><br><span class="line">com.172800INNSb.gtld-servers.net.</span><br><span class="line">com.172800INNSm.gtld-servers.net.</span><br><span class="line">com.172800INNSd.gtld-servers.net.</span><br><span class="line">com.172800INNSc.gtld-servers.net.</span><br><span class="line">com.172800INNSj.gtld-servers.net.</span><br><span class="line">com.172800INNSh.gtld-servers.net.</span><br><span class="line">com.172800INNSf.gtld-servers.net.</span><br><span class="line">com.172800INNSl.gtld-servers.net.</span><br><span class="line">com.172800INNSe.gtld-servers.net.</span><br><span class="line">com.172800INNSk.gtld-servers.net.</span><br><span class="line">com.172800INNSi.gtld-servers.net.</span><br><span class="line">;; Received 1171 bytes from 192.36.148.17<span class="params">#5</span>3(i.root-servers.net) in 57 ms</span><br><span class="line">这里显示的是 .com 域名的 13 条 NS 记录，本地 DNS 服务器向这些顶级域名服务器发出查询请求，</span><br><span class="line">询问 qq.com 的 NS 记录。</span><br><span class="line"></span><br><span class="line">qq.com.172800INNSns1.qq.com.</span><br><span class="line">qq.com.172800INNSns2.qq.com.</span><br><span class="line">qq.com.172800INNSns3.qq.com.</span><br><span class="line">qq.com.172800INNSns4.qq.com.</span><br><span class="line">;; Received 805 bytes from 192.48.79.30<span class="params">#5</span>3(j.gtld-servers.net) in 331 ms</span><br><span class="line">这里显示的是 qq.com 的 4 条 NS 记录，由 j.gtld-servers.net 这台服务器最先返回。</span><br><span class="line">然后本地 DNS 服务器向这四台服务器查询下一级域名 news.qq.com 的 NS 记录。</span><br><span class="line"></span><br><span class="line">news.qq.com.86400INNSns-cnc1.qq.com.</span><br><span class="line">news.qq.com.86400INNSns-cnc2.qq.com.</span><br><span class="line">;; Received 180 bytes from 58.144.154.100<span class="params">#5</span>3(ns4.qq.com) in 37 ms</span><br><span class="line">这里显示的是 news.qq.com 的 NS 记录，它们是由上面的 ns4.qq.com 域名服务器返回的。</span><br><span class="line">然后本地 DNS 服务器向这两台机器查询 news.qq.com 的主机名。</span><br><span class="line"></span><br><span class="line">news.qq.com.600INCNAMEhttps.qq.com.</span><br><span class="line">https.qq.com.600INA125.39.52.26</span><br><span class="line">;; Received 76 bytes from 223.167.83.104<span class="params">#5</span>3(ns-cnc2.qq.com) in 29 ms</span><br><span class="line">这是上面的 ns-cnc2.qq.com 返回的最终查询结果：</span><br><span class="line">news.qq.com 是 https.qq.com 的别名，而 https.qq.com 的 A 记录地址是 125.39.52.26</span><br></pre></td></tr></table></figure><p><font color=red><strong>总结</strong></font>：</p><p>实际的流程里面，本地 DNS 服务器相当于门卫大爷，根域名服务器相当于局长同志，其余以此类推。客户端与本地 DNS 服务器之间的查询叫递归查询，本地 DNS 服务器与其他域名服务器之间的查询就叫迭代查询。</p><h2 id="2-4：域名记录类型"><a href="#2-4：域名记录类型" class="headerlink" title="2.4：域名记录类型"></a>2.4：域名记录类型</h2><p>域名服务器之所以能知道域名与 IP 地址的映射关系，是因为我们在域名服务商那里提交了域名记录。我们购买了一个域名后，需要在域名服务商那里设置域名解析的记录，域名服务商把这些记录推送到权威域名服务器，这样我们的域名才能正式生效。在添加域名记录时，会遇到<code>A 记录</code>、<code>CNAME记录</code> 等不同类型，这些类型是什么意思，它们之间又有什么关系和区别呢？</p><ul><li><p><font color=red><strong>A 记录</strong></font>：</p><p>A记录用来直接指定主机名(或域名)对应的IP地址。常见有如下几种：</p><ul><li><font color=blue>www</font>：解析后的域名为 <code>www.yourdomain.com</code>，一般用于网站地址；</li><li><font color=blue>@</font>：直接解析主域名；</li><li><font color=blue>*</font>：泛解析，指将 <code>.yourdomain.com</code> 解析到同一 IP；</li></ul></li><li><p><font color=red><strong>CNAME 记录</strong></font></p><p>CNAME的全称是<strong>Canonical Name</strong>，通常称别名记录。如果需要将域名指向另一个域名，再由另一个域名提供IP地址，就需要添加CNAME记录。</p></li><li><p>MX 记录</p><p>邮件交换记录，用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。</p></li><li><p>NS 记录</p><p>域名服务器记录，如果需要把子域名交给其他 DNS 服务器解析，就需要添加 NS 记录。</p></li><li><p>AAAA 记录</p><p>用来指定主机名（或域名）对应的 IPv6 地址，不常用。</p></li><li><p>TXT 记录</p><p>可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件），MX 记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF 的作用跟 MX 相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。</p></li><li><p>显性 URL</p><p>从一个地址 301 重定向（也叫「永久性转移」）到另一个地址的时候，就需要添加显性 URL 记录。</p></li><li><p>隐性 URL</p><p>从一个地址 302 跳转（也叫「临时跳转」）到另一个地址，需要添加隐性 URL 记录。它类似于显性 URL，区别在于隐性 URL 不会改变地址栏中的域名。</p></li></ul><p>在填写各种记录的时候，我们还会碰到一个特殊的设置项——<code>TTL</code>，生存时间（Time To Live）。</p><p><code>TTL</code>表示解析记录在 DNS 服务器中的缓存时间，时间长度单位是秒，一般为3600秒。比如：我们在访问<code>news.qq.com</code>时，如果在 DNS 服务器的缓存中没有该记录，就会向某个 NS 服务器发出请求，获得该记录后，该记录会在 DNS 服务器上保存<code>TTL</code>的时间长度，在<code>TTL</code>有效期内访问<code>news.qq.com</code>，DNS 服务器会直接缓存中返回刚才的记录。</p><h2 id="2-5：DNS智能解析"><a href="#2-5：DNS智能解析" class="headerlink" title="2.5：DNS智能解析"></a>2.5：DNS智能解析</h2><p>DNS主要的工作就是完成域名到 IP 的映射，但是也不是简单到查查字典就可以搞定的程度。在设置 DNS 解析的时候，我们还有一些额外的需求，例如：将一个域名解析到多个 IP！</p><p>例如我们一个网站有多台前端机，希望用户访问的时候，可以随机分散到这些机器上，以增加网站承载能力。有一种解决的办法就是对同一个域名设置多条 A 记录，分别指定到不同的 IP 上。</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 技术白话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git不使用ignore文件来实现文件忽略</title>
      <link href="/post/10025.html"/>
      <url>/post/10025.html</url>
      
        <content type="html"><![CDATA[<h1 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h1><p>在实际的开发工作中，尤其是在使用 Idea 的过程中，会产生很多新的文件，当然指那么不能或者没必要纳入版本库的文件（比如<code>.iml</code>和<code>.idea</code>文件等），但是每次查看文件状态时都会提示这些文件不在版本库中，比如：</p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116142731666.png"></p><p>正常修改代码后，使用 Idea 提交代码时，修改的文件不会跟这些未纳入版本库的文件在同一个目录：</p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116143237645.png"></p><p>如果我们仅仅是修改代码（不新增文件），那么在提交代码的时候还是比较明确的，只需要关注修改的文件即可！</p><p>但是假如你新增了一个文件的话，比如我新增了一个名为<code>test.java</code>的文件，那么在提交代码时：</p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116145138773.png"></p><p>有人肯定会说：为什么不在<code>.gitignore</code>文件中将那些不需要纳入版本控制的文件忽略掉呢？？？第一：我们的项目代码中没有<code>.gitignore</code>文件，至于为什么没有我不清楚，反正我也不想自己去添加一个<code>.gitignore</code>文件；第二：实际上仅仅添加一个或几个文件的话，其实可以用终端执行命令<code>git add &lt;文件名&gt;</code>来实现，但是我认为既然都用图形界面了，没必要再混用命令了吧！</p><p>那么，怎么才能在不给项目添加<code>.gitignore</code>文件的同时，实现文件的忽略呢？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="方式一：项目级别忽略"><a href="#方式一：项目级别忽略" class="headerlink" title="方式一：项目级别忽略"></a>方式一：项目级别忽略</h2><p>我们知道，项目级别的忽略是需要在项目中添加<code>.gitignore</code>文件来实现的，但是 Git 也提供了另外一种解决方案，让用户在不使用<code>.gitignore</code>文件的同时，同样实现项目级别的文件忽略，这就是<code>exclude</code>！</p><p>不同的是：<code>.gitignore</code>这个文件本身会被提交到项目版本库中去，用来保存的是公共的需要排除的文件，也就是每个项目参与者都要排除的文件；而<code>.git/info/exclude</code>这里设置的则是你自己本地需要排除的文件，不会影响到其他人，也不会提交到版本库中去！</p><p>如想要忽略项目中所有的<code>.iml</code>文件以及<code>.log</code>文件等，需要在项目根目录下的<code>.git/info/exclude</code>中添加如下内容：</p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116163102974.png"></p><p>这样就可以直接忽略掉项目中的这些文件了！</p><h2 id="方式二：全局级别忽略"><a href="#方式二：全局级别忽略" class="headerlink" title="方式二：全局级别忽略"></a>方式二：全局级别忽略</h2><p>Git 还提供了另外一个在不添加<code>.gitignore</code>文件的前提下进行全局忽略的解决方案（这个忽略对本机所有的版本库都有效）：在用户目录下创建一个文件，在文件中编辑忽略规则！具体的操作步骤如下（以 Windows 系统为例）。</p><p><font color="DC143c">**第一步：在用户目录下创建<code>.gitignore_global</code>**文件</font></p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116151614795.png"></p><p><font color="DC143c"><strong>第二步：按照正常<code>.gitignore</code>文件的写法，编辑需要全局忽略的文件</strong></font></p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116155210741.png"></p><p>这里的设置，就是忽略所有名为<code>rebel.xml</code>的文件！</p><p><font color="DC143c"><strong>第三步：打开Dos并执行如下命令</strong></font>（没报错就表示执行成功了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile .gitignore_global</span><br></pre></td></tr></table></figure><p><font color="DC143c"><strong>第四步：验证，接着在Dos中执行如下命令</strong></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>当发现输出结果中多出了一条如下配置，说明配置成功：</p><p><img src="https://www.czblogs.cn/posts/tools/05/image-20240116155624282.png"></p><p>这样一来，Git 就会全局忽略掉名为<code>rebel.xml</code>的文件了！</p><h1 id="总结归纳"><a href="#总结归纳" class="headerlink" title="总结归纳"></a>总结归纳</h1><p>以上两种不添加<code>.gitignore</code>文件的同时实现文件忽略的方式，我更推荐第一种<code>exclude</code>方式，这种方式不仅影响范围小（只对具体的版本库有效），而且操作简单（不用新增文件和执行命令）！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ Idea </tag>
            
            <tag> Git </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建私人的ChatGPT应用</title>
      <link href="/post/10024.html"/>
      <url>/post/10024.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><p>当前，AI（人工智能）已经被炒得如火如荼，其实在生活中你肯定已经见过很多的人工智能技术，最常见的小爱同学和天猫精灵等就是最典型的例子。当然，ChatGPT 也是人工智能的产物，它的出现将人工智能的发展推上了顶峰，让 AI 以更加大众化的形象展现在世人的面前！</p><h2 id="1-1：它是什么"><a href="#1-1：它是什么" class="headerlink" title="1.1：它是什么"></a>1.1：它是什么</h2><p>它的全称是 Chat Generative Pre-trained Transformer，是由<a href="https://baike.baidu.com/item/OpenAI/19758408">OpenAI</a>公司开发的一款强大的人工智能聊天机器人。它利用基于神经网络的机器学习模型，可以根据前面单词的上下文预测序列中的下一个单词，从而生成类似人类的文本。自发布以来已有数百万用户注册了 ChatGPT，它可以以帮助人们做很多事情，例如快速回答问题、编写和调试计算机程序等。</p><p>ChatGPT 是人工智能技术驱动的自然语言处理工具，ChatGPT 能够通过理解和学习人类的语言来进行对话，还能根据聊天的上下文进行互动，真正像人类一样来聊天交流，甚至能完成撰写邮件、视频脚本、文案、翻译、代码、写论文等等任务，正是由于其极大程度的“智能”，所以才会在诞生之日就在全世界范围内引起了极大的反应。</p><h2 id="1-2：为何被禁"><a href="#1-2：为何被禁" class="headerlink" title="1.2：为何被禁"></a>1.2：为何被禁</h2><p>这里说的“被禁”只是在部分国家和地区被禁止使用，并非完全被禁。最先对它下手的是意大利，2022 年 3 月 31 日，意大利个人数据保护局宣布将暂时禁止使用聊天机器人 ChatGPT，以就 ChatGPT 涉嫌违反数据收集规则展开调查，并限制 其公司 OpenAI 处理意大利用户数据。这也只是 ChatGPT 被禁用的开始，从这时开始，世界上的很多国家&#x2F;地区都宣布禁用 ChatGPT。我们可以查看其支持的<a href="https://platform.openai.com/docs/supported-countries">国家列表</a>，中国大陆和香港均不在该名单上！</p><p>那么为什么这么多国家都要对 ChatGPT 发布禁令呢？我们先来看一下三个比较典型的案例：</p><ul><li>2022 年 5 月份，苹果因数据安全问题禁止员工使用 ChatGPT 等 AI 工具；</li><li>三星也被坑过，部分员工在进行软件测试的时候，把出问题的代码发给 ChatGPT 请教解决办法。这个操作让三星的一部分源代码变成了 ChatGPT 的学习资料，估计三星自己都没想到还能这样泄密。更严重的是三星大概率还没有办法追回或者彻底删除这些机密数据。它们已经被储存在 OpenAI 的服务器里，被训练到了 AI 的算法中。这类模型很难删除个人信息的所有痕迹，追踪溯源的难度更大；</li><li>2022 年 1 月初，纽约市教育部宣布禁止学生在其学校的设备和网络上使用它，以此来预防学生在诸如考试的过程中进行作弊。同时在欧洲，巴黎政治学院率先行动禁止各校区全体学生及教职工利用 ChatGPT 完成教学任务。在澳大利亚，新南威尔士州、昆士兰州、西澳洲和塔斯马尼亚州等多个州已宣布禁止在校内使用 ChatGPT。在是否禁用 ChatGPT 这一问题上，学生们的观点相对一致：72% 的大学生认为应该在学校网络中禁止 ChatGPT！它可能会导致学生实际上并不是在学习材料，而是依靠机器为他们做工作，这会导致批判性思维和分析能力的进一步贬值；</li></ul><p>整个人工智能领域的发展都会因此种种而产生深远的影响。被禁事件还表明，在人工智能的发展过程中，有必要建立一个可信赖和透明的机制，以便监管和解决人工智能可能带来的问题。这样，就可以避免 ChatGPT 这种事件再次发生。</p><p>对此，中国人民大学未来法治研究院执行院长张吉豫说道，为调节好发展和安全之间的冲突，构建以人民为中心的智能社会法律秩序，对于推动人工智能技术健康有序发展具有重要意义。</p><h2 id="1-3：一个故事"><a href="#1-3：一个故事" class="headerlink" title="1.3：一个故事"></a>1.3：一个故事</h2><p>不管是在什么领域，既得利益者都要去打击新技术（ChatGPT）来保持自己的优势地位，但由于落后就要挨打的铁律，很多人都是“心口不一”！这里就不得不提大名鼎鼎的马斯克了。</p><p>作为 ChatGPT 的先驱者，他在 2018 年离开了 OpenAI，对外宣称是为了避免跟特斯拉产生利益冲突，实则是因为夺权失败，感兴趣的小伙伴可以自己去了解一下。</p><p>之后，ChatGPT 3.0 发布并风靡全球，接着发生了一些上述“被禁事件”，然后马斯克联合千名科学家写公开信呼吁暂停 GPT 4 以上版本的开发，信中写道：“当代 AI 系统正在成为通用任务的人类竞争对手，我们必须问自己：我们应该让机器用宣传和虚假信息充斥我们的信息渠道吗？我们应该将所有工作自动化消除吗，包括那些有意义的工作？我们应该开发非人类的思维，这些思维最终可能超过、取代我们吗？我们应该冒险失去对我们文明的控制吗？在我们确信强大的人工智能系统的效果将是积极的，风险是可控的之后，才应该开发这些系统。”</p><p>话虽这么说，但马斯克转眼就投入巨资购入万块 GPU，全力投入 GPT 的开发，包括谷歌、百度、阿里等一大批业界知名企业也纷纷投入人工智能的创业热潮中。毕竟在全球人工智能竞赛升温和诱人发展机遇的当下，对大型科技公司来说，更实际的是如何在这波技术浪潮中保持核心竞争力，来巩固自己的优势地位。</p><h2 id="1-4：它的成本"><a href="#1-4：它的成本" class="headerlink" title="1.4：它的成本"></a>1.4：它的成本</h2><p>GPT-3 训练一次的成本大概为 140 万美元，针对一些更大的 LLM（大型语言模型），训练成本介于 200 万美元到 1200 万美元之间，ChatGPT 保持正常运行的成本约为 700 万 美元，每日光电费消耗就在 5 万美元左右。</p><p>目前对外开放的有两个版本：</p><ul><li><code>GPT 3.5</code>：每个注册用户的账户内有5美元余额供用户使用，使用完以后则需要绑定信用卡进行账单付款，但是官方有明确说明，不保证服务的可用性，如果算力压力过大，首先限流此部分用户；</li><li><code>GPT 4.0</code>：目前因为算力问题，该版本仅供 plus 会员使用，费用为每个月20美元，网页使用的话目前限制每3小时25次；</li></ul><h2 id="1-5：如何使用"><a href="#1-5：如何使用" class="headerlink" title="1.5：如何使用"></a>1.5：如何使用</h2><p>使用 ChatGPT 有两种方式，一是网页版应用，二是通过 API key 将其集成到软件中来使用。第二种方式需要使用者拥有一个可用的 key（网上搜索的 key 大多已被禁用），获取方式大家可以自行搜索，我这里只提供官方的获取方式！</p><h1 id="第二节：使用官网"><a href="#第二节：使用官网" class="headerlink" title="第二节：使用官网"></a>第二节：使用官网</h1><p>使用官网网页版的 ChatGPT 是最简单直接的方式，但是由于网络限制，这种方式基本不可取。但是假如你会科学上网或者有一个比较好的 VPN 的话，那就另当别论了！（其实即使你有一个 VPN，也不能保证你在任何地点任何设备上都能使用 ChatGPT，因为你的 VPN 不会一直都存在于你当前使用的设备上）</p><p>注意：我这里讲述的用法是基于你可以进行科学上网的，当然你可以科学上网，就没必要瞎折腾了，官网用起来非常香！</p><h2 id="2-1：注册账号"><a href="#2-1：注册账号" class="headerlink" title="2.1：注册账号"></a>2.1：注册账号</h2><p>访问 <a href="https://chat.openai.com/auth/login">ChatGPT</a> 登陆页：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190123386.png"></p><p>点击<code>Sign up</code>按钮，注册一个账号，我这里选择使用谷歌账号来注册，此时会进行人机验证：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190258555.png"></p><p>然后打开谷歌邮箱验证一下，最后再验证一下手机号（必须是国外手机号）！最后完成注册时是这样的：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190332523.png"></p><p>至此，我们就可以在这个网页上跟 ChatGPT 进行对话了，这个就是 ChatGPT 的官方 APP！</p><h2 id="2-2：版本区别"><a href="#2-2：版本区别" class="headerlink" title="2.2：版本区别"></a>2.2：版本区别</h2><p>从这里我们可以看到，ChatGPT 有两个版本，分别是 3.5 和 4.0（也就是 ChatGPT Plus）！实际上这两个版本之间的差距还是蛮大的，最明显的区别就是前者是免费的，后者是收费的！此外，下面这张图能很好的说明它们之间的区别：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190442575.png"></p><p>我个人感觉 ChatGPT 3.5 就已经够用了，而且 3.5 比 4.0 的响应速度更快，如果不打算付费（每个月 20 美刀）的话，就直接使用 3.5 即可！</p><h1 id="第三节：使用-API"><a href="#第三节：使用-API" class="headerlink" title="第三节：使用 API"></a>第三节：使用 API</h1><p>ChatGPT 的官方网站对外提供了 ChatGPT API（即 ChatGPT 接口），它可以让使用者将 ChatGPT 集成到自己的应用程序中使用，比如 Chrome 和 VSCode 等。我选择的是使用 Github 上的开源项目，这个开源项目可以通过 Vercel 将其一键部署成一个网页应用，然后将 API 集成到该网页中，这样就可以在任何地方访问这个网站，以此实现 ChatGPT 的使用！</p><p>注意：在搭建的过程中需要科学上网（翻墙），一旦完成部署以后就不再需要了！</p><h2 id="3-1：项目介绍"><a href="#3-1：项目介绍" class="headerlink" title="3.1：项目介绍"></a>3.1：项目介绍</h2><p><a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a> 是一个基于 TypeScript 编写的开源项目，可用于一键部署你的私人 ChatGPT 网页应用！</p><p>主要功能：</p><ul><li>在一分钟内使用 Vercel 免费一键部署；</li><li>完整的 Markdown 支持：LaTex 公式、Mermaid 流程图、代码高亮等；</li><li>精心设计的 UI，响应式设计，支持深色模式，支持 PWA；</li><li>极快的首屏加载速度（~100kb），支持流式响应；</li><li>隐私安全，所有用户数据都保存在浏览器本地；</li><li>预置角色功能（面具），方便地创建、分享和调试你的个性化对话；</li><li>海量内置的 prompt 列表，来自中文和英文；</li><li>自动压缩上下文聊天记录，在节省 Token 的同时支持超长对话；</li><li>多国语言支持；</li><li>可以绑定自己的域名，绑定以后即可在任何地方无障碍地使用而无需借助 VPN；</li></ul><h2 id="3-2：获取-API"><a href="#3-2：获取-API" class="headerlink" title="3.2：获取 API"></a>3.2：获取 API</h2><p>我们并不能通过 ChatGPT APP 本身来获取密钥，也不能通过直接询问 ChatGPT 来获取 API，而是在 openAI 的官网上！</p><p>浏览器访问 openAI 的官网：<a href="https://openai.com/">https://openai.com</a></p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190541749.png"></p><p>点击右上角的<code>log in</code>，然后用我们前面注册 ChatGPT 的账号来登陆，登陆进去以后，点击<code>API</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190656564.png"></p><p>接着点击左上角的<code>Personal</code>，点击<code>View API keys</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190746131.png"></p><p>此时会显示<code>You currently do not have any API keys</code>，点击<code>+ Create new secret key</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190856533.png"></p><p>然后输入密钥的名称（任意名称都可以，比如我这里输入的是<code>MyGPT</code>），最后点击生成按钮：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012190908872.png"></p><p>如此以来就生成了<code>API key</code>，也就是密钥，这里先把密钥保存下来，后面会用到！</p><h2 id="3-3：注册账号"><a href="#3-3：注册账号" class="headerlink" title="3.3：注册账号"></a>3.3：注册账号</h2><p>注册自己的 Vercel 账号，这部分就不废话了，可以参考我这篇文章——<a href="https://www.fattymonkey.com/post/1173101312.html">《Github + Vercel搭建免费的个人图床》</a>，其中的 3.2 中有详细记录（注意绑定自己的 Github 账号）！</p><h2 id="3-4：一键部署"><a href="#3-4：一键部署" class="headerlink" title="3.4：一键部署"></a>3.4：一键部署</h2><p>返回到 Github 的 <a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a> 项目中，在 readme 中找到如下位置：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231012191004914.png"></p><p>点击上图中的<code>Deploy</code>按钮，然后跳转到 Vercel 网站（提前登陆），修改仓库名（不修改也可以）后点击<code>Create</code>按钮：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231102225413433.png"></p><p>然后将前面获取的 API 复制进 OPENAI_API_KEY，再自己设置一个 CODE（这个就是后面使用 ChatGPT 的登陆密码）：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231102225754713.png"></p><p>点击上图中的<code>Deploy</code>后，就会自动部署了，稍等几分钟后，当页面撒花时，就是部署成功了：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231102231453644.png"></p><h2 id="3-5：测试功能"><a href="#3-5：测试功能" class="headerlink" title="3.5：测试功能"></a>3.5：测试功能</h2><p>此时，点击右上角的<code>Continue to Dashboard</code>（前往控制台），进入控制台：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231102231702849.png"></p><p>上图中的<code>Domains</code>中给出了两个链接，点击任意一个即可进入：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231102231938039.png"></p><p>点击上图中的<code>登陆</code>，输入前面设置的密码（即部署时设置的 CODE），然后就可以使用了：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231102232201934.png"></p><h2 id="3-6：绑定域名"><a href="#3-6：绑定域名" class="headerlink" title="3.6：绑定域名"></a>3.6：绑定域名</h2><p>由于网络限制，在中国大陆境内无法直接访问 Vercel 提供的<code>.app</code>域名，解决方案就是使用自己购买的域名来指向这个域名，以此来实现代理，这样就可以访问了！</p><p>关于这部分操作，我就不赘述了，可以参考我这篇文章——<a href="https://www.fattymonkey.com/post/1173101312.html">《Github + Vercel搭建免费的个人图床》</a>，其中的 3.2 中有详细记录（注意绑定自己的 Github 账号）！</p><p>之后，我们在国内的任何地点任何时间，只要能联网，就可以通过访问自己的域名来使用网页版的 ChatGPT 了！</p><h1 id="第四节：个性设置"><a href="#第四节：个性设置" class="headerlink" title="第四节：个性设置"></a>第四节：个性设置</h1><p>上面的页面是通过<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a>生成的，这个页面基本上都是默认的设置，这里我们需要自己进行个性化设置！</p><h2 id="4-1：克隆仓库"><a href="#4-1：克隆仓库" class="headerlink" title="4.1：克隆仓库"></a>4.1：克隆仓库</h2><p>首先需要将此时存在于远程 Github 上的仓库克隆到本地，这样我们就可以在本地修改文件、代码、图片，然后通过推送来自动部署！比如我就是将其克隆到我本地桌面的<code>repository</code>文件夹中，克隆下的文件内容如下：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231103001020437.png"></p><h2 id="4-2：修改颜色"><a href="#4-2：修改颜色" class="headerlink" title="4.2：修改颜色"></a>4.2：修改颜色</h2><p>默认的 ChatGPT-Next-Web 主题颜色有深浅两种模式，并且颜色不是很美观，我打算把它的颜色设置成跟我的主题风格接近的样子。</p><p>打开项目根目录下的<code>/app/styles/global.scss</code>文件，在其中修改自己喜欢的颜色设置即可（这里深浅两种模式的颜色设置还是比较复杂的，想要设置成跟自己的主题颜色完全一致的风格还是很难的，简单折腾一下就行了）。</p><h2 id="4-3：修改信息"><a href="#4-3：修改信息" class="headerlink" title="4.3：修改信息"></a>4.3：修改信息</h2><p>网页的标题和信息都可以修改，打开根目录下的<code>/app/layout.tsx</code>文件，修改其中的信息即可：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231103230113309.png"></p><p>打开根目录下的<code>/app/components/sidebar.tsx</code>文件，找到下面的内容：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;styles[<span class="string">&quot;sidebar-header&quot;</span>]&#125; data-tauri-drag-region&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">sidebar-title</span>&quot;]&#125; <span class="attr">data-tauri-drag-region</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ChatGPT Next</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">sidebar-sub-title</span>&quot;]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    Build your own AI assistant.</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">sidebar-logo</span>&quot;] + &quot; <span class="attr">no-dark</span>&quot;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChatGptIcon</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>比如我修改如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;styles[<span class="string">&quot;sidebar-header&quot;</span>]&#125; data-tauri-drag-region&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">sidebar-title</span>&quot;]&#125; <span class="attr">data-tauri-drag-region</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&quot;Fattymonkey&#x27;s GPT&quot;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">sidebar-sub-title</span>&quot;]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    我自己个人的ChatGPT网站</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&quot;<span class="attr">sidebar-logo</span>&quot;] + &quot; <span class="attr">no-dark</span>&quot;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChatGptIcon</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="4-4：删除图标"><a href="#4-4：删除图标" class="headerlink" title="4.4：删除图标"></a>4.4：删除图标</h2><p>侧边栏底部的 Github 图标指向的是托关于 Github 上的<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a>项目，我们可以将其修改为自己任何想要的地址，同样是在<code>/app/components/sidebar.tsx</code>文件中，搜索并修改<code>REPO_URL</code>的链接地址即可！</p><p>但是我觉得在自己使用的过程中，这个链接压根没有存在的必要，所以我干脆将这个图标隐藏掉！只需要将如下这部分代码删除或注释即可：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;styles[<span class="string">&quot;sidebar-action&quot;</span>]&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;REPO_URL&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">IconButton</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">GithubIcon</span> /&gt;</span>&#125; shadow /&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5：定制问候"><a href="#4-5：定制问候" class="headerlink" title="4.5：定制问候"></a>4.5：定制问候</h2><p>访问网站的时候，默认的欢迎语是这样的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问密码不正确或为空，请前往登录页输入正确的访问密码，或者在设置页填入你自己的 OpenAI API Key。</span><br></pre></td></tr></table></figure><p>我们可以修改这个提示语，打开根目录下的<code>app/locales/cn.ts</code>文件，修改其中的提示语即可，你一看就知道应该修改哪里了，不再赘述！</p><h1 id="第五节：邦信用卡"><a href="#第五节：邦信用卡" class="headerlink" title="第五节：邦信用卡"></a>第五节：邦信用卡</h1><h2 id="5-1：澄清误解"><a href="#5-1：澄清误解" class="headerlink" title="5.1：澄清误解"></a>5.1：澄清误解</h2><p>看到这一节你是不是有点懵，不是说 ChatGPT 3.5 是免费的吗，那为什么还要绑定信用卡呢？使用官网的 ChatGPT 3.5 是免费的，这个版本基于 Turbo 模型，是最快速、最便宜、最灵活的模型。但是，如果您需要其他版本，比如调用 API 接口或者进行其他定制化需求，就需要付费使用。对于新用户（调用 API 使用）而言，它提供了一个免费政策：在三个月之内提供新用户五美元的免费额度，假如你使用的费用超过了五美元或者时间超过了三个月，那么你将不再具备免费使用的权利，必须付费使用！具体的费用是根据你的使用来决定的，总而言之是使用的越多费用越高！</p><h2 id="5-2：收费标准"><a href="#5-2：收费标准" class="headerlink" title="5.2：收费标准"></a>5.2：收费标准</h2><p>先来看一下 ChatGPT 的收费标准是什么，登陆 OpenAI 官网后，点击右上角的<code>Personal</code>，再点击<code>Pricing</code>，可见：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231104004234698.png"></p><p>我们使用的就是 GPT-3.5 Turbo，这个收费是按照输入输出的 tokens 来计费的，至于 tokens 是什么，我觉得知乎上的这篇文章说的比较清楚——<a href="https://zhuanlan.zhihu.com/p/612954797">《ChatGPT的计费方式》</a>，细节部分你们可以自己去研究！</p><h2 id="5-3：你的余额"><a href="#5-3：你的余额" class="headerlink" title="5.3：你的余额"></a>5.3：你的余额</h2><p>点击官网右上角的<code>Personal</code>后，再点击<code>Manage account</code>，然后点击左侧边栏的<code>Billing</code>，可见具体的使用情况：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231104002232139.png"></p><p>假如三个月以后，或者 5 美元的免费额度使用玩以后，再使用 API 的话，就会出现如下报错：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;insufficient_quota&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;param&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;insufficient_quota&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-4：整体思路"><a href="#5-4：整体思路" class="headerlink" title="5.4：整体思路"></a>5.4：整体思路</h2><p>绑定信用卡的操作很繁琐，成功率很低，我主要参考了大神<a href="https://fanjunyang.zone/">范俊阳</a>的<a href="https://blog.fanjunyang.zone/archives/ai-credit-card">《国内申请虚拟信用卡及ChatGPT Plus API Key充值教程》</a>这篇博文，文章介绍的很详细。</p><p>国内的双币卡以及全币卡都无法对 OpenAI 充值和使用，而且在国内无法申请国外的信用卡，并且国外的信用卡也不是都可以被用来充值的。所以，我们只能申请国外的虚拟信用卡（非实体卡，且需要预充金额），并且最好是美国的（能用美国的最好用美国的）。</p><p>因<code>OneKey</code>和<code>Depay</code>等国外虚拟信用卡不支持人民币直接充值，所以我们必须借助交易所来完成，也就是【人民币 -&gt; USDT -&gt; USD美元】的过程。因此想要进行 ChatGPT 充值，一般会有如下四个步骤：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20231105220555331.png"></p><p>USDT 是虚拟货币泰达币，跟 USD 美元锚定的，背后有大而不倒的金融机构担保，理论上来说只要 USD 在它就在，安全性不用太过担心，我们平常用多少充多少就好了，降低风险。</p><h2 id="5-5：注册交易所"><a href="#5-5：注册交易所" class="headerlink" title="5.5：注册交易所"></a>5.5：注册交易所</h2><blockquote><p>声明：交易所的作用有两点，一是我们可以通过充值买币来获取 USDT，二是用 USDT 来充值虚拟信用卡，这样我们就可以完成【人民币 -&gt; 美元】的转换了！</p></blockquote><p><font color='#dc143c'>第一步：注册交易所。</font>交易所主要有两种：欧易和币安。欧易是港股上市，国内最大的数字&#x2F;虚拟货币交易所，安全且手续费最低，有返现；而币安主要是服务于国外，所以国内建议使用欧易！打开<a href="https://www.okx.com/cn">欧易官网</a>进行注册，比如我这里选择的是使用 Google 账号来注册的（选择居住地区是中国），注册成功以后，需要进行实名认证，否则无法购买或充值数字货币！</p><p><font color='#dc143c'>第二步：实名认证。</font>但是在实名认证的过程中，会提示你扫码下载 APP 来完成认证，而中国的 Apple ID 无法下载欧易 APP，所以需要你自己注册一个国外的 Apple ID，然后用手机登陆后扫码下载欧易 APP，下载下来以后，登陆并进行实名认证即可（至于实名认证的过程，我就不赘述了）。</p><p><font color='#dc143c'>第三步：买币充值。</font>最后在 APP 上购买一些 USDT 到自己的账户上，验证一下是否有问题！</p><h2 id="5-6：申请信用卡"><a href="#5-6：申请信用卡" class="headerlink" title="5.6：申请信用卡"></a>5.6：申请信用卡</h2><blockquote><p>这一步就是申请虚拟信用卡了，开通信用卡是为了将其绑定到 ChatGPT 上来进行充值扣款的，信用卡的账单地址一定要要跟你操作时的 IP 地址相匹配，否则很容易就会被拒（最好使用美国的真实地址）。</p></blockquote><p><font color='#dc143c'>第一步：注册 Dupay。</font>Dupay（原名Depay）是一款虚拟货币钱包，它可以管理你的比特币、USDT 等数字货币。在 Depay 上还可以申请虚拟信用卡，支持将 USDT 充值到虚拟信用卡，该信用卡可以绑定到微信、支付宝、美团等，然后直接消费，也可以用虚拟信用卡来绑定 ChatGPT。</p><p>我原本是打算使用 OneKey 的，但是从 2023 年 10 月 31 号开始，OneKey 在实名认证的过程中不再支持中国的用户认证，也就是说不支持中国的用户使用了，所以我只能放弃，转而选择 Depay！</p><p><font color='#dc143c'>第二步：申请信用卡。</font>想要申请 Dupay 的信用卡，首先需要下载它的 APP，然后在 APP 上面申请信用卡。然而在苹果的 App Store 中，只有海外的账号才能下载，所以首先先申请一个海外的 Apple ID，才能下载这个 App。</p><p>点击首页左上角的【申请卡】，然后支持 ChatGPT 的 VISA 卡，地区是美国，然后点击【立即开卡】，比如我这里：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240101185539487.png"></p><p>然后会让你选择卡片类型，我在申请的时候有如下类型可供选择：</p><table><thead><tr><th align="center">卡片类型</th><th align="center">KYC（实名认证）</th><th align="center">开卡费（USDT）</th><th align="center">月费（USD）</th><th align="center">充值额度（USD&#x2F;月）</th><th align="center">充值手续费</th><th align="center">消费手续费</th></tr></thead><tbody><tr><td align="center">Lite</td><td align="center">N</td><td align="center">30</td><td align="center">2</td><td align="center">5000</td><td align="center">2.5%</td><td align="center">0.0%</td></tr><tr><td align="center">标准卡</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">高级卡</td><td align="center">Y</td><td align="center">20</td><td align="center">0.5</td><td align="center">50000</td><td align="center">1.6%</td><td align="center">0.0%</td></tr><tr><td align="center">白金卡</td><td align="center">Y</td><td align="center">50</td><td align="center">0</td><td align="center">200000</td><td align="center">1.4%</td><td align="center">0.0%</td></tr><tr><td align="center">黑金卡</td><td align="center">Y</td><td align="center">Airdrop(限时免费)</td><td align="center">0</td><td align="center">500000</td><td align="center">1.2%</td><td align="center">0.0%</td></tr></tbody></table><p>标准卡已经下架，现有的标准卡可以继续使用。通过对比发现，最好是开高级卡，这个高级卡的开卡费较低，后续使用产生的手续费也比较少，唯一的麻烦点就在于它是需要进行 KYC（实名认证）的，但是这个实名认证比较简单。</p><p>选择开通高级卡，点击【支付开卡费】，进入实名认证，填写信息和身份证照片后，点击【下一步】，然后根据屏幕的提示录制一个视频，就完成了 YKC，稍等 5-10 分钟后就完成了！</p><p>不知道为什么，我过了较长时间后，在【卡】这边还是没显示我申请的信用卡：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240101200849540.png"></p><p>打开【我的】&gt;【安全中心】&gt;【身份认证】，可见此时身份认证是通过的：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240101200627881.png"></p><p>我猜测是因为没有充值，账户上没有足够的开卡费用，所以导致卡开失败，于是我先给欧易充值了 30 USDT 后（最好多充值一些，因为后面激活卡片时，起步需要充值 30 美元），然后将 USDT 充值到 Dupay 钱包中，再一次发起了开卡申请，然后就成功了：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240101205515365.png"></p><p><font color='#dc143c'>第三步：激活信用卡。</font>申请下来的信用卡需要激活，点击上图中的【激活卡片】，此时显示【请充值激活卡片】，也就是说只要给卡片充值的话，就可以将其激活！点击上图中的【充值】，只需要将开卡剩下的大概 10 USDT 转为 USD 后，再使用这些 USD 充值即可（但是起步需要充值 30 USD，所以前面第二步最好多充一些，否则短期内连续充值会被限制，假如被限制了，可以去申诉）！</p><p>最后，我给我的虚拟信用卡上面充值了大约 30 美元的金额：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109210143944.png"></p><h2 id="5-7：绑定信用卡"><a href="#5-7：绑定信用卡" class="headerlink" title="5.7：绑定信用卡"></a>5.7：绑定信用卡</h2><p>信用卡激活了以后，下面要做的就是将信用卡绑定到 ChatGPT 的 Payment 上进行自动扣款，在这一步需要注意的是绑定信用卡时的网络，因为风控限制，所以最好使用美国的网络。</p><p>我当前所在的地理位置是印度的古尔冈（新德里旁边），据我所知 ChatGPT 在印度并没有受限，所以上来我就先在印度用当地网络直接绑定来试一下！</p><p>打开 ChatGPT 官网，还是在<code>Personal</code> &gt; <code>Settings</code> &gt; <code>Billing</code>找到余额（此时我这个账号已经使用超过了三个月的免费试用期，此时余额展示为 0 美元）：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109212114720.png"></p><p>点击<code>Add payment details</code>，再点击<code>Individual</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109212257238.png"></p><p>然后会要求输入信用卡的相关信息：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109214146167.png"></p><p>我这里填写的信息如下（使用的是印度古尔冈的真实地址）：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109215119061.png"></p><p>最后点击<code>Continue</code>，然后设置自动充值，继续点击<code>Continue</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109215525659.png"></p><p>友情提示：这里显示首先充值 5 美元，然后每当 API 余额小于等于 5 美元时，就会自动将其充值到 10 美元！</p><p>最后点击<code>Confirm payment</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109215647136.png"></p><p>当显示<code>Successfully</code>时，就是扣款成功了，并且此时成功充值到 10 美元：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109220632069.png"></p><p>需要注意的是：这里的 10 美元，显示充值了 5 美元，剩下的 5 美元是因为设置的自动充值（小于等于 5 美元）而充值到 10 美元的，所以查看我们的虚拟信用卡，共计有两次消费记录，每次的消费记录如下：</p><p><img src="https://www.czblogs.cn/posts/tools/04/image-20240109220815660.png"></p><p>需要注意的是：多出来的 0.9 美元是税，不知道为什么我信用卡用的邮编是阿拉斯加州（免税州），还是要收取税！我猜测应该是因为我当前用的 Address 是印度的，印度并不免税！建议能翻墙到美国的小伙伴，还是用美国免税州的真实地址比较好！</p><h2 id="5-8：充值的思路"><a href="#5-8：充值的思路" class="headerlink" title="5.8：充值的思路"></a>5.8：充值的思路</h2><p>经过以上乱七八糟的操作以后，现在就只需要给虚拟信用卡充钱就可以保持我的 ChatGPT 网站可以一直使用了！那具体应该充值多少呢？</p><p>以每次给 API 充值 5 美元来说，税费是 0.9 美元，也就一共是 5.9 美元；而往 Dupay 钱包充值的时候还要收取 1.6% 的手续费，所以要给欧易充值 5.9 * (1 + 1.6%) ≈ 6 美元；而每次由欧易转到 Dupay 还要收取 1 美元的手续费，所以说：抛开信用卡的月费而言，单次给 API 充值 5 美元就要至少花费约 7 美元的费用！</p><p>以我在三个月的免费试用期就只使用了 1 美元的使用强度而言，花 7 美元可以用一年！再加上我们不可能每次充值一次 5 美元，因为高级卡要求充值最低是 30 USD，所以：当金额不够的扣款的时候，只需要：<font color='DC143C'>用欧易买 31 美元的 USDT，然后把它全部充值到 Dupay 钱包，然后再充值到 Dupay 信用卡，这样至少够 ChatGPT 自动扣款四次</font>！ </p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
            <tag> Github </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Vercel 搭建免费的个人图床</title>
      <link href="/post/10023.html"/>
      <url>/post/10023.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><h2 id="1-1：各种图床"><a href="#1-1：各种图床" class="headerlink" title="1.1：各种图床"></a>1.1：各种图床</h2><p>经常使用 Markdown 进行文章创作的人，肯定对“图床”这个概念不陌生，拥有个人图床则更是一个刚需！现在市面上的图床产品非常多，有免费的也有收费的，也有一些是“限量免费”的。</p><p>其中收费的有腾讯云和阿里云等云服务商提供的对象存储服务，基本是按流量收费的，费用很低，如果你不想折腾，又不差这点钱，我还是强烈建议使用大厂的对象存储！它们能兼顾稳定性和存取速度！（<font color=red>友情提示</font>：假如你使用这种按流量收费的图床服务并将其中的图片放到自己的网站上的话，一定要处理好安全配置，并配合 CDN 来使用，否则一旦你的网站被攻击恶意刷流量的话，那么可能一觉起来你就欠费上千块了！）</p><p>以七牛云为代表的图床也是不错的，但免费的图床一般都会有空间限制，比如你只有500MB的免费空间，当你图片超过这个免费额度后，就得购买新的空间了。此外，免费的图床还有一个致命的缺点，就是稳定性差！所谓稳定性差，就是有可能会倒闭或者跑路！试想以下，你辛辛苦苦攒的图片，因为图床供应商倒闭了或者跑路了，你的所有图片都会化为泡影！</p><p>免费的和收费的图床各有优劣，我就不再赘述了，我这篇博文主要是用来记录如何使用 Github 来搭建一个免费的图床！</p><h2 id="1-2：Github"><a href="#1-2：Github" class="headerlink" title="1.2：Github"></a>1.2：Github</h2><p>对于免费的图床，我选择的是 Github，使用 Github 搭建图床具备以下优势：</p><ul><li>很稳定，不会跑路，作为全球最大的代码托管平台，这一点毋庸置疑；</li><li>使用自己的仓库来存储图片，图片可以增量快速更新，跨设备管理；</li><li>因为使用 Git 进行上传和下载，可以进行版本管理和查看之前的版本；</li></ul><p>当然，Github 图床也有一些显著的缺点：</p><ul><li>每个仓库限制 1 G，超过这个容量就要新建一个仓库；</li><li>在国内由于网络限制，访问速度很不理想，甚至不能访问，但配合免费公共的 CDN，读取速度还是相当不错的；</li><li>使用 Github 做图床，你就担上了滥用开源的罪名！（<del>当我没说，哈哈</del>）</li></ul><h2 id="1-3：我的选择"><a href="#1-3：我的选择" class="headerlink" title="1.3：我的选择"></a>1.3：我的选择</h2><p>总体而言，使用 Github 做图床还是很可取的，尤其是存放那些经常被访问的图片（毕竟是免费的啊）。比如，在我的博客网站中有很多图片，所有的图片主要分为两类：第一类是网站的背景图等公共图片；第二类是文章中的插图等非公共资源。前者被访问的频率显然要比后者更高，这也就意味着在我的博客网站中公共图片会产生更多的流量。所以，我采取如下策略：首先，将经常被访问的公共图片放在 Github 上，这样就不用为这部分流量付钱了；其次，将非公共图片放到腾讯云的对象存储 COS 中，因为非公共图片被访问的频率低，并且图片较多，可以集成 PicGo 来实现一键上传，重要的是使用对象存储可以显著提供文件的加载速度，省去了配置 CDN 的麻烦。</p><p><font color=red>特别提示</font>：无论你将自己的图片托管在哪个平台上，都应该做好备份，因为只要是第三方的服务，都有可能因为各种各样的原因而失去，谁也不能保证万无一失！</p><h1 id="第二节：具体配置"><a href="#第二节：具体配置" class="headerlink" title="第二节：具体配置"></a>第二节：具体配置</h1><h2 id="2-1：创建仓库"><a href="#2-1：创建仓库" class="headerlink" title="2.1：创建仓库"></a>2.1：创建仓库</h2><p>登录 Github 官网，假如你还没有账号则需要注册一个，然后创建一个仓库，比如我创建的图床仓库：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021205430860.png"></p><p>点击最后的<code>Create repository</code>后，就创建了一个仓库：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021205644236.png"></p><h2 id="2-2：克隆仓库"><a href="#2-2：克隆仓库" class="headerlink" title="2.2：克隆仓库"></a>2.2：克隆仓库</h2><p>在你计算机本地找一个目录，将 Github 上创建的图床仓库克隆下来，比如我将其放在我桌面的<code>repository</code>文件中：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021205919665.png"></p><p>然后本地仓库就生成了：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021211146191.png"></p><h2 id="2-4：上传图片"><a href="#2-4：上传图片" class="headerlink" title="2.4：上传图片"></a>2.4：上传图片</h2><p>此时就可以使用 Git 往这个仓库中推送图片了，但为了方便图片的管理，一般我们会在仓库中创建子目录。比如我先创建了一个名为<code>avatars</code>的文件夹，然后在其中放入了一张名为<code>boy.png</code>的图片（顺便创建<code>.gitignore</code>文件）：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021211333758.png"></p><p><font color=red><strong>友情注意</strong></font>：此时就可以将本地仓库推送到 Github 仓库了！但是第一次提交代码的时候，需要验证用户名和密码，这里用户名输入 Github 的用户名，<font color=red>但密码则不是你的登录密码，而是你仓库的口令——token</font>！因为从 2021 年 8 月 13 日开始，Github 就不再接受密码验证了，转而接受 token！所以为了建立你的计算机和 Github 仓库的通信，你首先需要创建一个口令（假如你不知道如何创建口令，可以参考我的这篇博文<a href="https://www.fattymonkey.com/post/10021.html">《Github使用口令替代密码来进行上传验证》</a>）！</p><p>上传成功以后，可以在 Github 仓库看到上传的资源：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021211801431.png"></p><h2 id="2-5：访问图片"><a href="#2-5：访问图片" class="headerlink" title="2.5：访问图片"></a>2.5：访问图片</h2><p>将图片上传到 Github 仓库后，我们怎么样访问仓库中的图片呢？使用如下两种路径：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/用户名/仓库名/blob/分支名/图片在仓库中的绝对路径?raw=true</span><br><span class="line">https://github.com/用户名/仓库名/raw/分支名/图片在仓库中的绝对路径</span><br></pre></td></tr></table></figure><p>比如访问仓库中位于<code>avatars</code>文件夹中的名为<code>boy.png</code>的图片，那么它的路径就是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/fattymonkey/blog-source/blob/main/avatars/boy.png?raw=true</span><br><span class="line">https://github.com/fattymonkey/blog-source/raw/main/avatars/boy.png</span><br></pre></td></tr></table></figure><h1 id="第三节：配置加速"><a href="#第三节：配置加速" class="headerlink" title="第三节：配置加速"></a>第三节：配置加速</h1><p>将图片上传到 Github 仓库以后，通过使用 Github 给我们的图片路径，就可以访问图片了。但此时还存在一个很严重的问题，就是网络问题。Github 是国外的网站，由于我们国内的网络限制，访问速度很慢，大多数时候甚至根本访问不了！为了解决这个问题，我们就必须为 Github 使用 CDN 加速！目前推荐的 CDN 加速有以下三种。</p><h2 id="3-1：Statically"><a href="#3-1：Statically" class="headerlink" title="3.1：Statically"></a>3.1：Statically</h2><p>很多人都知道 Jsdelivr，开发者们经常会用它来加速 CSS 或 JS 之类的静态资源，当然也会有部分哥们用它来加速图像服务（但在这里建议适量使用，滥用不是一个好的思想）。</p><p>Statically 也是一款为开发者免费提供的 CDN 加速服务，它与 Jsdelivr 一样有着深厚的资源支持，同时其支持的内容更加丰富一些。并且它目前是免费的，速度也是相当不错（且用且珍惜吧）。</p><h3 id="3-1-1：配置"><a href="#3-1-1：配置" class="headerlink" title="3.1.1：配置"></a>3.1.1：配置</h3><p>Statically 压根就不用配置，只需要在访问图片时，修改访问图片的 URL 路径即可。</p><h3 id="3-1-2：使用"><a href="#3-1-2：使用" class="headerlink" title="3.1.2：使用"></a>3.1.2：使用</h3><p>比如 Github 提供给我们的图片链接是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/用户名/仓库名/blob/分支名/图片在仓库中的绝对路径?raw=true</span><br><span class="line">https://github.com/用户名/仓库名/raw/分支名/图片在仓库中的绝对路径</span><br></pre></td></tr></table></figure><p>我们只需要将其修改为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.staticaly.com/gh/用户名/仓库名@分支名/图片在仓库中的绝对路径</span><br></pre></td></tr></table></figure><p>这样就可以访问了，简单且高效！</p><h2 id="3-2：Vercel"><a href="#3-2：Vercel" class="headerlink" title="3.2：Vercel"></a>3.2：Vercel</h2><p>Vercel 现在非常火爆，Vercel 类似 Github Pages，但远比 Github Pages 强大，速度也快得多，而且将 Github 授权给 Vercel 后，可以得到最优雅的发布体验只需要将代码推送，项目就自动更新部署了！Vercel 还支持 serverless 接口，这就意味着它不仅可以部署静态网站，还可以部署动态网站，而这些功能通通都是免费的，简直就是白嫖党的福利！Vercel 还支持 https ，不用自己去 FreeSSL 申请证书，更是省去了一大堆的证书配置，简直就是懒人的福利！</p><p>使用 Vercel 来部署我们的图床仓库，能极大的提升访问速度，因为它提供了全局的 CDN 加速！但是现在 Vercel 的域被墙了，需要绑定一个自己的域名才能在国内访问，并且有每个月 100 G 的流量限制（问题不大，我觉得完全够用）。</p><h3 id="3-2-1：注册账号"><a href="#3-2-1：注册账号" class="headerlink" title="3.2.1：注册账号"></a>3.2.1：注册账号</h3><p>访问 Vercel <a href="https://vercel.com/">官网</a>，建议选择使用 Github 账号来注册。<font color=red><strong>注意</strong></font>：大多数情况下我们的 Github 账号是用国内的邮箱注册的，但是 Vercel 在验证 Github 账号的时候会校验它的主邮箱，假如你 Github 的主邮箱是国内邮箱的话，就会注册失败！一旦你注册失败，就会出现下面的情况：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212119857.png"></p><p>建议<font color=red>在注册 Vercel 之前就把你 Github 的主邮箱修改为国外的邮箱</font>，如果你已经使用了国内的邮箱注册了 Github，那么：</p><ol><li><p>注册一个谷歌邮箱，国内访问<code>Gmail</code>的方案：</p><ul><li><p>直接使用 QQ 邮箱手机版，它提供 <code>Gmail</code> 的访问路线，可以直接注册并使用；</p></li><li><p>使用 <code>Ghelper</code> 等浏览器插件访问。详情可以参考这篇文章：<a href="https://github.com/Zfour/python_github_calendar_api/blob/master/posts/8c8df126">玩转 Microsoft-Edge</a></p></li></ul></li><li><p>将注册的谷歌邮箱设置为 Github 的主邮箱</p><ul><li><p><code>头像</code> &gt; <code>Settings</code> &gt; <code>Emails</code>，然后添加注册的谷歌邮箱，然后验证添加的邮箱；</p></li><li><p>最后在<code>Primary email address</code>下方选择前面添加的谷歌邮箱；</p></li></ul></li><li><p>访问Vercel官网，使用谷歌邮箱进行注册，注册的时候需要验证手机号，国内手机号也可以，完成注册</p></li></ol><h3 id="3-2-2：部署仓库"><a href="#3-2-2：部署仓库" class="headerlink" title="3.2.2：部署仓库"></a>3.2.2：部署仓库</h3><p>进入 Vercel 控制面板，点击页面的“Create a New Project”，在“Import Git Repository”处选择前面创建的仓库：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212501911.png"></p><p>然后点击对应仓库的“Import”按钮，然后直接点击“Deploy”按钮来部署：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212641548.png"></p><p>稍等片刻，就能看到部署项目成功的提示（Congratulations）：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212815121.png"></p><p><font color=red>友情提示</font>：此时可见左边的项目页面报错 404，这是因为我们仓库的根目录下没有名为<code>index.html</code>的文件，我们可以在仓库根目录下创建这个文件，就能消除这个警告！比如我在仓库根目录下创建了这个文件，并编辑它的内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的博客资源<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:red;text-align: center;&quot;</span>&gt;</span>博客资源仓库部署成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传到仓库后，点击右上角的“Continue to Dashboard”，进入项目控制台，可见效果：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021213244947.png"></p><h3 id="3-2-3：绑定域名"><a href="#3-2-3：绑定域名" class="headerlink" title="3.2.3：绑定域名"></a>3.2.3：绑定域名</h3><p>Vercel 给我们分配了一个域名，也就是上图中的<code>blog-source-two.vercel.app</code>，原本我们可以使用这个域名来访问我们的仓库，但由于现<code>.app</code>这个域被墙了，所以我们需要配置一个自己的域名才能访问！</p><p>点击右上方的“Domains”，添加一个自己的域名：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021213457561.png"></p><p>然后点击“Add”，此时发现添加的域名是无效的：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021213951367.png"></p><h3 id="3-2-4：配置解析"><a href="#3-2-4：配置解析" class="headerlink" title="3.2.4：配置解析"></a>3.2.4：配置解析</h3><p>然后去我们购买域名的域名解析处，配置上图中提示给我们的两条解析记录，比如我的情况是：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021215659785.png"></p><p>配置完等待 DNS 生效，然后 Vercel 还会自动配置 SSL 安装证书，最终：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021215815108.png"></p><h3 id="3-2-5：具体使用"><a href="#3-2-5：具体使用" class="headerlink" title="3.2.5：具体使用"></a>3.2.5：具体使用</h3><p>现在，我们就可以使用自定义的域名来访问图片了！访问的 URL 是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义域名/图片的仓库路径</span><br></pre></td></tr></table></figure><p>比如图片在仓库中的路径是<code>/avatars/boy.png</code>，那么就可以在浏览器地址栏中使用下面这两个路径来访问图片：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">czblogs.cn/avatars/boy.png</span><br><span class="line">www.czblogs.cn/avatars/boy.png</span><br></pre></td></tr></table></figure><p><font color=red>注意</font>：在 Markdown 中要加上<code>https://</code>，因为 Markdown 不能像浏览器那样自动为 URL 添加这个前缀！</p><h2 id="3-3：CloudFlare"><a href="#3-3：CloudFlare" class="headerlink" title="3.3：CloudFlare"></a>3.3：CloudFlare</h2><p>cloudflare 的访问速度比 Vercel 的速度差一点，Vercel 是我目前使用的方式，暂时先不更新 cloudflare 的配置和使用！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
            <tag> Github </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这篇文章或许能让你彻底了解Markdown</title>
      <link href="/post/10022.html"/>
      <url>/post/10022.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：基本概述"><a href="#第一节：基本概述" class="headerlink" title="第一节：基本概述"></a>第一节：基本概述</h1><h2 id="1-1：它是什么"><a href="#1-1：它是什么" class="headerlink" title="1.1：它是什么"></a>1.1：它是什么</h2><blockquote><p>Markdown 是一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素，允许人们使用易读易写的纯文本格式编写文档。Markdown 由 John Gruber 于 2004 年创建，如今已成为世界上最受欢迎的标记语言之一。</p></blockquote><p>最开始的时候，人们使用记事本来编辑文档，但是后来发现纯文本文档真的太单调了！然后，Word 闪亮登场，从此 Word 就成为了编辑文本文档的主要工具，在 Word 中人们可以对任意的文字进行排版美化，比如设置各级标题以及文字的大小和颜色。Word 丰富多彩的文本样式，让它成为了主流的文本信息传播手段。但随着网络的发展，Word 文件过于笨重的缺点就暴露出来了，此时又诞生了 HTML，它可以使用轻量级的标记来实现文本文档的渲染，但是它的渲染功能依赖于解释环境（浏览器就是最常见的解释器），在信息传播的过程中没有那么随心所欲。</p><p>对于平时需要进行大量码字的人而言，显然笨重的 Word 和依赖浏览器的 HTML 都不符合他们的诉求。因此，诞生了 Markdown，它跟 HTML 语法一样，也是使用各种标记来实现文本样式的渲染，但是跟 HTML 相比，它更加轻量级，更加简单！在电脑系统中，Markdown 文本文件就是以<code>md</code>或<code>MD</code>为扩展名的文件！</p><p><font color=red>假如你对 HTML 有基本的了解，那么此时你就可以将 Markdown 理解为简化版的 HTML ！并且在 Markdown 文本中可以直接使用 HTML 元素而无需转译！</font></p><h2 id="1-2：使用场景"><a href="#1-2：使用场景" class="headerlink" title="1.2：使用场景"></a>1.2：使用场景</h2><p>由于 Markdown 轻量化、易读、易写的特性，并且对于图片、图表、数学公式等都有支援，目前许多网站都广泛使用它来撰写说明文档或是用于论坛上发表讯息，最常见的就是代码托管平台（比如国外的 Github 和国内的 Gitee）都采用 Markdown 语法来撰写 README 文件。当前，国内外比较知名的平台和大厂，也逐渐将 Markdown 作为文档标准！</p><p>此外，不管是学生、老师，亦或者是其他工作者，基本上有做笔记和码字需求的人，只要接触到 Markdown 以后，基本上都会被它的魅力折服，我们可以拿它来做笔记、演讲文稿、写博客……</p><h2 id="1-3：它的优势"><a href="#1-3：它的优势" class="headerlink" title="1.3：它的优势"></a>1.3：它的优势</h2><p>Markdown 有如下最明显的优势：</p><ol><li>语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版；</li><li>纯文本，易读易写，可以方便地纳入版本控制；</li><li>让使用者可以专注于文字内容本身；</li></ol><p>举个例子，假如你想在你的文档中编辑一个一级标题和一个二级标题，那么你只需要在 Markdown 文件中键入如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这是标题一</span><br><span class="line">## 这是标题二</span><br></pre></td></tr></table></figure><p>这是一段<font color=red>纯文本</font>，当把它拿到 Markdown 解析器或可以直接解释 Markdown 的编辑器中，它就是下面这个样子：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204007063.png"></p><p>一个<code>#</code>加一个空格则表示标题一，两个<code>#</code>加一个空格则表示标题二，以此类推.. 因此在 Markdown 中要想键入各个等级的标题，仅仅使用<code>#</code>和空格就可以实现了！</p><p>此外，现在一些优秀的 Markdown 编辑器，将它的编辑和解释结合，实现了更加便捷的编辑和展示效果！其中以 Typora 为代表。 在 Typora 中，当你键入<code>Ctrl</code>+<code>1</code>的快捷键，就可以在光标所在那一行（自然行，包括自动折行）的内容前面添加一个<code>#</code>及空格，直接将其设为一级标题，并且能实现“所键即所得”（能直接渲染出 Markdown 的样式而不改变 Markdown 源码）！</p><h2 id="1-4：它的局限"><a href="#1-4：它的局限" class="headerlink" title="1.4：它的局限"></a>1.4：它的局限</h2><p>Markdown 是纯文本文件，所以其本身不能存储图片，只能存储图片的链接！Markdown 插入图片的语法是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片路径)</span><br></pre></td></tr></table></figure><p>然后 Markdown 的编辑器在解析这段内容的时候，会自动将引用的图片放到这里，实现“图文并茂”！图片路径可以是相对路径或绝对路径，大多数情况下，我们在 Markdown 中插入图片时都是使用的相对路径，那么在传输文件的时候，若想要对方也能在该 Markdown 中看到我们插入的图片，就必须把图片也传过去，而且要求 Markdown 文件和图片所在的文件夹的相对位置不能改变，我认为这是 Markdown 目前最大的局限！</p><p><font color=red>PS</font>：我们可以使用图床来解决这个问题，但是图床不是我这篇博文的重点，故省略！</p><h1 id="第二节：基本语法"><a href="#第二节：基本语法" class="headerlink" title="第二节：基本语法"></a>第二节：基本语法</h1><p>Markdown 简洁的语法，号称半小时就可以掌握，学习成本很低，所有的语法在它的<a href="https://markdown.com.cn/intro.html">官网</a>或<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟驿站</a>中学得，我这里记录了一些我常用的 Markdown 语法，虽不全面，但是够我个人使用了，方便以后我来查询。</p><p>PS：官网提供了在线 Markdown 编辑器，在左边输入 Markdown 文本，在右边能直接展示出相应的效果，<a href="https://markdown.com.cn/editor/">网址在这</a>！</p><h2 id="2-1：标题"><a href="#2-1：标题" class="headerlink" title="2.1：标题"></a>2.1：标题</h2><p>Markdown 提供了六级标题，第 n 级标题就使用连续的 n 个<code>#</code>加上一个空格，后面跟上标题文本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题一</span><br><span class="line">## 标题二</span><br><span class="line">### 标题三</span><br><span class="line">#### 标题四</span><br><span class="line">##### 标题五</span><br><span class="line">###### 标题六</span><br></pre></td></tr></table></figure><p>PS：原始的 Markdown 只有三级标题，后来扩展到六级标题（因为 Markdown 的理念就是简化文本编辑，更多级的标题有悖于这个理论，所以最多只有六级标题）。</p><h2 id="2-2：斜体"><a href="#2-2：斜体" class="headerlink" title="2.2：斜体"></a>2.2：斜体</h2><p>使用一对<code>*</code>包裹的文本，会被解析为斜体：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*要斜体的文本*</span><br></pre></td></tr></table></figure><h2 id="2-3：粗体"><a href="#2-3：粗体" class="headerlink" title="2.3：粗体"></a>2.3：粗体</h2><p>使用一对<code>**</code>包裹的文本，会被解析为加粗字体：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**要加粗的文本**</span><br></pre></td></tr></table></figure><h2 id="2-4：引用"><a href="#2-4：引用" class="headerlink" title="2.4：引用"></a>2.4：引用</h2><p>对于引用的文本，可以使用<code>&gt;</code>和一个空格引出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用的文本</span><br></pre></td></tr></table></figure><h2 id="2-5：列表"><a href="#2-5：列表" class="headerlink" title="2.5：列表"></a>2.5：列表</h2><p>有序列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. first item</span><br><span class="line">2. second item</span><br><span class="line">3. third item</span><br></pre></td></tr></table></figure><p>无序列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- first item</span><br><span class="line">- second item</span><br><span class="line">- third item</span><br></pre></td></tr></table></figure><p>注意：<font color=red>数字或-跟后面的列表内容之间有且仅有一个空格！</font></p><h2 id="2-6：代码"><a href="#2-6：代码" class="headerlink" title="2.6：代码"></a>2.6：代码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure><p>PS：这里的符号是键盘 Tab 键上方的那个符号（英文输入模式）！</p><h2 id="2-7：链接"><a href="#2-7：链接" class="headerlink" title="2.7：链接"></a>2.7：链接</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[展示的文本](链接的地址)</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;链接的地址&gt;</span><br></pre></td></tr></table></figure><p>PS：后一种方式表示展示的文本和链接的地址相同！</p><h2 id="2-8：图片"><a href="#2-8：图片" class="headerlink" title="2.8：图片"></a>2.8：图片</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![alt text](image.jpg)</span><br></pre></td></tr></table></figure><p>这里的地址可以是绝对路径或相对路径，也可以是网上任意可用的图片 URL！</p><h2 id="2-9：分隔线"><a href="#2-9：分隔线" class="headerlink" title="2.9：分隔线"></a>2.9：分隔线</h2><p>使用三个连续的<code>-</code>来表示分隔线：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="2-10：删除线"><a href="#2-10：删除线" class="headerlink" title="2.10：删除线"></a>2.10：删除线</h2><p>使用一对<code>~~</code>包裹的文本，会被添加删除线：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~文本~~</span><br></pre></td></tr></table></figure><h2 id="2-11：内嵌HTML"><a href="#2-11：内嵌HTML" class="headerlink" title="2.11：内嵌HTML"></a>2.11：内嵌HTML</h2><p>对于Markdown涵盖范围之外的标签，都可以直接在文件里面用HTML本身。如需使用HTML，不需要额外标注这是HTML或是Markdown，只需HTML标签添加到Markdown文本中即可（反过来则不可以）。</p><p><font color=red><strong>第一类：行级标签</strong></font></p><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>和<code>&lt;cite&gt;</code>不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果你比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签的话，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This **word** is bold. This &lt;em&gt;word&lt;/em&gt; is italic.</span><br></pre></td></tr></table></figure><p><font color=red><strong>第二类：块状标签</strong></font></p><p>区块元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p><p>例如，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure><p><font color=red><strong>注意</strong></font>：Markdown语法在HTML区块标签中将不会被进行处理，也就是说，你不能在HTML块标签中使用Markdown语法！</p><h1 id="第三节：扩展语法"><a href="#第三节：扩展语法" class="headerlink" title="第三节：扩展语法"></a>第三节：扩展语法</h1><h2 id="3-1：表格"><a href="#3-1：表格" class="headerlink" title="3.1：表格"></a>3.1：表格</h2><p>要添加表格，请使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列，可以选择在表的任一端添加管道：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204048531.png"></p><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。比如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204121309.png"></p><h2 id="3-2：脚注"><a href="#3-2：脚注" class="headerlink" title="3.2：脚注"></a>3.2：脚注</h2><p>脚注的使用频率很低，采用<code>[^数字]</code>用来表示脚注，比如在文本中使用<code>[^数字]</code>来添加一个标记：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here&#x27;s a sentence with a footnote. [^1]</span><br></pre></td></tr></table></figure><p>然后就可以在页脚处来表明脚注来源了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^1]: This is the footnote.</span><br></pre></td></tr></table></figure><h2 id="3-3：代码块"><a href="#3-3：代码块" class="headerlink" title="3.3：代码块"></a>3.3：代码块</h2><p>代码块使用如下的方式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```代码语言</span><br><span class="line">这是代码</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>比如一段Python代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">nums = &#123;1, 2, 3&#125;</span><br><span class="line">for i in nums:</span><br><span class="line">    print(i)</span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="3-4：定义列表"><a href="#3-4：定义列表" class="headerlink" title="3.4：定义列表"></a>3.4：定义列表</h2><p>除了前面的有序列表和无序列表以外，我们还可以自定义列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is the definition of the first term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is one definition of the second term.</span><br><span class="line">: This is another definition of the second term.</span><br></pre></td></tr></table></figure><p>类似于 HTML 中的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5：标题编号"><a href="#3-5：标题编号" class="headerlink" title="3.5：标题编号"></a>3.5：标题编号</h2><p>所谓标题编号，就是给标题自定义一个id选择器。比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 标题三 &#123;#custom-id&#125;</span><br></pre></td></tr></table></figure><p>相当于 HTML 中的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;custom-id&quot;</span>&gt;</span>标题三<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样一来，其他网站中要想跳转到被编号的标题为止，可以在编号所在网页完整的 URL 后面添加<code>#custom-id</code>来链接！</p><h2 id="3-6：任务列表"><a href="#3-6：任务列表" class="headerlink" title="3.6：任务列表"></a>3.6：任务列表</h2><p>所谓任务列表，就是在一个普通列表的前面会有方括号，其中会有对号表示完成的内容，比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br><span class="line">- [ ] Contact the media</span><br></pre></td></tr></table></figure><p>展示效果如下：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204150715.png"></p><p>~~</p><p>~~</p><p>~~</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用口令替代密码来进行上传验证</title>
      <link href="/post/10021.html"/>
      <url>/post/10021.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：错误描述"><a href="#第一节：错误描述" class="headerlink" title="第一节：错误描述"></a>第一节：错误描述</h1><h2 id="1-1：报错信息"><a href="#1-1：报错信息" class="headerlink" title="1.1：报错信息"></a>1.1：报错信息</h2><p>假如你在 2021 年 8 月 13 日前后都往 Github 上提交过代码，那么在这个时间点以后，你肯定遇到过类似下面的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021.</span><br></pre></td></tr></table></figure><p>比如，我在 Github 上创建了一个新的仓库，并且用一台新的电脑第一次往这个仓库中提交代码，当提示我输入用户名和密码的时候，我照做了（且用户名和密码都输入正确），但是结果却报错：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021170548378.png"></p><h2 id="1-2：分析原因"><a href="#1-2：分析原因" class="headerlink" title="1.2：分析原因"></a>1.2：分析原因</h2><p>由报错信息可知，从 2021 年 8 月 13 日开始，Github 删除了对使用密码进行身份验证的支持！也就是说，之前你在提交代码时（第一次提交）使用 GitHub 的用户名和密码进行验证的方式已经不能使用了，用户名是指 Github 的用户名，密码则是 Github 的登录密码！</p><p>通过查阅官方文档，我发现 <font color=red>Github 现在提交代码时使用 token（口令）来替代登录密码来进行验证！</font>即使在提交代码时要求你输入的是“Password”，你依然应该输入 token 而不是 password！</p><h1 id="第二节：使用口令"><a href="#第二节：使用口令" class="headerlink" title="第二节：使用口令"></a>第二节：使用口令</h1><h2 id="2-1：创建口令"><a href="#2-1：创建口令" class="headerlink" title="2.1：创建口令"></a>2.1：创建口令</h2><p>点击 Github 主页头像，选择<code>Settings</code>，然后点击侧边栏的<code>&lt;&gt;Developer settings</code>，跳转到如下页面：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021170651466.png"></p><p>展开侧边栏的<code>Personal access token</code>，并点击<code>Token(classic)</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021170914227.png"></p><p>跳转后，假如你还没有创建口令，依次点击<code>Generate new token</code> &gt; <code>Generate new token(classic)</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171027238.png"></p><p>然后，对即将生成的口令进行初始化设置，比如我创建一个个人使用的永远不过期的口令：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171238531.png"></p><p>解释一下这里的设置：</p><ul><li>Note：任意填写，因为我们可能会创建很多口令，这个用来标记不同的口令，防止忘记；</li><li>Expiration：有效期，可选的有7天、30天、60天、90天、不限制，还可以自己定制时长；</li><li>Select scopes：选择范围，就是说你创建的这个口令具备的权限，勾选 repo 表示赋予仓库级别的权限；</li></ul><p>最后点击最下面的<code>Generate token</code>按钮，完成创建，页面自动生成口令：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171245030.png"></p><p>注意：口令生成以后记得保存下来，一旦离开这个页面再进来，就看不到之前生成的口令明文了</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171329123.png"></p><h2 id="2-2：使用口令"><a href="#2-2：使用口令" class="headerlink" title="2.2：使用口令"></a>2.2：使用口令</h2><p>使用口令很简单，只需要在推送代码时将其作为密码来使用即可：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171514066.png"></p><p>一旦你使用了口令以后，口令会自动保存在你的计算机缓存文件中，下次再推送的时候就不需要重复输入了。比如在 Mac 中，使用了口令以后，就可以在钥匙串中找到：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021172121473.png"></p><p>友情提示：从这里可以找到明文的口令，但是前提是你已经用口令提交过至少一次代码，所以在上面生成口令的时候一定要先复制保存起来！！！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果芯片的macOS安装Java</title>
      <link href="/post/10011.html"/>
      <url>/post/10011.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：先验知识"><a href="#第一节：先验知识" class="headerlink" title="第一节：先验知识"></a>第一节：先验知识</h1><h2 id="1-1：检查环境"><a href="#1-1：检查环境" class="headerlink" title="1.1：检查环境"></a>1.1：检查环境</h2><p>在安装软件之前检查是否已经安装了想要安装的软件，是一个必要的习惯，首先执行<code>java -version</code>来检查：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101221953861.png"></p><p>假如没有展示 JDK 的版本号，说明当前系统中没有 Java 环境！</p><p>当然，没有环境也不能完全表示系统中不存在 Java，也许是安装了以后没有配置 Java 环境，所以打开访达搜索<code>Java</code>关键字，发现系统中也没有名称中包含“Java”字样的文件夹（只有<code>/Library/Java</code>，这个文件夹是系统自带的，它的两个子文件夹都是空的，所以其中也没有安装 JDK），这就说明当前系统中不存在 Java 环境！</p><h2 id="1-2：系统内置"><a href="#1-2：系统内置" class="headerlink" title="1.2：系统内置"></a>1.2：系统内置</h2><p>实际上，系统自带的文件夹<code>/Library/Java</code>就是预留给用户来安装 Java 环境的！我们安装的 JDK 最终就会被安装到这个目录中！</p><h2 id="1-3：版本选择"><a href="#1-3：版本选择" class="headerlink" title="1.3：版本选择"></a>1.3：版本选择</h2><p>最为一个强迫症的晚期患者，我必须安装一个原生支持 ARM 架构的 JDK，并且现在的主流开发版本是 1.8 版本，并且不能够太新，结合这两点，我必须找到一个原生支持 ARM 架构且最好是 1.8 的 JDK！</p><h1 id="第二节：安装配置"><a href="#第二节：安装配置" class="headerlink" title="第二节：安装配置"></a>第二节：安装配置</h1><h2 id="2-1：下载"><a href="#2-1：下载" class="headerlink" title="2.1：下载"></a>2.1：下载</h2><p>在官网上提供了 macOS 的三种安装包：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101223758593.png"></p><ul><li>ARM64 Compressed Archive：基于CPU ARM 64位架构，压缩包版本，安装过程中需要用户自行配置；</li><li>Arm64 DMG Installer ： 基于CPU ARM 64位架构，安装版本，安装过程中无需用户自行配置；</li><li>x64 DMG Installer ： 基于CPU X86 64位架构，安装版本，安装过程中无需用户自行配置；</li></ul><p>建议使用第二个支持 ARM 的安装包版本，这样比较简单，无需自己配置！下载下来的是一个<code>dmg</code>格式的安装包！</p><h2 id="2-2：安装"><a href="#2-2：安装" class="headerlink" title="2.2：安装"></a>2.2：安装</h2><p>直接双击下载下来的安装版，显示一个<code>pkg</code>格式的文件：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101225226631.png"></p><p>然后接着双击这个<code>pkg</code>格式的文件，进入安装程序：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101225403720.png"></p><p>点击上图中的【继续】：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101225521344.png"></p><p>接着点击上图中的【继续】：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101225617908.png"></p><p>点击右下角的【安装】，然后输入开机密码，稍等片刻后：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101225758377.png"></p><p>点击右下角的【关闭】，完成安装！</p><h2 id="2-3：检查"><a href="#2-3：检查" class="headerlink" title="2.3：检查"></a>2.3：检查</h2><p>安装完成后，打开终端执行命令<code>java -version</code>后，显示 JDK 的版本号，则表示安装完成：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101230223871.png"></p><h2 id="2-4：配置"><a href="#2-4：配置" class="headerlink" title="2.4：配置"></a>2.4：配置</h2><p>安装完成以后，我们需要进行一些简单的配置来优化 JDK。首先，环境变量我们不需要自己配置；其次，一旦安装了 JDK 以后，我们就不需要再更新了，但是刚安装的 JDK 会自动检查更新，我们需要将其关闭！</p><p>打开系统偏好设置，拉到最下面有一个 Java 控制面板，点击后却展示如下：</p><p><img src="https://www.czblogs.cn/posts/macos/11/image-20240101231312546.png"></p><p>这种错误我也不清楚是由于什么导致的，但是可以通过如下两个步骤来进行修复：</p><p>第一步：重启系统。有时候这种问题是由于系统问题导致的，重启可以修复。假如不能修复，再进行第二步；</p><p>第二步：手动配置环境变量。直接打开终端，在<code>~/.zprofile</code>文件中加入如下内容后再执行<code>source ~/.zprofile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Setting PATH <span class="keyword">for</span> JDK</span></span><br><span class="line">PATH=&quot;/Library/Java/JavaVirtualMachines/jdk-1.8.jdk/Contents/Home/bin:$&#123;PATH&#125;&quot;</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>第三步：重新安装 JDK。把所有安装所得的文件全部删除以后，再重新安装即可；</p><h2 id="2-5：总结"><a href="#2-5：总结" class="headerlink" title="2.5：总结"></a>2.5：总结</h2><p>实际上，对于这种安装包的形式，我不是很赞成，实际上我更喜欢使用压缩包的形式，这种形式的 JDK 只需要解压到系统中的<code>/Library/Java/JavaVirtualMachines/</code>中就可以了，连环境变量都不用配置（我也不知道为啥，哈哈哈）！</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1安装python3的最佳实践</title>
      <link href="/post/10010.html"/>
      <url>/post/10010.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：先验知识"><a href="#第一节：先验知识" class="headerlink" title="第一节：先验知识"></a>第一节：先验知识</h1><h2 id="1-1：内置python环境"><a href="#1-1：内置python环境" class="headerlink" title="1.1：内置python环境"></a>1.1：内置python环境</h2><p>一直以来，macOS 系统都有内置 python 环境的，只不过内置的都是 python2，因此在老版本的 macOS 终端中可以直接运行 python！但是从 macOS12.3 开始，macOS 系统就移除了内置的 python！</p><p>旧版本的 macOS 中，在<code>/System/Library/Frameworks</code>下面有一个名为<code>Python.framework</code>的文件夹，这个文件夹内安装的就是 python2，但是从 12.3 开始，这个文件夹被移除了，相应的内置 python 环境也不复存在！</p><p>如今，即使在新版本的 macOS 中，在<code>/usr/bin</code>下面仍然有一个名为<code>python3</code>的可执行文件：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021161936567.png"></p><p>这个文件在所有版本的 macOS 系统中都存在，只是默认情况下是没有用的，即使<code>/usr/bin</code>目录在环境变量中，但是在执行 python3 命令时仍然会提示你当前系统没有 python 环境：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021162254798.png"></p><p>需要注意的是：若你安装了命令行工具——Command Line Tools，那么<code>/usr/bin/python3</code>就会“变得可用”，它会指向 CLT 内置的 python3！当我们安装完 CLT 后，在终端中：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021162403085.png"></p><p>所以，没安装命令行工具时，新版本的 macOS 中是没有 python 环境的，不管是 python2 还是python3；但一旦安装了命令行工具后，macOS 自带的 <code>/usr/bin/python3</code> 就会变得可用！</p><h2 id="1-2：CLT中的python"><a href="#1-2：CLT中的python" class="headerlink" title="1.2：CLT中的python"></a>1.2：CLT中的python</h2><p>那么安装 CLT 后，python3 被安装到哪里去了呢？其实它被安装到如下的位置了：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021162557148.png"></p><p>至于为什么安装命令行工具后，<code>/usr/bin/python3</code>会指向这里，那就是 macOS 底层的处理了，没必要关心！</p><h2 id="1-3：放弃内置python"><a href="#1-3：放弃内置python" class="headerlink" title="1.3：放弃内置python"></a>1.3：放弃内置python</h2><p>即然命令行工具中内置了 python3，那么安装完命令行工具后，我们还有必要去自己安装 python3 吗？答案是：肯定有必要！为什么这么说呢，我个人认为主要有如下两个原因。</p><p>第一：命令行工具自带的 python3 是简化版的，版本较低，而且不会附带官方文档和 IDLE 等；而自己安装的话，不仅可以自由选择版本，而且还可以附带文档和 IDLE 等。</p><p>第二：使用命令行工具自带的<code>python3</code>可能会出现意料之外的问题。比如<code>pip3</code>的更新问题，直接更新的话，会在用户目录下生成<code>site-packages</code>文件夹，这样一来系统中就有了两个<code>site-packages</code>文件夹了；假如绕开权限（使用<code>sudo</code>前缀）来更新的话，虽然可以卸载旧版本的<code>pip3</code>，但是在安装新的<code>pip3</code>时，会在<code>/Library</code>中产生名为<code>Python</code>的文件夹，并在其中继续生成<code>site-packages</code>文件夹，并没有将新的<code>site-packages</code>文件夹放到旧版<code>site-packages</code>的位置，此外还会在<code>/usr/local/bin</code>中生成<code>pip3</code>和<code>pip</code>。虽然都不影响使用，但这无形之中在系统中添加了好多零零散散的目录，看起来很烦！假如后面产生和依赖相关的问题，势必会对定位问题产生不必要的困扰。</p><p>综合以上两点，我最终放弃了命令行内置的 python3，在我日常的开发中，我选择使用自己安装的 python3！<font color=red>友情提示</font>：假如你将命令行内置的 python3 作为基础环境，每次都是使用它来创建虚拟环境，然后在项目中继续使用的是你创建的虚拟环境，那命令行工具中内置的 python3 还是可以用的！</p><h1 id="第二节：下载安装"><a href="#第二节：下载安装" class="headerlink" title="第二节：下载安装"></a>第二节：下载安装</h1><h2 id="2-1：版本选择"><a href="#2-1：版本选择" class="headerlink" title="2.1：版本选择"></a>2.1：版本选择</h2><p>虽然 Python 官网说 3.9.1 已经原生支持 M 系列的芯片了，但我从官方下载了 3.9.1，在安装的过程中还是会提示我安装转译器 Rosetta！并且从 3.9.1 开始逐个地尝试，直到 3.9.10 开始（包括 3.9.10），在安装的过程中才不会提示我安装转译器！所以干脆我就选择了 3.9 的最后一个带有<code>.pkg</code>安装程序的版本——3.9.13！</p><p>登陆官网，找到 3.9.13 的下载链接，选择合适的版本来下载：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021162916925.png"></p><p>下载下来的是一个<code>.pkg</code>格式的安装程序！</p><h2 id="2-2：安装步骤"><a href="#2-2：安装步骤" class="headerlink" title="2.2：安装步骤"></a>2.2：安装步骤</h2><p>双击安装包，进行傻瓜式安装即可！需要注意的是，安装过程中有个“自定”的选择，不要取消勾选，使用标准安装即可：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021163226399.png"></p><p>安装完成以后，点击安装程序的“关闭”按钮，会自动跳出如下页面：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021163354072.png"></p><p>这说明：安装程序会在<code>/Application</code>下面生成一个名为“Python 3.9”的文件夹，文件夹中的内容如上图所示！</p><h2 id="2-3：验证结果"><a href="#2-3：验证结果" class="headerlink" title="2.3：验证结果"></a>2.3：验证结果</h2><p>在安装之前是这样的：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021162403085.png"></p><p>而在安装之后是这样的：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021163603311.png"></p><p>可见，此时我们系统默认的 python3 是我们手动安装的 3.9.13，而不是之前系统默认的 3.9.6（CLT 中内置的）！这就说明我们的安装是成功的！安装的位置就是<code>/library/Frameworks/Python.framework</code>目录！</p><h2 id="2-4：安装位置"><a href="#2-4：安装位置" class="headerlink" title="2.4：安装位置"></a>2.4：安装位置</h2><p>通过在终端中执行<code>which python3</code>命令，我们可以看到安装的python位置：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021163715058.png"></p><p>假如要卸载的话，首先要删除的就是<code>/Library/Frameworks/Python.framework</code>文件！</p><h2 id="2-5：环境变量"><a href="#2-5：环境变量" class="headerlink" title="2.5：环境变量"></a>2.5：环境变量</h2><p>使用安装程序来安装的 python3，是不需要配置环境变量的！为什么呢？</p><p>打开用户目录下的<code>.zprofile</code>文件，可见：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164102199.png"></p><p>假如你用户目录下原本没有这个文件，安装完以后也会自动生成这个文件并将上图红框内的内容写入！这个内容的意思就是把用户安装的 python 命令放到系统 PATH 变量的最前面：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164207519.png"></p><p>那<code>/Library/Frameworks/Python.framework/Versions/3.9/bin</code>中都有哪些命令呢？如下：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164320944.png"></p><p>所以此时我们不需要配置环境变量，因为位于<code>/Library/Frameworks/Python.framework/Versions/3.9/bin</code>中的这些命令已经被放到系统 PATH 变量的最前面了！</p><h2 id="2-6：符号连接"><a href="#2-6：符号连接" class="headerlink" title="2.6：符号连接"></a>2.6：符号连接</h2><p>安装程序还会在<code>/usr/local/bin</code>目录下创建一些符号链接，这些链接指向安装的命令：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164555245.png"></p><p>而<code>/Library/Frameworks/Python.framework/Versions/3.9/bin</code>中安装的这些命令原本就已经在系统的 PATH 中了，而且<code>/usr/local/bin</code>还在<code>/usr/bin</code>（命令行内置 python3 命令所在位置）的前面，再一次保证了我们不需要自己配置环境变量！</p><h1 id="第三节：更新-pip3"><a href="#第三节：更新-pip3" class="headerlink" title="第三节：更新 pip3"></a>第三节：更新 pip3</h1><h2 id="3-1：系统中的pip3"><a href="#3-1：系统中的pip3" class="headerlink" title="3.1：系统中的pip3"></a>3.1：系统中的pip3</h2><p>不管是通过命令行工具安装的还是我们自己通过安装程序安装的 python3，都会自带 pip3：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164730052.png"></p><p>显然，当前系统默认的 pip3 是我们自己安装的 python3 中的！</p><p>注意：跟 python 一样，在终端中使用 pip 的时候也需要使用<code>pip3</code>来替代<code>pip</code>，使用<code>pip</code>是无效的</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164908982.png"></p><h2 id="3-2：查看依赖"><a href="#3-2：查看依赖" class="headerlink" title="3.2：查看依赖"></a>3.2：查看依赖</h2><p>使用<code>pip3 list</code>可以查看当前 python3 环境都安装了哪些第三方库：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164843080.png"></p><p>注意：这个命令只能检测到当前 python3 环境可以使用的第三方库和模块，不包括内建的和标准的！</p><p>可见当前我们的 pip3 中只有两个库，一个是 pip3 本身，另外一个 setuptools 是支持 pip3 的：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021165049108.png"></p><p>记住 site-packages 这个路径，后面我们通过 pip3 下载安装的第三方库和模块都会被放到这里！</p><h2 id="3-3：最终做法"><a href="#3-3：最终做法" class="headerlink" title="3.3：最终做法"></a>3.3：最终做法</h2><p>跟命令行工具内置的 pip3 一样，使用安装程序安装的 python3 内置的 pip3 的版本也不是最新的，同样需要更新：</p><p><img src="https://www.czblogs.cn/posts/macos/10/image-20231021164843080.png"></p><p>回忆：我们尝试更新命令行工具自带的 pip3 时，会有如下问题</p><ul><li>直接更新的话，因为的权限问题，首先会导致原本的 pip3 卸载不掉，其次会将新的 pip3 安装到用户目录下，虽然不影响使用，但此时系统中会存在两个 site-packages 文件夹，当前 python3 可以使用这两个文件夹中的资源；</li><li>使用<code>sudo</code>来更新的话，虽然可以将原本的 pip3 卸载，但却没有把新版的 pip3 安装到旧版的 pip3 位置，而是安装到了<code>/Library/Python/site-packages</code>中了，并且会在<code>/usr/local/bin</code>中生成 pip3 和 pip 命令指向这里。假如这样的话，那么以后每次使用 pip3 都要在前面加上<code>sudo</code>，而且安装最后系统还是会给出提示“Running pip as the ‘root’ user can result in broken permissions and conflicting behaviour with the system package manager”，所以最终放弃这种方案；</li></ul><p>而更新自己安装的 python3 中自带的 pip3 时，就不会遇到这样的问题，直接使用终端中提示的命令就可以更新成功！</p><p><font color='red'>但是，更新以后终端中可以同时识别“pip3”和“pip”这两个命令</font>！这是因为新版的 pip 会同时安装<code>pip</code>和<code>pip3</code>两个命令，所以我干脆就不更新了，理由有三：</p><ul><li>不更新也能使用，又不是必须的，只是会出现更新的提示；</li><li>今后不打算直接使用系统默认的 python3，而是用它来创建虚拟环境（即使更新了系统默认的 pip3，创建的虚拟环境对应的 pip3 依然是新安装时未更新的 pip3 版本，所以从这方面看，更新 pip3 也是没必要的）；</li><li>在 macOS 上，我更愿意用“pip3”而非“pip”（因为在命令行中我们也只能使用“python3”而不是“python”，就要整整齐齐，装逼就要装个整套的）；</li></ul><h1 id="第四节：总结归纳"><a href="#第四节：总结归纳" class="headerlink" title="第四节：总结归纳"></a>第四节：总结归纳</h1><h2 id="4-1：安装所得"><a href="#4-1：安装所得" class="headerlink" title="4.1：安装所得"></a>4.1：安装所得</h2><p>在整个手动安装 python3 的过程中，安装程序总共做了下面几件事：</p><ul><li><p>生成<code>/Application/Python 3.9</code>文件；</p></li><li><p>生成<code>/Library/Frameworks/Python.framework</code>文件，这是实际安装的 python3 文件；</p></li><li><p>生成<code>~/.zprofile</code>文件，将安装的 python3 添加到环境变量中；</p><p>假如系统中原本就有这个文件，就会在文件末尾追加配置环境的内容</p></li><li><p>生成一些链接，在<code>/usr/local/bin</code>中；</p><p>这些链接指向<code>/Library/Frameworks/Python.framework/Versions/3.9/bin</code>中的命令；</p></li></ul><p>假如要卸载的话，只需要去复原上面这四项即可！</p><h2 id="4-2：系统环境"><a href="#4-2：系统环境" class="headerlink" title="4.2：系统环境"></a>4.2：系统环境</h2><p>经过安装命令行工具 CLT 和手动安装 python 3.9.13，此时系统中有两个版本的 python3 环境：</p><ul><li>&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;Library&#x2F;Frameworks&#x2F;Python3.framework&#x2F;Versions&#x2F;3.9</li><li>&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.9</li></ul><p>前者是命令行工具中内置的，后者是我们手动安装的，而且此时如下的 python3 命令都是指我们自己安装的：</p><ul><li>&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.9&#x2F;bin&#x2F;python3.9</li><li>&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.9&#x2F;bin&#x2F;python3</li><li>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3.9</li><li>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3</li></ul><p>而如下的 pip3 指向我们手动安装的 pip3：</p><ul><li>&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.9&#x2F;bin&#x2F;pip3.9</li><li>&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.9&#x2F;bin&#x2F;pip3</li><li>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3.9</li><li>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3</li></ul><p>此时，在终端中直接使用 pip3 命令来安装依赖时，依赖会被安装到如下目录：</p><ul><li>&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.9&#x2F;lib&#x2F;python3.9&#x2F;site-packages</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Python </tag>
            
            <tag> 命令行工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS上安装配置Nodejs的保姆级教程</title>
      <link href="/post/10009.html"/>
      <url>/post/10009.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：什么是-Nodejs"><a href="#第一节：什么是-Nodejs" class="headerlink" title="第一节：什么是 Nodejs?"></a>第一节：什么是 Nodejs?</h1><blockquote><p>简单来说：Nodejs 是一个基于 Chrome V8 开发的 JavaScript 的运行环境，能够使 JavaScript 脱离浏览器运行！</p></blockquote><p>Node.js 是 2009 的时候由大神 Ryan Dahl 开发的。Ryan 的本职工作是用 C++ 写服务器，后来他总结出一个经验，一个高性能服务器应该是满足“事件驱动，非阻塞 I&#x2F;O”模型的。C++ 开发起来比较麻烦，于是 Ryan 就想找一种更高级的语言，以便快速开发。</p><p>可以说有两点促成了 Nodejs 的诞生。首先第一点，Ryan 发现 JS 语言本身的特点就是事件驱动并且是非阻塞 I&#x2F;O 的，跟他的思路正是绝配；第二点，Chrome 的 JS 引擎，也就是 V8 引擎是开源的，而且性能特别棒。于是 Ryan 就基于  Chrome V8 开发了 Node.js 。</p><p>注意：Node.js 听起来好像是个 JS 库，其实不是的，Node.js 是使用 C++ 开发的，到官网 <a href="https://link.zhihu.com/?target=http://nodejs.org">http://nodejs.org</a> 可以看到！所以说：<font color='red'>Node.js不是库，而是一个运行环境，或者说是一个JS语言解释器！</font></p><h2 id="1-1：执行JS代码"><a href="#1-1：执行JS代码" class="headerlink" title="1.1：执行JS代码"></a>1.1：执行JS代码</h2><p>以前 JavaScript 只能运行在浏览器中，Node.js 出现之后，不管是服务器上还是我们自己的笔记本，只要是你安装了 Nodejs，就可以运行 JavaScrip t代码了！</p><p>比如，安装完 Nodejs 以后，进入命令行以后执行命令<code>node</code>进入 Nodejs 环境以后，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 1</span><br></pre></td></tr></table></figure><p>这段JS代码就是简单的执行加法操作，回车后就可以看到代码正确执行了。</p><p>跟 python 相同，我们还可以将JS代码编写在<code>.js</code>文件中，然后使用 Nodejs 环境直接执行改文件。比如在<code>test.js</code>文件中编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后在命令行中这样执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br></pre></td></tr></table></figure><p>此时“hello”会被打印出来，而这种执行过程跟浏览器没有一毛钱关系，<font color='red'>Nodejs使得JS代码脱离了浏览器的限制！</font></p><p>PS：当然 Nodejs 跟浏览器还是有一些细微的区别的，这里我们先不关注。</p><h2 id="1-2：内置包管理器"><a href="#1-2：内置包管理器" class="headerlink" title="1.2：内置包管理器"></a>1.2：内置包管理器</h2><p>Nodejs 的出现，引发了前后端开发的爆发（尤其是前端），众多的JS开发者贡献了非常多的开源代码，所有这些优秀的代码就凝结成了一个仓库——世界上最大的包管理器 npm！</p><p>不知道在座的各位有没有用过 Python，Python 有一个很优秀的包管理器 pip，通过 pip 我们可以获取其他 Python 开发者写好的优秀代码，并将其引用到我们自己的项目中来。npm 同样如此，它是 Nodejs 的包管理器，通过 npm 我们可以简单的获取其他开发者的优秀代码，并将其引用到我们的项目中，避免“重复造轮子”！<font color='red'>跟 pip 一样，npm 既是一个代码库，也是一个程序，当系统安装上 Nodejs 以后，会内置安装 npm</font>！</p><p>比如，安装完 Nodejs 后，我们想使用 npm 安装一个名为 moment 的代码库，就可以直接执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install moment</span><br></pre></td></tr></table></figure><p>这个命令可以直接把 moment 这个包从 npm 的软件包仓库中下载这个包并安装到本地，而在 npm 仓库中还有这数以万计的类似 moment 这样的包！</p><p>关于 npm ，我们暂时理解到这个程度就可以了，只要求会用！</p><h1 id="第二节：下载安装"><a href="#第二节：下载安装" class="headerlink" title="第二节：下载安装"></a>第二节：下载安装</h1><h2 id="2-1：下载"><a href="#2-1：下载" class="headerlink" title="2.1：下载"></a>2.1：下载</h2><p>浏览器访问<a href="https://nodejs.org/">Nodejs的官网</a>：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021152549673.png"></p><p>PS：LTS 版本是长期维护的稳定版本，Current 是当前开发版本，一般情况下，我们选择 LTS 版本的下载。</p><p>也可以通过 Downloads 页签找到更多的选择，比如我选择的是同时支持 Intel 和苹果 Silicon 的 macOS 安装程序：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021152853040.png"></p><p>PS：如此流行的 Nodejs，比其他开发环境更早的适配 ARM 架构（真的很牛逼，很多比较常用的开发环境对于 ARM 架构的支持都是比较滞后的），这对使用苹果芯片的 macOS 用户来说简直是太棒了！下载下来的是一个<code>.pkg</code>的安装程序。</p><h2 id="2-2：安装"><a href="#2-2：安装" class="headerlink" title="2.2：安装"></a>2.2：安装</h2><p>直接双击下载下来的安装程序，进入安装程序：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021153158616.png"></p><p>友情提示：</p><ul><li><p>安装程序会安装 node，并将其安装到<code>/usr/local/bin/node</code>目录；</p></li><li><p>安装程序会安装 npm，并将其安装到<code>/usr/local/bin/npm</code>目录；</p></li><li><p>假如你此前没使用过<code>/usr/local</code>目录的话，此时这个目录应该是空的（比如我在安装前，这个目录就是空的）；</p></li></ul><p>点击上图中右下角的“继续”，会展示软件许可协议：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021153353254.png"></p><p>点击上图中的“继续”：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021153507248.png"></p><p>然后点击上图中的“同意”：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021153623806.png"></p><p>假如此时点击“自定”，我们看到安装程序会安装 Node.js 和 npm：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021153715916.png"></p><p>这里不需要修改，直接点击“安装”，输入机器开机密码后，即可进入自动安装！最后点击“关闭”来完成安装：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021153859069.png"></p><h2 id="2-3：配置"><a href="#2-3：配置" class="headerlink" title="2.3：配置"></a>2.3：配置</h2><p>为了能在命令行中使用 Nodejs，我们需要确认安装的 node 和 npm 在我们的系统的环境变量 PATH 中。但是这两者的安装位置<code>/usr/local/bin/</code>本身就在 Mac 的环境变量 PATH 中，这是系统预置的：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154036625.png"></p><p><font color='red'>也就是说：使用安装程序安装的Nodejs，不需要我们再自己手动的设置环境变量了！</font></p><h2 id="2-4：检查"><a href="#2-4：检查" class="headerlink" title="2.4：检查"></a>2.4：检查</h2><p>打开终端，查看 node 和 npm 的版本号，假如能正确查看到版本号，则说明安装成功：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154420969.png"></p><h2 id="2-5：-npm"><a href="#2-5：-npm" class="headerlink" title="2.5：.npm"></a>2.5：.npm</h2><p>安装 Nodejs 获得的文件：</p><ul><li>安装的 Nodejs 的所有的文件都安装到<code>/usr/local</code>目录中（这个目录原本是空的）；</li><li>安装完 Nodejs 后，用户目录下没有<code>.npm</code>文件，执行<code>npm</code>命令后，用户目录下会产生名为<code>.npm</code>的隐藏文件；</li></ul><p>刚安装 Nodejs 后，用户目录下有如下文件：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154318574.png"></p><p>当执行了 2.4 中的<code>npm</code>命令后，就会再用户目录下生成名为<code>.npm</code>的文件：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154529947.png"></p><p>友情提示：</p><ul><li>因为<code>npm</code>命令在环境变量中，所以可以在任意目录下执行<code>npm</code>命令；</li><li>无论在哪个目录下执行<code>npm</code>命令，都会在用户目录下生成名为<code>.npm</code>的隐藏文件！</li></ul><h1 id="第三节：额外配置"><a href="#第三节：额外配置" class="headerlink" title="第三节：额外配置"></a>第三节：额外配置</h1><p>当使用 npm 来安装第三方软件包的时候，有局部安装和全局安装两种安装类型，对应的命令分别是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install 软件包名</span><br><span class="line">npm install -g 软件包名</span><br></pre></td></tr></table></figure><p>前者表示局部安装，后者表示全局安装！使用“<font color='red'>npm root</font>”命令可以查看局部安装和全局安装的目标目录：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154657299.png"></p><p>友情提示：</p><ul><li>局部安装时，软件包会被安装到执行安装命令的目录下（假如执行安装命令的路径下有<code>node_modules</code>），或者被安装到当前用户目录下的<code>node_modules</code>文件夹中（假如执行安装命令的路径下没有<code>node_modules</code>）；</li><li>全局安装时，软件包会被安装到<code>/usr/local/lib/mode_modules</code>文件夹中；</li></ul><h2 id="3-1：局部安装"><a href="#3-1：局部安装" class="headerlink" title="3.1：局部安装"></a>3.1：局部安装</h2><p>在局部安装之前，用户目录下的文件目录是这样的（用户目录下的<code>.npm</code>文件是只要执行<code>npm</code>命令就会产生的）：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154809551.png"></p><p>下面，我们试着在用户目录下局部安装一个名为<code>moment</code>库，在用户目录下执行<code>npm install moment</code>：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154902742.png"></p><p>PS：其实安装的时候，终端中会有进度条展示，但是网速比较快的话，基本捕捉不到进度条！</p><p>此时查看用户目录，可见这里会产生三个新的文件（用户目录下的<code>.npm</code>文件是只要执行<code>npm</code>命令就会产生或更新）：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021155002595.png"></p><p><font color=red>友情提醒</font>：其中安装的 moment 包就放在<code>node_modules</code>文件夹中，使用<code>npm uninstall moment</code>命令卸载时，只会将<code>~/node_modules/</code>中的<code>moment</code>文件夹删掉，上图中新生成的这三个文件夹不会被删除！</p><p><font color='red'><strong>综上</strong></font>：</p><ul><li>使用局部安装的方式，不需要额外的任何配置；</li><li>局部安装时，软件包会被安装到执行安装命令的目录下（假如执行安装命令的路径下有<code>node_modules</code>），或者被安装到当前用户目录下的<code>node_modules</code>文件夹中（假如执行安装命令的路径下没有<code>node_modules</code>）；</li></ul><h2 id="3-2：全局安装"><a href="#3-2：全局安装" class="headerlink" title="3.2：全局安装"></a>3.2：全局安装</h2><p>局部安装时，会在安装目录下生成<code>node_modules</code>目录，但是全局安装的目标目录<code>/usr/local/lib/node_modules</code>本身就存在（package-local.json 和 package.json不存在），并且里面本身就存在两个包（这是自带的两个包）：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021155518502.png"></p><p>直接执行命令<code>npm install -g moment</code>来全局安装 moment 包：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021155406170.png"></p><p>执行报错！因为执行全局安装时，npm 会默认将软件包安装到<code>/usr/local/lib/node_modules/</code>目录下，但是从<code>/usr</code>到<code>/usr/local/lib/node_modules/</code>这些目录的权限全是<code>drwxr-xr-x</code>，并且权限属主是 root、属组是 wheel！</p><p>PS：macOS 系统的权限控制</p><ul><li>macOS 系统中有 staff、admin、wheel 这三种用户组；</li><li>staff：所有的用户都属于这个组，这是用户的一个超集；</li><li>admin：这个组中的用户可以使用<code>su</code>或<code>sudo</code>切换到 root 用户，只需要输入自己的密码即可，不用 root 密码；</li><li>wheel：这个组只有一个 root 用户，是 root 用户的专属组；</li></ul><p>所以，对于<code>drwxr-xr-x</code>而言，正常情况下 admin 用户对它不具备写的权限！这也是为什么上面会报错的原因！</p><p>解决这个问题，有两种思路：</p><ul><li><p>方法一：使用<code>sudo npm install -g moment</code>命令代替<code>npm install -g moment</code></p><p>  root 用户对<code>/usr/local/lib/node_modules/</code>有写的权限，所以使用<code>sudo</code>让管理员用户暂时具备 root 用户的权限，这样就可以完成安装了！虽然这样可以成功安装软件包到<code>/usr/local/lib/node_modules/</code>中，但是这种方式是不可取的！因为<code>sudo</code>只对当前命令有效，假如我们执行的是更新语句的话，分为卸载和安装两个步骤，<code>sudo</code>只对卸载旧版本有效，对安装新版本就无效了，所以不能使用这种方式；</p><p>  <font color=red>我们在使用 npm 进行全局安装时，应该尽量避免甚至完全不用<code>sudo</code>！</font></p></li><li><p>方法二：修改<code>/usr/local/lib/node_modules/</code>的权限，让其他用户（包括 admin）对该目录具备写权限</p><p>  因为 admin 对<code>node_modules</code>的所有上级目录都具备可执行权限，在这种情况下，只要它再对<code>node_modules</code>具备写的权限，那么 admin 就可以写这个目录了，这是 Linux 的权限机制！</p><p>  <font color=red>显然这种方式更可取，这样在安装的时候就可以不用<code>sudo</code>了，而且可以一劳永逸！</font></p></li></ul><p>具体的操作步骤：</p><ol><li><p>打开终端，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 757 /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure><p>这一步是为了让 admin 用户对<code>/usr/local/lib/node_modules/</code>具备写的权限！</p></li><li><p>打开终端，继续执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 757 /usr/local/bin</span><br></pre></td></tr></table></figure><p>因为在全局安装时，经常需要在<code>/usr/local/bin</code>中创建一些软连接，并让它们指向下载的包中的真实的命令，所以我们同时需要让当前用户（admin）对<code>/usr/local/bin</code>也具备写的权限！这一步就是做这个的。</p></li></ol><p>经过这两个命令以后，使用全局安装的时候，就能轻松地将软件包安装到<code>/usr/local/lib/node_modules/</code>中了，并且伺候不管是下载、安装还是更新，都能一劳永逸！比如此时我全局安装 moment 包就可以成功：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021155805416.png"></p><p><font color='red'><strong>综上</strong></font>：安装完 Nodejs 后，使用全局安装之前，需要使用如下两个命令来改变文件的权限，仅此而已</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 757 /usr/local/lib/node_modules</span><br><span class="line">sudo chmod 757 /usr/local/bin</span><br></pre></td></tr></table></figure><p>在使用 npm 全局安装包的时候，就单纯的安装操作而言，我们直接使用<code>sudo</code> 配合<code>-g</code>参数就可以安装完成，后续也不影响对所安装软件包的使用（因为管理员用户对这个目录具备读的权限），但是为了简化每一次的安装和卸载，所以我修改了<code>/usr/local/lib/node_modules/</code>的权限；其次，为了能顺利在<code>/usr/local/bin</code>中创建能指向安装包中的命令的软连接，还需要修改<code>/usr/local/bin</code>的权限。二者缺一不可，一劳永逸！</p><p>全局安装时，包会被安装到<code>/usr/local/lib/node_modules/</code>目录下（目录本就存在，但要修改该权限）；</p><p><font color='red'><strong>注意</strong></font>：全局安装的包，在卸载时也需要使用<code>-g</code>参数来全局卸载！</p><h2 id="3-3：换镜像源"><a href="#3-3：换镜像源" class="headerlink" title="3.3：换镜像源"></a>3.3：换镜像源</h2><p>所谓 npm 镜像源，就是指使用<code>npm</code>命令来安装包的时候，通过网络下载的包的来源。</p><p>执行命令<code>npm config get registry</code>可以查看 npm 的镜像源，默认的镜像源是：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021155905051.png"></p><p>默认的镜像源是国外的，有时候我们在国内使用 npm 默认的镜像源时，会因为网络问题导致失败。在这种情况下我们可以更换为国内的镜像源，常见的 npm 镜像源有如下三种：</p><ul><li>腾讯镜像源：<a href="http://mirrors.cloud.tencent.com/npm/">http://mirrors.cloud.tencent.com/npm/</a></li><li>淘宝镜像源：<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></li><li>华为镜像源：<a href="https://mirrors.huaweicloud.com/repository/npm/">https://mirrors.huaweicloud.com/repository/npm/</a></li></ul><p>此外，更换镜像源的方式有两种：</p><ul><li><p><font color='red'>暂时修改镜像源</font></p><p>比如使用淘宝源全局下载 moment，可以执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npmmirror.com install -g moment</span><br></pre></td></tr></table></figure><p>这种方式不会修改 npm 默认的镜像源，下次使用<code>npm install</code>命令来安装时，依然使用 npm 默认的镜像源！而卸载的时候就不需要指定镜像源了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g moment</span><br></pre></td></tr></table></figure></li><li><p><font color='red'>永久修改镜像源</font></p><p>我们可以永久修改 npm 镜像源，这样一来每次都可以使用我们配置的镜像源来下载，而不用指定镜像源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>对 npm 进行了自己的配置后，会在用户目录下生成名为<code>.npmrc</code>的隐藏文件，以“key&#x3D;value”的形式记录配置！</p><p>注意这里不要添加<code>-g</code>参数，如果添加了的话，就只是修改了全局安装时的镜像源，局部安装的镜像源没有修改！</p></li></ul><p>PS：我们还可以使用 npm 安装 cnpm，因为 cnpm 默认使用淘宝源，但我不推荐，因为 cnpm 的安装目录比较奇怪！</p><h2 id="3-4：更新npm"><a href="#3-4：更新npm" class="headerlink" title="3.4：更新npm"></a>3.4：更新npm</h2><p>一般 Nodejs 中自带的 npm 不是最新的，需要更新 npm。比如前面我第一次使用 npm 安装 moment 时，就给出了提示：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021154902742.png"></p><p>当然，假如你第一次忽略了这个版本提醒，后面再使用时就不会给出版本提醒了，除非你删除了用户目录下的<code>.npm</code>文件后再执行<code>npm</code>命令！</p><p>我们可以使用命令如下命令来查看当前 npm 的最新版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view npm version</span><br></pre></td></tr></table></figure><p>比如我这里：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021160311613.png"></p><p>但是此时若直接执行更新命令<code>npm install -g npm@10.2.1</code>的话，会出现错误：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021160839704.png"></p><p>其实这里的问题跟本文 3.2 中的情况是相同的，同样需要处理权限问题，我这里就不再赘述了（我觉得其实也没必要更新它，只要不删除用户目录下的<code>.npm</code>文件的话，以后在使用它的时候不会再提示更新）！</p><h1 id="第四节：常用命令"><a href="#第四节：常用命令" class="headerlink" title="第四节：常用命令"></a>第四节：常用命令</h1><p>npm 的命令都采用<code>命令</code>+<code>参数</code>的形式！</p><h2 id="4-1：帮助"><a href="#4-1：帮助" class="headerlink" title="4.1：帮助"></a>4.1：帮助</h2><p>在 npm 中，有一个最重要的命令，就是<code>npm help</code>，这个命令可以查看所有其他 npm 命令的用法：</p><p><img src="https://www.czblogs.cn/posts/macos/09/image-20231021161452100.png"></p><p>假如要查看某个特定命令的用法，可以使用<code>npm help 命令</code>，比如查看<code>config</code>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm help config</span><br></pre></td></tr></table></figure><h2 id="4-2：配置"><a href="#4-2：配置" class="headerlink" title="4.2：配置"></a>4.2：配置</h2><ul><li><p>使用<code>npm config key=value</code>进行配置，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry=https://registry.npmmirror.com  # 这里的等号也可以用空格替代</span><br></pre></td></tr></table></figure></li><li><p>使用<code>npm config get key</code>查看配置，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry # 假如要查看多个，可以用空格隔开</span><br></pre></td></tr></table></figure></li></ul><p>所有的使用细节，可以使用<code>npm config --help</code>来查看大概用法，使用<code>npm help config</code>来查看详细用法！</p><h2 id="4-3：安装"><a href="#4-3：安装" class="headerlink" title="4.3：安装"></a>4.3：安装</h2><p>安装指定包，默认是局部安装，<code>-g</code>参数表示全局安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install [-g] package</span><br></pre></td></tr></table></figure><h2 id="4-4：更新"><a href="#4-4：更新" class="headerlink" title="4.4：更新"></a>4.4：更新</h2><p>更新指定包，默认是局部更新，<code>-g</code>参数表示全局更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update [-g] package</span><br></pre></td></tr></table></figure><h2 id="4-4：卸载"><a href="#4-4：卸载" class="headerlink" title="4.4：卸载"></a>4.4：卸载</h2><p>卸载指定包，默认是局部卸载，<code>-g</code>参数表示全局卸载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall [-g] package</span><br></pre></td></tr></table></figure><h2 id="4-5：查看"><a href="#4-5：查看" class="headerlink" title="4.5：查看"></a>4.5：查看</h2><p>查看当前安装的软件包，默认查看局部安装的软件包，<code>-g</code>参数表示查看全局安装的软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list [-g]</span><br></pre></td></tr></table></figure><p>查看软件包的安装位置，默认是查看局部安装位置，<code>-g</code>参数表示查看全局安装位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root [-g]</span><br></pre></td></tr></table></figure><p>查看具体某个软件包的安装位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root package</span><br></pre></td></tr></table></figure><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Nodejs </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew的安装配置和使用</title>
      <link href="/post/10008.html"/>
      <url>/post/10008.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><p>Homebrew 是 macOS 平台上最常用也是最好用的一个包管理工具，使用它给 Mac 下载、安装、卸载软件时，基本上都只需要一条命令，如果你是一位使用Mac的开发者，还没有安装Homebrew的话，那就太不应该了！</p><p>这里我要先声明两点：</p><ul><li><p>英特尔芯片的 Mac 安装 Homebrew 是很简单的，默认安装位置是<code>/usr/local</code>，我这里就不再赘述了；</p></li><li><p>苹果芯片的 Mac 刚出来的时候，安装 Homebrew 是比较复杂的。第一，是因为默认安装的目录跟 英特尔芯片的电脑不同，默认安装的位置是<code>/opt/homebrew</code>；第二，是需要处理一些文件夹的权限问题，但随着 Homebrew 的版本更新，虽然默认的安装位置没变，但是截止到我写这篇博文的时间，也就是 2023 年 9 月 8 日，已经不需要再额外处理权限问题了！</p></li></ul><p>这篇博文详细记录了如何在苹果芯片的 macOS 上安装和使用支持 ARM 架构的 Homebrew！</p><h1 id="第二节：检测环境"><a href="#第二节：检测环境" class="headerlink" title="第二节：检测环境"></a>第二节：检测环境</h1><p>在安装 Homebrew 之前，首先查看目录<code>/opt/</code>下面没有名为<code>homebrew</code>的子目录，我这是一台新电脑，显然没有：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021132854441.png"></p><p>其次，还需要在终端中执行命令<code>brew --version</code>来检测是否存在 Homebrew，当然也不会有的：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021133045993.png"></p><p>综合以上两点，说明当前环境中并没有安装 Homebrew！就算不是新的电脑，假如满足这两个条件，我们也可以认为当前系统中不存在 Homebrew！</p><p>PS：在安装软件之前检测本机是否已经安装了要安装的软件，这是一个必要的操作，也是一个好习惯！</p><h1 id="第三节：安装条件"><a href="#第三节：安装条件" class="headerlink" title="第三节：安装条件"></a>第三节：安装条件</h1><p>打开<a href="https://brew.sh/index_zh-cn">Homebrew的官网</a>，首页赫然展示的就是安装 Homebrew 的命令：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021133925788.png"></p><p>其实，只需要将这里的命令复制到终端中执行，即可完成安装。但是在安装之前，点击上图中的<code>这里</code>，可见：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021144620878.png"></p><p>这是安装 Homebrew 时，macOS 需要满足的条件：</p><ul><li>搭载 Intel 芯片或苹果芯片的 macOS（废话）；</li><li>macOS 的版本至少要在 11 以上；</li><li>必须提前安装命令行开发者工具（CLT）；</li><li>必须使用Bourne-again shell（Bash）终端来安装，Mac 是自带 bash 终端的，即<code>/usr/bin/bash</code>；</li></ul><p>其中有这么一条：<font color='red'>必须提前安装命令行开发者工具</font>！命令行开发者工具是将Mac作为开发工具的第一步操作，我不信还有人的Mac没有安装 CLT！！！</p><h1 id="第四节：安装程序"><a href="#第四节：安装程序" class="headerlink" title="第四节：安装程序"></a>第四节：安装程序</h1><p>在官网上，安装条件的第四条说明了，必须使用 bash，使用其他常规的 shell 将会失败：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021144956117.png"></p><p><font color=red>友情提示</font>：较新版本的 macOS 终端默认使用的是 zsh（包括我这里的 14.0），我试过使用 zsh 安装，结果是也能安装成功，我觉得是 Homebrew 的官网上信息很久没更新了，因为较老版本的 macOS 的终端默认是使用 bash 的，现在已经默认使用 zsh 了！但是为了保险起见，我还是使用<code>/bin/bash</code>来执行安装的命令！</p><p>打开访达，切换到<code>/bin</code>，右击<code>bash</code>选择使用终端打开，再把官网上的安装命令贴进去：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021145241014.png"></p><p>按下回车需要输入开机密码：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021145345605.png"></p><p>输入密码并回车（注意输入密码的时候，键入的密码并不会出现在终端中，你只管正确输入即可）后，开始安装：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021145511355.png"></p><p>此时键入回车键，继续安装，直到最后安装成功：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021145709620.png"></p><p>从这里可以看出来，Homebrew安装成功了！查看目录<code>/opt</code>中的内容，可以看到安装的 Homebrew：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021145953498.png"></p><h1 id="第五节：配置环境"><a href="#第五节：配置环境" class="headerlink" title="第五节：配置环境"></a>第五节：配置环境</h1><h2 id="5-1：官方推荐"><a href="#5-1：官方推荐" class="headerlink" title="5.1：官方推荐"></a>5.1：官方推荐</h2><p>安装 Homebrew 前后，macOS 的系统 PATH 变量没有任何变化：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021150312442.png"></p><p>安装程序的最后给出提示，安装的 Homebrew 并不在我们的环境变量中，并且还给出了如何配置环境变量的方法：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021150433799.png"></p><p>将推荐中的两条命令复制下来依次拿到终端中去执行就能配置环境变量了，之后会在用户目录下生成名为<code>.zprofile</code>的配置文件，文件内容为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure><p>然后使用命令<code>echo $PATH</code>查看系统的 PATH 变量的话，会再原本 PATH 变量的最前面，添加如下内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/homebrew/bin:/opt/homebrew/sbin:</span><br></pre></td></tr></table></figure><p><font color='red'><strong>说明</strong></font>：文件<code>.zprofile</code>中的内容就是把<code>/opt/homebrew/bin</code>和<code>/opt/homebrew/sbin</code>加到系统 PATH 里面了！</p><h2 id="5-2：我的推荐"><a href="#5-2：我的推荐" class="headerlink" title="5.2：我的推荐"></a>5.2：我的推荐</h2><p>前面的方式是 Homebrew 的推荐方式，除此之外，我们还可以按照自己习惯的方式来配置环境变量！</p><p>打开终端，<font color=red>在用户目录下</font>找到（或新建）名为<code>.zprofile</code>的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .zprofile</span><br></pre></td></tr></table></figure><p>然后将下面的内容粘贴进去（假如文件中已经存在其他内容，就将下面的内容追加在文件的最后）：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Setting PATH for Homebrew</span><br><span class="line">PATH=&quot;/opt/homebrew/bin:/opt/homebrew/sbin:$&#123;PATH&#125;&quot;</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>这种方式跟前面的方式一样，重启终端后查看 PATH 变量，发现同样会：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021150744449.png"></p><h1 id="第六节：检测结果"><a href="#第六节：检测结果" class="headerlink" title="第六节：检测结果"></a>第六节：检测结果</h1><p>经过上面的三步操作以后，按道理讲 Homebrew 就安装完成了，重新打开终端，直接执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure><p>假如此时能正确输出 Homebrew 的版本号，就表示安装和配置成功了： </p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021150843552.png"></p><h1 id="第七节：使用细节"><a href="#第七节：使用细节" class="headerlink" title="第七节：使用细节"></a>第七节：使用细节</h1><p><font color=red>友情提示：以下内容是 2023-10-21 日更新！</font></p><p>这一节的主要内容是分析 Homebrew 的使用细节，比如使用<code>brew install 软件包</code>来安装软件时，软件被安装到了系统的什么位置，以及创建了什么样的软连接，再比如使用<code>brew uninstall 软件包</code>来卸载软件时的细节！</p><h2 id="7-1：软件安装"><a href="#7-1：软件安装" class="headerlink" title="7.1：软件安装"></a>7.1：软件安装</h2><p>在 Homebrew 的官网上有这么一段描述：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021151236600.png"></p><p>也就是说，Homebrew 会将软件安装到“独立目录”，通过配图可知，所谓的独立目录就是<code>/opt/homebrew/Cellar</code>！</p><p>我们可以做一个实验！打开终端，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><p>执行的情况为：</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021151526811.png"></p><p>通过比对系统前后的文件，发现安装命令做了如下两件事。</p><p>第一：软件包被安装到<code>/opt/homebrew/Cella</code>目录中了（这个目录原本是空的）；</p><p>第二：在<code>/opt/homebrew/bin</code>下面创建了一个名为<code>tree</code>的软连接，链接至安装的软件包中的真实命令</p><p><img src="https://www.czblogs.cn/posts/macos/08/image-20231021151712919.png"></p><p><font color=red>也就是说：使用 Homebrew 安装软件时，只会影响 Homebrew 自己的安装目录，不会影响到系统中其他任何目录！</font>正是因为我们在配置 Homebrew 时将目录<code>/opt/homebrew/bin</code>配置到系统的 PATH 环境变量中了，所以此时我们就可以使用其中安装的命令了！</p><p><font color=red>特别注意</font>：假如使用 Homebrew 安装系统中<code>/usr/bin</code>中原本就存在的命令时，会覆盖原本的命令，不是说修改了原本命令的链接，而是因为 Homebrew 在系统环境变量 PATH 中的位置<code>/opt/homebrew/bin</code>在<code>/usr/bin</code>之前！同时，因为它也在<code>/usr/local/bin</code>前面，也会覆盖 Nodejs 安装的命令！！！</p><h2 id="7-2：软件卸载"><a href="#7-2：软件卸载" class="headerlink" title="7.2：软件卸载"></a>7.2：软件卸载</h2><p>使用命令<code>brew uninstall 软件包</code>来卸载软件的时候，就会将安装软件时做的那两件事“复原”，这里就不赘述了！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果芯片的macOS安装Git</title>
      <link href="/post/10007.html"/>
      <url>/post/10007.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><p>对于开发人员而言，肯定都使用过 Git，而且基本上每天都在使用，但是在 Windows 和 macOS 上安装 Git 是不同的：</p><ul><li><p>在 Windows 平台上安装很简单，只需要下载下来安装程序，进行傻瓜式安装就可以了。需要主要的是：因为 Git 的官网是国外的网站，直接从官网上下载的话，经常会因为网络问题而失败，常用的解决方式就是借助淘宝的 NPM 镜像站来下载。</p><p>友情提示：从 2022 年 05 月 31 日开始，淘宝 npm 镜像源的域名更改为：<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></p></li><li><p>在 macOS 平台上，安装 Git 有很多种方式，比如使用 Command Line Tools 或 Homebrew，虽然安装的方式有很多种，但是相对而言较简单。</p></li></ul><p>这篇博文的主要内容就是介绍如何在 macOS 平台上安装配置 Git，并且解释一些 Git 的配置原理！</p><h1 id="第二节：安装-Git"><a href="#第二节：安装-Git" class="headerlink" title="第二节：安装 Git"></a>第二节：安装 Git</h1><p>在 macOS 上安装 Git，不管是 Intel 芯片还是苹果芯片的电脑，最简单的方式就是通过安装命令行工具（Command Line Tools）！<font color='red'>实际上，命令行工具中内置 Git，根本不需要自己再去下载安装 Git，这也是我推荐的方式！</font></p><p>关于如何给 macOS 安装命令行工具，以及安装命令行工具后系统的变化，都不是这篇博文的重点，在这里就不赘述了！</p><p>在安装命令行工具之前，假如你还没安装 Git 的话，这个时候执行命令<code>git --version</code>，可见系统中找不到 Git：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020143147454.png"></p><p>刚安装完命令行工具后，再执行该命令后可见：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020143259395.png"></p><p>顺便提一句，在没安装命令行工具之前，系统的<code>/usr/bin/</code>目录下就已经有名为<code>git</code>的可执行文件：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020143308310.png"></p><p><font color='red'>安装完命令行工具后，这里的可执行文件就自动指向了其中安装的 Git</font>。跟 python3 一样，即使不安装命令行工具，该目录下也有这个命令，只是在安装完以后，<code>/usr/bin/python3</code>就会自动指向命令行工具中内置的 python 环境，并且从文件上来看并没有生成链接，这是 macOS 和 CLT 本身的处理，没必要关注！</p><h1 id="第三节：配置-Git"><a href="#第三节：配置-Git" class="headerlink" title="第三节：配置 Git"></a>第三节：配置 Git</h1><p><font color=red><strong>先验知识：Git 的所有配置是以文件的形式存储的！</strong></font></p><h2 id="3-1：Git的配置原理"><a href="#3-1：Git的配置原理" class="headerlink" title="3.1：Git的配置原理"></a>3.1：Git的配置原理</h2><p>Git 的配置分为系统级别、全局级别、项目级别这三个等级：</p><table><thead><tr><th align="center">权重</th><th align="center">中文名</th><th align="center">优先级</th><th align="center">配置文件</th></tr></thead><tbody><tr><td align="center">system</td><td align="center">系统级别</td><td align="center">低</td><td align="center"><code>etc/gitconfig</code></td></tr><tr><td align="center">global</td><td align="center">全局级别</td><td align="center">中</td><td align="center"><code>~/.gitconfig</code></td></tr><tr><td align="center">local</td><td align="center">仓库级别</td><td align="center">高</td><td align="center"><code>.git/config</code></td></tr></tbody></table><p>这三层配置具有不同的优先级，假如在这三个配置文件中定义的值有冲突的话，以优先级高的为准。比如在仓库级别和全局级别中都配置了用户名和邮箱，那么仓库级别的配置将发挥作用！</p><p><font color='red'><strong>Git 的配置文件</strong></font></p><ul><li>系统配置：配置文件一般是<code>/etc/gitcongif</code>，但假如使用的是CLT中内置的Git的话，配置文件是在CLT的安装目录中，具体位置是<code>/Library/Developer/CommandLineTools/usr/share/git-core/gitconfig</code>！</li><li>全局配置：配置文件是<code>~/.gitconfig</code>。默认该文件不存在，除非使用安装程序进行安装并在安装过程中进行全局配置时，才会生成这个文件；如果不是的话，这个文件只有在你第一次进行全局配置时才会自动生成！</li><li>项目配置：配置文件就是项目目录下的<code>.git/config</code>文件。这个文件不会发生变化，不管你是在什么平台上使用什么版本的 Git，项目级别的配置文件都不会发生变化！</li></ul><p><font color='red'><strong>查看 Git 的配置</strong></font></p><p>除了通过上面提到的三个配置文件来查看 Git 的配置以外，还可以使用<code>git config --list</code>来查看。比如我刚安装完命令行工具后、进行全局配置之前，查看 Git 的配置：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020143655398.png"></p><h2 id="3-2：配置环境变量"><a href="#3-2：配置环境变量" class="headerlink" title="3.2：配置环境变量"></a>3.2：配置环境变量</h2><p>终端中执<code>git --version</code>命令可以直接输出 Git 版本号，使用<code>which</code>命令可见 Git 的命令是在<code>/usr/bin</code>目录下的，而这个目录本来就在 macOS 的 PATH 环境变量中：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020143836079.png"></p><p>这两点都说明：<font color='red'><strong>使用命令行工具内置的 Git，我们不需要再单独配置环境变量</strong></font>！</p><h2 id="3-3：用户名和邮箱"><a href="#3-3：用户名和邮箱" class="headerlink" title="3.3：用户名和邮箱"></a>3.3：用户名和邮箱</h2><p>对于 Git 而言，用户名和邮箱地址这两条配置很重要，每次使用 Git 提交时都会引用这两条信息，用来说明是谁提交了内容更新，所以会随更新内容一起被永久纳入历史记录！而用户名和邮箱是用户可以任意自定义的，Git 在系统配置中不可能预先设置这两个配置，<font color='red'>所以在使用 Git 之前</font>，<font color='red'>配置用户名和邮箱就是必要的操作</font>！</p><p>Git 允许你设置一个全局的用户名和邮箱，同时也允许你为每个项目设置单独的用户名和邮箱。为了方便使用，我们一般会配置一个全局的，如果有需要的话，再在项目级别配置特殊的用户名和邮箱。</p><p>配置全局用户名和邮箱，使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱地址</span><br></pre></td></tr></table></figure><p>比如我在配置用户名和邮箱时是这样的：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020144159787.png"></p><p>执行了全局配置以后，在用户目录下就会生成<code>.gitconfig</code>的配置文件，文件内容为：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020144359565.png"></p><p>此时再通过<code>git config --list</code>命令来查看 Git 的配置：</p><p><img src="https://www.czblogs.cn/posts/macos/07/image-20231020145010110.png"></p><p>假如要修改用户名和邮箱配置的话，只需要修改全局配置文件的内容即可，当然也可以通过<code>config</code>命令重新设置！</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果芯片的macOS安装命令行工具</title>
      <link href="/post/10006.html"/>
      <url>/post/10006.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><h2 id="1-1：什么是命令行工具"><a href="#1-1：什么是命令行工具" class="headerlink" title="1.1：什么是命令行工具"></a>1.1：什么是命令行工具</h2><p>命令行工具（Command Line Tools）是 macOS 上至关重要的插件，苹果官方是这么介绍它的：下载 macOS SDK、标题和构建工具（如 Apple LLVM 编译器和 Make），能助您轻松安装开源软件或在终端内的 UNIX 上进行开发。macOS 可以在您首次尝试构建软件时自动下载这些工具，您也可以随时在下载页面找到它们。</p><p>简单地说，命令行工具有两个用处：</p><ul><li><font color='red'>使用Mac电脑终端开发软件</font>；</li><li><font color='red'>让开源软件能够顺利安装</font>；</li></ul><p>简单来说，Command Line Tools 就是一个小型独立包，为 macOS 终端用户提供了很多常用的工具、实用程序和一些编译器，包括但不限于 svn、git、make、gcc、clang、perl、size、strip、cpp、python3…</p><p>在使用 Mac 终端进行开发的时候，需要用到比如 Git 之类的工具！在 macOS 系统中原本就存在一些命令，也就是可执行文件，在<code>/usr/bin</code>目录下的那些常用命令，如 git 和 python3 等，这些命令虽然原本就存在，但是并不能使用！如：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020135808310.png"></p><p>再比如：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020135927169.png"></p><p>这些命令本身就存在，但是在使用的时候，Mac 终端会给出如下提示（此图已经更新过）：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020135947454.png"></p><p>这些工具会在我们安装完命令行开发者工具以后，就能正常使用了！</p><h2 id="1-2：我的-macOS-版本"><a href="#1-2：我的-macOS-版本" class="headerlink" title="1.2：我的 macOS 版本"></a>1.2：我的 macOS 版本</h2><p>我这里安装命令行工具的 macOS 版本是 macOS Sonoma 14.0 版！</p><h1 id="第二节：安装配置"><a href="#第二节：安装配置" class="headerlink" title="第二节：安装配置"></a>第二节：安装配置</h1><p>下载安装 Command Line Tools 有两种方式：</p><ul><li>第一种是去 Apple 开发者网站上去下载，下载之前需要先免费注册成为 Apple 开发者，然后再登陆下载；</li><li>第二种方式就比较简单了，可以通过 Mac 自带的终端，执行命令来安装（国内可能会因为网络问题而失败）；</li></ul><h2 id="2-1：下载安装"><a href="#2-1：下载安装" class="headerlink" title="2.1：下载安装"></a>2.1：下载安装</h2><p>这里我选择使用第二种方式。打开终端，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>按下回车键的时候，终端会给出提示：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020140409917.png"></p><p>点击安装，又会弹出协议，点击“同意”：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020140557483.png"></p><p>然后会自动查找软件：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020140734927.png"></p><p>查找到以后，就自动下载了：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020140805381.png"></p><p>刚开始展示的下载时间很长，但是网络好的话，很快就展示真实的下载时长了：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020140924113.png"></p><p>下载完成后会自动安装：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020141134095.png"></p><p>待安装完成后，点击“完成”即可：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020141405504.png"></p><h2 id="2-2：安装位置"><a href="#2-2：安装位置" class="headerlink" title="2.2：安装位置"></a>2.2：安装位置</h2><p>原本在<code>/Library</code>目录下，以<code>D</code>开头的目录只有<code>DirectoryServices</code>、<code>Documentation</code>、<code>DriverExtensions</code>！</p><p>安装完以后，就会在<code>/Library</code>下生成名为<code>/Developer/CommandLineTools</code>的目录，目录中的内容如下：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020142024664.png"></p><p>这些都是新生成的目录，其中三个子文件夹：</p><ul><li><code>Library</code>：安装的依赖库，我这里只能看到 python 的依赖库；</li><li><code>SDKs</code>：Apple APP 开发依赖的开发环境；</li><li><code>usr</code>：这个文件夹的内容是很多的，在它里面有很多的命令和依赖等，主要是 gcc、pip3、git 等等；</li></ul><p>注意：在这里的<code>/CommandLineTools/Library/Frameworks/Python3.framework/Versions</code>中安装了 python3 ！</p><h2 id="2-3：环境变量"><a href="#2-3：环境变量" class="headerlink" title="2.3：环境变量"></a>2.3：环境变量</h2><p>在没安装命令行工具之前，macOS 的环境变量为(此图已经更新)：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020142129128.png"></p><p>而安装完以后，macOS的环境变量为：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020142306822.png"></p><p>可见此时系统环境变量实际上并没有什么变化！而且此时可以直接使用<code>/usr/bin</code>目录下的命令，而不用配置环境变量！</p><h2 id="2-4：个人思考"><a href="#2-4：个人思考" class="headerlink" title="2.4：个人思考"></a>2.4：个人思考</h2><p>安装完命令行开发工具以后，我们在终端中就能使用这些命令了：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020142434564.png"></p><p>首先，我们先来看一下在终端中使用的这些命令来自哪里：</p><p><img src="https://www.czblogs.cn/posts/macos/06/image-20231020142515905.png"></p><p>查看安装命令行工具前后 macOS 的 PATH 变量和指定文件，发现没有任何变化！最重要的是，查看命令行开发者工具目录中的这些命令，他们也没有指向<code>/usr/bin/</code>目录中的那些命令；同时<code>/usr/bin</code>中那些系统原本就存在但是无法使用的命令也没指向 CLT 中安装的命令！那就很奇怪了，为什么在<code>/Library/Developer/CommandLineTools/</code>中安装的这些命令可以被终端找到并使用呢？？？</p><p>其实这里就没必要关注这个问题了，即然 Mac 在<code>/usr/bin</code>目录中预留了<code>python3</code>和<code>pip3</code>等命令（虽然不能默认是不能使用的），而且命令行开发者工具又是为 macOS 量身定做，那么他们肯定在我们不得知的地方进行了特殊的处理，所以它就把<code>/Library/Developer/CommandLineTools/</code>目录中安装的这些命令都映射到了<code>/usr/bin</code>目录中原本存在的这些命令上了！</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Command Line Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果芯片的macOS安装配置VSCode</title>
      <link href="/post/10005.html"/>
      <url>/post/10005.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：下载和安装"><a href="#第一节：下载和安装" class="headerlink" title="第一节：下载和安装"></a>第一节：下载和安装</h1><p>浏览器访问 VSCode 的<a href="https://code.visualstudio.com/">官网</a>，点击页面的下载链接：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020125527693.png"></p><p>下载下来的是一个<code>.app</code>格式的安装程序：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020125800526.png"></p><p>最后直接将这个文件拖动到应用程序文件夹中即可完成安装，之后从启动台来启动VSCode即可！</p><h1 id="第二节：自定义设置"><a href="#第二节：自定义设置" class="headerlink" title="第二节：自定义设置"></a>第二节：自定义设置</h1><h2 id="2-1：语言设置"><a href="#2-1：语言设置" class="headerlink" title="2.1：语言设置"></a>2.1：语言设置</h2><p>刚启动 VSCode 时，右下角会提示是否要切换到简体中文，点击“安装并重启”，稍等片刻即可切换语言为简体中文！</p><h2 id="2-2：用户登录"><a href="#2-2：用户登录" class="headerlink" title="2.2：用户登录"></a>2.2：用户登录</h2><p>VSCode 支持用户登陆，登陆用户可以同步自己的个性化设置，所以在设置之前最好登陆一下，然后以后每次重新安装的时候就不用重复设置了，只需要登陆即可。</p><p>点击左下角的头像按钮，选择“备份和同步设置…”，然后点击顶部的<code>登陆</code>：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020130801735.png"></p><p>最后选择使用 Github 账号或者 Microsoft 账号登陆都可以，在弹出的网页上输入账号和密码并点击登陆，当展示：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020131231669.png"></p><p>则表示登陆成功，此时右下角会展示：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020131327709.png"></p><h2 id="2-3：受信任区"><a href="#2-3：受信任区" class="headerlink" title="2.3：受信任区"></a>2.3：受信任区</h2><p>在 VSCode 中有“受信任区”这么个说法，所谓受信任区，简单理解就是 VSCode 可以访问和编辑的文件目录，假如使用 VSCode 打开非信任区的文件时，总是会给出提示：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020131517298.png"></p><p>我们需要将本机所有的目录都放到信任区中，这样以后使用 VSCode 打开任意位置的文件时，就不会有警告了！</p><p>点击左下角的盾牌图标，接着点击<code>添加文件夹</code>：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020131609871.png"></p><p>然后把本机根目录<code>/</code>添加进去：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020131715183.png"></p><p>然后直接关闭这个页面，即可完成设置！</p><h2 id="2-4：字体相关"><a href="#2-4：字体相关" class="headerlink" title="2.4：字体相关"></a>2.4：字体相关</h2><p>VSCode 的字体有两种，一是页面 UI 字体，二是编辑区的字体！我们可以通过<code>command</code>和<code>-</code>或<code>+</code>来调整界面 UI 字体大小，而对于编辑区的默认字体，需要打开设置，依次选择“文本编辑器” –&gt; “字体”：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020132806018.png"></p><p>还可以通过 Ctrl 和鼠标滚轮的组合来灵活修改编辑区字体。在设置页面搜索“Mouse Wheel Zoom”：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020132922757.png"></p><h2 id="2-5：Tab-Size"><a href="#2-5：Tab-Size" class="headerlink" title="2.5：Tab Size"></a>2.5：Tab Size</h2><p>在文本编辑器中，尤其是使用 VSCode 编辑代码时，我们一般会使用 Tab 键来执行缩进操作。但是 Tab 键有时候虽然看起来是缩进了 4 个空格，但是它在编码上并不代表 4 个空格。所以这里我们设置一下，设置后的效果就是：每当键入 Tab 时，都能不多不少地正确输入 4 个空格（但是假如你经常使用 VSCode 来编辑前段代码，那最好是设置为 2 个空格）！</p><p>第一步：设置一个制表符代表的空格数是 2。打开设置，搜索“Tab Size”，将一个制表符等于的空格数设置为 2：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020133228428.png"></p><p>第二步：关闭“Detect Indentation”。假如不关闭的话，VSCode 会根据文件内容自动推测 Tab 的空格数：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020133412652.png"></p><h2 id="2-6：控制字符"><a href="#2-6：控制字符" class="headerlink" title="2.6：控制字符"></a>2.6：控制字符</h2><p>VSCode 的编辑页面默认会隐藏空格等字符（其他编辑器基本也是这样），但我使用它主要是用来看代码的，所以我希望可以在编辑区展示包括空格在内的所有字符！</p><p>第一步：打开设置后搜索“Render Control Characters”，进行如下设置</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020133555571.png"></p><p>第二步：搜索“Render Whitespace”，将这一项的默认值由 selection 设置为 all</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020133756686.png"></p><h1 id="第三节：个性化插件"><a href="#第三节：个性化插件" class="headerlink" title="第三节：个性化插件"></a>第三节：个性化插件</h1><h2 id="3-1：文件图标"><a href="#3-1：文件图标" class="headerlink" title="3.1：文件图标"></a>3.1：文件图标</h2><p>当使用 VSCode 打开文件夹时，上级目录展示的图标都是箭头：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020133805147.png"></p><p>我们可以安装插件，让文件的图标更形象化，我使用的插件是<code>vscode-icons-mac</code>。打开插件市场搜索它：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020133947951.png"></p><p>点击安装，安装完成以后，可见效果：</p><p><img src="https://www.czblogs.cn/posts/macos/05/image-20231020134043705.png"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>实际上这个页面什么都没有，只是借用了系统的评论功能！你可以向我吐槽任何事情，甚至你有什么想吃的都可以告诉我哦～～</p></blockquote><p class="comments-title">留言须知</p><ul><li><input checked="" disabled="" type="checkbox"> 您对我的博客网站有任何想说的都可以给我留言</li><li><input checked="" disabled="" type="checkbox"> 留言时建议填入正确的邮箱（在昵称处输入正确的QQ号可以获取您的头像、昵称、邮箱），方便交流互动</li><li><input checked="" disabled="" type="checkbox"> 本站支持丰富的表情和图片上传，以满足您的需求</li><li><input checked="" disabled="" type="checkbox"> 请不要发表违反法律道德的内容，否则博主有权利删除您的留言</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面开发中～～"><a href="#页面开发中～～" class="headerlink" title="页面开发中～～"></a>页面开发中～～</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图片展</title>
      <link href="/album/index.html"/>
      <url>/album/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁紙收藏</div>  <p>收藏的一些壁纸，侵删</p>  <a href='/album/wallpaper'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/life.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">生活记录</div>  <p>这些是我快乐过的证据</p>  <a href='/album/life'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/work.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">迫于生计</div>  <p>谁又不是在努力地活着</p>  <a href='/album/work'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/indian.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">出差印度</div>  <p>人生中的最后一段青春</p>  <a href='/album/indian'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>1920*1200，适用中等屏幕，比1K的屏幕稍高</title>
      <link href="/1921/index.html"/>
      <url>/1921/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/1921/非主流01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1921/鬼刀01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1921/神泣01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1921/神泣02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1921/神泣03.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>本站版权协议</title>
      <link href="/copyright/index.html"/>
      <url>/copyright/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎访问 <a href="https://fattymonkey.com/">fattymonkey.com</a>（以下简称“本站”）！在使用本站的内容之前，请仔细阅读以下版权协议。</p></blockquote><p>生效日期：2023年09月01日～至今</p><h1 id="1-知识产权所有权"><a href="#1-知识产权所有权" class="headerlink" title="1. 知识产权所有权"></a>1. 知识产权所有权</h1><h2 id="1-1-内容版权"><a href="#1-1-内容版权" class="headerlink" title="1.1 内容版权"></a>1.1 内容版权</h2><p>  本站上的所有内容，包括但不限于文章、图片、音频、视频等，均受到相关版权法律的保护。未经授权，禁止复制、转载、修改、发布、传播本站的内容。</p><h2 id="1-2-原创作品"><a href="#1-2-原创作品" class="headerlink" title="1.2 原创作品"></a>1.2 原创作品</h2><p>  除非另有说明，本站的所有原创作品（包括但不限于文章、插图、独立设计等）均为本站所有，未经允许不得转载或使用于其他场合。</p><h1 id="2-内容使用许可"><a href="#2-内容使用许可" class="headerlink" title="2. 内容使用许可"></a>2. 内容使用许可</h1><h2 id="2-1-授权范围"><a href="#2-1-授权范围" class="headerlink" title="2.1 授权范围"></a>2.1 授权范围</h2><p>  除非明确说明，本站上的内容仅供个人非商业用途使用。任何商业用途的使用都需要事先取得我们的书面许可。</p><h2 id="2-2-引用和链接"><a href="#2-2-引用和链接" class="headerlink" title="2.2 引用和链接"></a>2.2 引用和链接</h2><p>  欢迎其他网站引用本站的内容，但必须明确标明出处，并提供链接指向原始页面。</p><h1 id="3-第三方内容"><a href="#3-第三方内容" class="headerlink" title="3. 第三方内容"></a>3. 第三方内容</h1><h2 id="3-1-引用和链接"><a href="#3-1-引用和链接" class="headerlink" title="3.1 引用和链接"></a>3.1 引用和链接</h2><p>  本站可能包含引用或链接到第三方网站的内容，这些内容的版权归原作者所有。对于第三方内容的使用，请遵循原作者的版权声明。</p><h1 id="4-免责声明"><a href="#4-免责声明" class="headerlink" title="4. 免责声明"></a>4. 免责声明</h1><p>本站的内容可能包含一些参考性信息，但不对其准确性、完整性和实用性作任何明示或暗示的保证。使用本站内容所产生的风险由用户自行承担。</p><h1 id="5-联系我"><a href="#5-联系我" class="headerlink" title="5. 联系我"></a>5. 联系我</h1><p>如果您对本版权协议有任何疑问或意见，请通过以下联系方式与我联系：</p><p>如果您对本隐私协议有任何疑问或意见，请通过以下联系方式与我联系：</p><ul><li><p>邮件：<a href="mailto:&#x31;&#x31;&#56;&#x35;&#x33;&#52;&#x39;&#56;&#52;&#x33;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;">&#x31;&#x31;&#56;&#x35;&#x33;&#52;&#x39;&#56;&#52;&#x33;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;</a></p></li><li><p>微信：18262607107</p></li></ul><h3 id="6-修改和更新"><a href="#6-修改和更新" class="headerlink" title="6. 修改和更新"></a>6. 修改和更新</h3><p>我们保留随时修改和更新本版权协议的权利，如果您发现本站在未声明的情况下使用了你受版权保护的内容，请与我联系，在修改时，我将在本页更新生效日期！ 感谢您的理解与支持！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>本站Cookies协议</title>
      <link href="/cookies/index.html"/>
      <url>/cookies/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎访问 <a href="https://fattymonkey.com/">fattymonkey.com</a>（以下简称“本站”）。为了提供更好的用户体验，我们使用Cookie技术。请在使用本站服务之前仔细阅读以下Cookie协议。</p></blockquote><p>生效日期：2023年09月01日～至今</p><h1 id="1-什么是-Cookie？"><a href="#1-什么是-Cookie？" class="headerlink" title="1. 什么是 Cookie？"></a>1. 什么是 Cookie？</h1><p>Cookie是一小段文本信息，由网站存储在用户计算机或移动设备上的浏览器中。这些文本文件允许网站记住用户的偏好设置、登录状态和其他信息，从而提供更个性化、高效的用户体验。</p><h1 id="2-本站使用的-Cookie"><a href="#2-本站使用的-Cookie" class="headerlink" title="2. 本站使用的 Cookie"></a>2. 本站使用的 Cookie</h1><h2 id="2-1-必要性-Cookie"><a href="#2-1-必要性-Cookie" class="headerlink" title="2.1 必要性 Cookie"></a>2.1 必要性 Cookie</h2><p>这些 Cookie 是为了使网站正常运行所必需的，包括用户登录状态、购物车等功能。禁用这些 Cookie 可能会导致网站部分功能无法正常使用。</p><h2 id="2-2-分析和性能-Cookie"><a href="#2-2-分析和性能-Cookie" class="headerlink" title="2.2 分析和性能 Cookie"></a>2.2 分析和性能 Cookie</h2><p>站长使用第三方工具（如Google Analytics）收集匿名的访问数据，帮助我们了解访问者如何使用本站。这些信息用于改进网站的功能和性能。</p><h2 id="2-3-广告-Cookie"><a href="#2-3-广告-Cookie" class="headerlink" title="2.3 广告 Cookie"></a>2.3 广告 Cookie</h2><p>本站可能使用广告服务商提供的 Cookie，以提供与用户兴趣相关的广告。</p><h1 id="3-如何控制-Cookie"><a href="#3-如何控制-Cookie" class="headerlink" title="3. 如何控制 Cookie"></a>3. 如何控制 Cookie</h1><h2 id="3-1-浏览器设置"><a href="#3-1-浏览器设置" class="headerlink" title="3.1 浏览器设置"></a>3.1 浏览器设置</h2><p>大多数浏览器允许用户管理Cookie的设置。您可以根据浏览器的说明自定义Cookie设置，包括禁用某些Cookie。</p><h2 id="3-2-第三方工具"><a href="#3-2-第三方工具" class="headerlink" title="3.2 第三方工具"></a>3.2 第三方工具</h2><p>您可以使用第三方工具，如Google Analytics Opt-out Browser Add-on，以拒绝Google Analytics收集您的信息。</p><h1 id="4-联系我"><a href="#4-联系我" class="headerlink" title="4. 联系我"></a>4. 联系我</h1><p>如果您对本Cookie协议有任何疑问或意见，请通过以下联系方式与我联系：</p><ul><li><p>邮件：<a href="mailto:&#x31;&#x31;&#56;&#53;&#x33;&#x34;&#57;&#56;&#x34;&#51;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x31;&#x31;&#56;&#53;&#x33;&#x34;&#57;&#56;&#x34;&#51;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;</a></p></li><li><p>微信：18262607107</p></li></ul><h1 id="5-更新-Cookie-协议"><a href="#5-更新-Cookie-协议" class="headerlink" title="5. 更新 Cookie 协议"></a>5. 更新 Cookie 协议</h1><p>站长保留随时修改和更新本Cookie协议的权利，在修改时，我将在本页发布生效日期！感谢您的理解与支持！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>客官打赏单</title>
      <link href="/donate/index.html"/>
      <url>/donate/index.html</url>
      
        <content type="html"><![CDATA[<div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>感谢以下客官的打赏，每篇文章的结尾都有给我充电的入口哦～～</p></div><table><thead><tr><th align="center">客官大名</th><th align="center">时间</th><th align="center">渠道</th><th align="center">金额</th><th align="center">留言</th></tr></thead><tbody><tr><td align="center">我有小饼干哦🍪</td><td align="center">2024-02-01</td><td align="center">微信</td><td align="center">1.00</td><td align="center">无留言</td></tr><tr><td align="center">饭饭爱吃饭</td><td align="center">2024-01-03</td><td align="center">支付宝</td><td align="center">8.88</td><td align="center">无留言</td></tr><tr><td align="center">我是武松啊</td><td align="center">2024-01-09</td><td align="center">微信</td><td align="center">6.60</td><td align="center">无留言</td></tr></tbody></table>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>开发记录</title>
      <link href="/devrecord/index.html"/>
      <url>/devrecord/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个页面用来记录主题的魔改记录以及一些灵感，选中的是已经完成的，未选中的是将来要做的</p></blockquote><h1 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list:"></a>To do list:</h1><h2 id="站点"><a href="#站点" class="headerlink" title="站点"></a>站点</h2><ul><li><input checked="" disabled="" type="checkbox"> 移除自定义页面和归档页侧边栏</li><li><input checked="" disabled="" type="checkbox"> 移除页面的评论区（文章页和留言板页面除外）</li><li><input checked="" disabled="" type="checkbox"> 关闭除首页外所有页面的侧边栏</li><li><input checked="" disabled="" type="checkbox"> 添加全局吸底的音乐播放器设置（Aplayer）</li><li><input checked="" disabled="" type="checkbox"> 将所有页面中的所有卡片设置为透明</li><li><input disabled="" type="checkbox"> 弹窗的样式修改，尤其是切换深浅模式的提示弹窗</li><li><input disabled="" type="checkbox"> 配置搜索引擎收录，SEO优化</li><li><input disabled="" type="checkbox"> 所有的分割线都要替换，默认的分割线是剪刀形，还要修改颜色跟主题一致</li><li><input disabled="" type="checkbox"> 文章页末尾的微信赞赏图要重新生成一下，目前用的这个不是很好</li></ul><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><ul><li><input checked="" disabled="" type="checkbox"> 全局设置一图流并优化图片加载</li><li><input checked="" disabled="" type="checkbox"> 将导航栏的菜单设置为水平居中</li><li><input checked="" disabled="" type="checkbox"> 引入阿里图标来替换社交图标，并适配深浅模式</li><li><input checked="" disabled="" type="checkbox"> 全局字体更换（已完成），并引入不同字重，因为此时很多字重效果没有</li><li><input disabled="" type="checkbox"> 把深浅模式切换按钮搬到导航栏</li><li><input disabled="" type="checkbox"> 将首页的文章列表改成瀑布流效果</li><li><input disabled="" type="checkbox"> 鼠标移动到文章卡片上时，显示卡片边框并适配深浅模式</li><li><input disabled="" type="checkbox"> 文章卡片加上标签，并将分类和标签单独占一行</li></ul><h2 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h2><ul><li><input checked="" disabled="" type="checkbox"> 页脚样式的基本魔改，建设各个元素的效果并优化代码</li><li><input checked="" disabled="" type="checkbox"> 搭建自己的 ChatGPT 网站，并在页脚增加一个访问入口，还要美化该页面的UI效果</li><li><input checked="" disabled="" type="checkbox"> 给 ChatGPT 账号绑定虚拟信用卡并充值，以便长久使用，否则以后就没办法使用了</li><li><input checked="" disabled="" type="checkbox"> 开发一个生成随机文章链接的功能，能通过点击页脚实现随机访问某一篇文章的功能</li><li><input checked="" disabled="" type="checkbox"> 社交链接存在问题，点击会变大，返回后图标不会重新变小，适配屏幕尺寸修复问题</li><li><input checked="" disabled="" type="checkbox"> 编写本站隐私协议、版权协议、Cookies协议，并修复页脚的访问链接指向这些文章</li><li><input checked="" disabled="" type="checkbox"> 新增页面《客官打赏》，并将创建好的页面链接设置到页脚的对应处（手动添加资料）</li><li><input disabled="" type="checkbox"> 新增一个《个人简历》页面，并设置访问密码，然后在页脚新增一个链接指向该页面</li><li><input disabled="" type="checkbox"> 目前页面《各种统计》已经创建好并设置好了页脚的链接，该页面的内容和布局还未建设</li></ul><h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><ul><li><input checked="" disabled="" type="checkbox"> 取消头图的加载，但是保留原本头图所占据的空间</li><li><input checked="" disabled="" type="checkbox"> 美化文本选择框的颜色，并适配深色浅色两种模式</li><li><input checked="" disabled="" type="checkbox"> 美化文章页的引用框颜色，并适配深浅两种模式</li><li><input checked="" disabled="" type="checkbox"> 美化文章页的目录遮蔽色，并适配深浅两种模式</li><li><input checked="" disabled="" type="checkbox"> 美化页脚版权声明的颜色，并适配深浅两种模式</li><li><input checked="" disabled="" type="checkbox"> 美化页脚标签的边框和背景，并适配深浅两种模式</li><li><input disabled="" type="checkbox"> 代码块样式不够美观，而且不适配深浅两种模式</li></ul><h2 id="照片展"><a href="#照片展" class="headerlink" title="照片展"></a>照片展</h2><ul><li><input checked="" disabled="" type="checkbox"> 添加一个《壁纸收藏》的图集，并按照壁纸尺寸设置子图集，最后上传壁纸</li><li><input disabled="" type="checkbox"> 添加一个《生活记录》的图集，并上传几张生活照片（已经上传，持续更新）</li><li><input disabled="" type="checkbox"> 添加一个《迫于生计》的图集，并上传一些工作照片（还未上传）</li><li><input disabled="" type="checkbox"> 添加一个《出差印度》的图集，并上传一些工作照片（还未上传）</li><li><input disabled="" type="checkbox"> 图集子页的图片大小存在细微的不断变化，看起来图片是一直抖动的，需修复</li></ul><h2 id="休闲页"><a href="#休闲页" class="headerlink" title="休闲页"></a>休闲页</h2><ul><li><input checked="" disabled="" type="checkbox"> 使用插件 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 创建图书馆、玩游戏、电影院、音乐汇页面</li><li><input checked="" disabled="" type="checkbox"> 娱乐页面的侧边栏和主体内容长度差别大，主题添加新布局来去除侧边栏，保留评论区</li><li><input disabled="" type="checkbox"> 丰富自己的豆瓣资料（持续优化）</li><li><input disabled="" type="checkbox"> 网易云音乐整理，使音乐汇页面所有的推荐音乐跟网站左下角的音乐播放器联动（持续优化）</li><li><input disabled="" type="checkbox"> 豆瓣页的所有标题链接等颜色需要适配深浅两种模式</li></ul><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><ul><li><input checked="" disabled="" type="checkbox"> 在留言板页面填充适当的内容，不然看起来会非常突兀</li><li><input disabled="" type="checkbox"> 美化留言板对话框，类似聊天页，看起来会更和谐一些</li></ul><h2 id="关于我（目前还没开发）"><a href="#关于我（目前还没开发）" class="headerlink" title="关于我（目前还没开发）"></a>关于我（目前还没开发）</h2><ul><li><input disabled="" type="checkbox"> 最前面添加繁体猴这个名字的灵感由来</li><li><input disabled="" type="checkbox"> 添加个人简历的链接（页脚也需添加）</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>谁又不是在努力地活着</title>
      <link href="/album/work/index.html"/>
      <url>/album/work/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片整理中～～"><a href="#图片整理中～～" class="headerlink" title="图片整理中～～"></a>图片整理中～～</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>优秀链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>这些是我快乐过的证据</title>
      <link href="/album/life/index.html"/>
      <url>/album/life/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/life/开锅.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/第一桶金.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/啤酒.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/鸽子.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/原浆.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/户外烧烤.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/篮球.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/螃蟹.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/软件园打球.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/骑行.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/球队.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/台式1.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/游玩.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/台式2.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/life/自拍.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>1680*1050，适用小屏幕，比如常见的13寸屏幕</title>
      <link href="/album/wallpaper/1680/index.html"/>
      <url>/album/wallpaper/1680/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/1680/神泣02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/极光01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/女孩01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/非主流01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/女孩02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景03.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/神泣01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景04.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景05.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景06.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1680/风景07.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>收藏的一些壁纸，侵删</title>
      <link href="/album/wallpaper/index.html"/>
      <url>/album/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/1280.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">1280*720</div>  <p>较小尺寸，适合用作软件的背景图</p>  <a href='/album/wallpaper/1280'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/1680.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">1680*1050</div>  <p>适用小屏幕，比如常见的13寸屏幕</p>  <a href='/album/wallpaper/1680'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/1920.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">1920*1080</div>  <p>适用中等屏幕，最常见的1K壁纸</p>  <a href='/album/wallpaper/1920'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/1921.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">1920*1200</div>  <p>适用中等屏幕，比1K的屏幕稍高</p>  <a href='/album/wallpaper/1921'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/2560.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">2560*1440</div>  <p>适用大屏幕，最常见的2K壁纸</p>  <a href='/album/wallpaper/2560'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/2880.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">2880*1800</div>  <p>适用大屏幕，联想小新Pro14</p>  <a href='/album/wallpaper/2880'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://www.czblogs.cn/album/wallpaper/3840.jpeg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">3840*2160</div>  <p>适用带鱼屏，我用过的4K壁纸</p>  <a href='/album/wallpaper/3840'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>2560*1440，适用大屏幕，最常见的2K壁纸</title>
      <link href="/album/wallpaper/2560/index.html"/>
      <url>/album/wallpaper/2560/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/2560/女孩02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2560/宇宙01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2560/科比01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2560/风景01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2560/女孩01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2560/纯色01.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>1920*1080，适用中等屏幕，最常见的1K壁纸</title>
      <link href="/album/wallpaper/1920/index.html"/>
      <url>/album/wallpaper/1920/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/焰灵姬01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/樱木花道.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鲸鱼01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/宅男01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/卡沙.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/天气之子.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀03.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/科比.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀04.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/女孩01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀05.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/欧文.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/女孩02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀06.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/鬼刀07.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1920/神泣.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>本站的各种统计</title>
      <link href="/statistics/index.html"/>
      <url>/statistics/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面正在开发中～～～"><a href="#页面正在开发中～～～" class="headerlink" title="页面正在开发中～～～"></a>页面正在开发中～～～</h1><p>（因为涉及到各种平台API调用挤样式美化，开发难度较大）</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>1280*720，较小尺寸，适合用作软件的背景图</title>
      <link href="/album/wallpaper/1280/index.html"/>
      <url>/album/wallpaper/1280/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/1280/00.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/03.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/04.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/05.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/06.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/07.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/08.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/09.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/10.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/11.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/12.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/13.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/14.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/15.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/1280/16.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>3840*2160，适用带鱼屏，我用过的4K壁纸</title>
      <link href="/album/wallpaper/3840/index.html"/>
      <url>/album/wallpaper/3840/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/3840/女孩01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/艾克01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/KDA01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/女孩02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/凤凰01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/女孩03.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/鬼刀02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/女孩04.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/鬼刀03.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/鬼泣01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/湖泊01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/绿色01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/锐雯玉剑传说.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/萨勒芬妮01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/山景01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/萨勒芬妮02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/雪景01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/3840/KDA萨勒芬妮01.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>2880*1800，适用大屏幕，联想小新Pro14</title>
      <link href="/album/wallpaper/2880/index.html"/>
      <url>/album/wallpaper/2880/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://www.czblogs.cn/album/wallpaper/2880/06.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/01.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/02.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/03.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/04.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/05.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/07.jpeg","alt":""},{"url":"https://www.czblogs.cn/album/wallpaper/2880/08.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>人生中的最后一段青春</title>
      <link href="/album/indian/index.html"/>
      <url>/album/indian/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片整理中～～"><a href="#图片整理中～～" class="headerlink" title="图片整理中～～"></a>图片整理中～～</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>19200</title>
      <link href="/album/wallpaper/19200/index.html"/>
      <url>/album/wallpaper/19200/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>本站隐私协议</title>
      <link href="/privacy/index.html"/>
      <url>/privacy/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎访问 <a href="https://fattymonkey.com/">fattymonkey.com</a>（以下简称“本站”）！我们重视您的隐私，并致力于保护您的个人信息。请在使用本站服务之前阅读本隐私协议。</p></blockquote><p>生效日期：2023年09月01日～至今</p><h1 id="1：第三方服务"><a href="#1：第三方服务" class="headerlink" title="1：第三方服务"></a>1：第三方服务</h1><p>本站可能使用第三方服务，如Google Analytics等，来分析用户的访问行为。这些服务可能会收集关于您的信息，包括但不限于您的IP地址、浏览器类型、访问时间等信息。</p><h1 id="2：广告"><a href="#2：广告" class="headerlink" title="2：广告"></a>2：广告</h1><p>本站可能展示广告，广告商通过Cookie技术可能会收集与您访问本站相关的信息。这些信息将用于定向广告。</p><h1 id="3：隐私权保护"><a href="#3：隐私权保护" class="headerlink" title="3：隐私权保护"></a>3：隐私权保护</h1><p>本站将尽力保护用户的个人信息安全，不会未经授权向第三方公开、分享或出售用户的个人信息。</p><h1 id="4：外部链接"><a href="#4：外部链接" class="headerlink" title="4：外部链接"></a>4：外部链接</h1><p>本站可能包含指向其他网站的外部链接。我们不对这些网站的隐私政策和内容负责，建议您在访问这些网站时仔细阅读其隐私政策。</p><h1 id="5：隐私协议的修改"><a href="#5：隐私协议的修改" class="headerlink" title="5：隐私协议的修改"></a>5：隐私协议的修改</h1><p>我们保留随时修改本隐私协议的权利。在修改时，我们将在本页发布生效日期。</p><h1 id="6：联系我"><a href="#6：联系我" class="headerlink" title="6：联系我"></a>6：联系我</h1><p>如果您对本隐私协议有任何疑问或意见，请通过以下联系方式与我联系：</p><ul><li><p>邮件：<a href="mailto:&#x31;&#x31;&#x38;&#x35;&#x33;&#52;&#57;&#x38;&#52;&#x33;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;">&#x31;&#x31;&#x38;&#x35;&#x33;&#52;&#57;&#x38;&#52;&#x33;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;</a></p></li><li><p>微信：18262607107</p></li></ul><p>请注意，本隐私协议的条款仅适用于本站<a href="https://www.fattymonkey.com/">繁体猴の客栈</a>，感谢您的信任与支持！！！</p>]]></content>
      
    </entry>
    
    
  
</search>
