<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github + Vercel 搭建免费的个人图床</title>
      <link href="/post/23.html"/>
      <url>/post/23.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：写在前面"><a href="#第一节：写在前面" class="headerlink" title="第一节：写在前面"></a>第一节：写在前面</h1><h2 id="1-1：各种图床"><a href="#1-1：各种图床" class="headerlink" title="1.1：各种图床"></a>1.1：各种图床</h2><p>经常使用 Markdown 进行文章创作的人，肯定对“图床”这个概念不陌生，拥有个人图床则更是一个刚需！现在市面上的图床产品非常多，有免费的也有收费的，也有一些是“限量免费”的。</p><p>其中收费的有腾讯云和阿里云等云服务商提供的对象存储服务，基本是按流量收费的，费用很低，如果你不想折腾，又不差这点钱，我还是强烈建议使用大厂的对象存储！它们能兼顾稳定性和存取速度！（<font color=red>友情提示</font>：假如你使用这种按流量收费的图床服务并将其中的图片放到自己的网站上的话，一定要处理好安全配置，并配合 CDN 来使用，否则一旦你的网站被攻击恶意刷流量的话，那么可能一觉起来你就欠费上千块了！）</p><p>以七牛云为代表的图床也是不错的，但免费的图床一般都会有空间限制，比如你只有500MB的免费空间，当你图片超过这个免费额度后，就得购买新的空间了。此外，免费的图床还有一个致命的缺点，就是稳定性差！所谓稳定性差，就是有可能会倒闭或者跑路！试想以下，你辛辛苦苦攒的图片，因为图床供应商倒闭了或者跑路了，你的所有图片都会化为泡影！</p><p>免费的和收费的图床各有优劣，我就不再赘述了，我这篇博文主要是用来记录如何使用 Github 来搭建一个免费的图床！</p><h2 id="1-2：Github"><a href="#1-2：Github" class="headerlink" title="1.2：Github"></a>1.2：Github</h2><p>对于免费的图床，我选择的是 Github，使用 Github 搭建图床具备以下优势：</p><ul><li>很稳定，不会跑路，作为全球最大的代码托管平台，这一点毋庸置疑；</li><li>使用自己的仓库来存储图片，图片可以增量快速更新，跨设备管理；</li><li>因为使用 Git 进行上传和下载，可以进行版本管理和查看之前的版本；</li></ul><p>当然，Github 图床也有一些显著的缺点：</p><ul><li>每个仓库限制 1 G，超过这个容量就要新建一个仓库；</li><li>在国内由于网络限制，访问速度很不理想，甚至不能访问，但配合免费公共的 CDN，读取速度还是相当不错的；</li><li>使用 Github 做图床，你就担上了滥用开源的罪名！（<del>当我没说，哈哈</del>）</li></ul><h2 id="1-3：我的选择"><a href="#1-3：我的选择" class="headerlink" title="1.3：我的选择"></a>1.3：我的选择</h2><p>总体而言，使用 Github 做图床还是很可取的，尤其是存放那些经常被访问的图片（毕竟是免费的啊）。比如，在我的博客网站中有很多图片，所有的图片主要分为两类：第一类是网站的背景图等公共图片；第二类是文章中的插图等非公共资源。前者被访问的频率显然要比后者更高，这也就意味着在我的博客网站中公共图片会产生更多的流量。所以，我采取如下策略：首先，将经常被访问的公共图片放在 Github 上，这样就不用为这部分流量付钱了；其次，将非公共图片放到腾讯云的对象存储 COS 中，因为非公共图片被访问的频率低，并且图片较多，可以集成 PicGo 来实现一键上传，重要的是使用对象存储可以显著提供文件的加载速度，省去了配置 CDN 的麻烦。</p><p><font color=red>特别提示</font>：无论你将自己的图片托管在哪个平台上，都应该做好备份，因为只要是第三方的服务，都有可能因为各种各样的原因而失去，谁也不能保证万无一失！</p><h1 id="第二节：具体配置"><a href="#第二节：具体配置" class="headerlink" title="第二节：具体配置"></a>第二节：具体配置</h1><h2 id="2-1：创建仓库"><a href="#2-1：创建仓库" class="headerlink" title="2.1：创建仓库"></a>2.1：创建仓库</h2><p>登录 Github 官网，假如你还没有账号则需要注册一个，然后创建一个仓库，比如我创建的图床仓库：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021205430860.png"></p><p>点击最后的<code>Create repository</code>后，就创建了一个仓库：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021205644236.png"></p><h2 id="2-2：克隆仓库"><a href="#2-2：克隆仓库" class="headerlink" title="2.2：克隆仓库"></a>2.2：克隆仓库</h2><p>在你计算机本地找一个目录，将 Github 上创建的图床仓库克隆下来，比如我将其放在我桌面的<code>repository</code>文件中：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021205919665.png"></p><p>然后本地仓库就生成了：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021211146191.png"></p><h2 id="2-4：上传图片"><a href="#2-4：上传图片" class="headerlink" title="2.4：上传图片"></a>2.4：上传图片</h2><p>此时就可以使用 Git 往这个仓库中推送图片了，但为了方便图片的管理，一般我们会在仓库中创建子目录。比如我先创建了一个名为<code>avatars</code>的文件夹，然后在其中放入了一张名为<code>boy.png</code>的图片（顺便创建<code>.gitignore</code>文件）：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021211333758.png"></p><p><font color=red><strong>友情注意</strong></font>：此时就可以将本地仓库推送到 Github 仓库了！但是第一次提交代码的时候，需要验证用户名和密码，这里用户名输入 Github 的用户名，<font color=red>但密码则不是你的登录密码，而是你仓库的口令——token</font>！因为从 2021 年 8 月 13 日开始，Github 就不再接受密码验证了，转而接受 token！所以为了建立你的计算机和 Github 仓库的通信，你首先需要创建一个口令（假如你不知道如何创建口令，可以参考我的这篇博文<a href="https://www.fattymonkey.com/post/11.html">《Github使用口令替代密码来进行上传验证》</a>）！</p><p>上传成功以后，可以在 Github 仓库看到上传的资源：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021211801431.png"></p><h2 id="2-5：访问图片"><a href="#2-5：访问图片" class="headerlink" title="2.5：访问图片"></a>2.5：访问图片</h2><p>将图片上传到 Github 仓库后，我们怎么样访问仓库中的图片呢？使用如下两种路径：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/用户名/仓库名/blob/分支名/图片在仓库中的绝对路径?raw=true</span><br><span class="line">https://github.com/用户名/仓库名/raw/分支名/图片在仓库中的绝对路径</span><br></pre></td></tr></table></figure><p>比如访问仓库中位于<code>avatars</code>文件夹中的名为<code>boy.png</code>的图片，那么它的路径就是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/fattymonkey/blog-source/blob/main/avatars/boy.png?raw=true</span><br><span class="line">https://github.com/fattymonkey/blog-source/raw/main/avatars/boy.png</span><br></pre></td></tr></table></figure><h1 id="第三节：配置加速"><a href="#第三节：配置加速" class="headerlink" title="第三节：配置加速"></a>第三节：配置加速</h1><p>将图片上传到 Github 仓库以后，通过使用 Github 给我们的图片路径，就可以访问图片了。但此时还存在一个很严重的问题，就是网络问题。Github 是国外的网站，由于我们国内的网络限制，访问速度很慢，大多数时候甚至根本访问不了！为了解决这个问题，我们就必须为 Github 使用 CDN 加速！目前推荐的 CDN 加速有以下三种。</p><h2 id="3-1：Statically"><a href="#3-1：Statically" class="headerlink" title="3.1：Statically"></a>3.1：Statically</h2><p>很多人都知道 Jsdelivr，开发者们经常会用它来加速 CSS 或 JS 之类的静态资源，当然也会有部分哥们用它来加速图像服务（但在这里建议适量使用，滥用不是一个好的思想）。</p><p>Statically 也是一款为开发者免费提供的 CDN 加速服务，它与 Jsdelivr 一样有着深厚的资源支持，同时其支持的内容更加丰富一些。并且它目前是免费的，速度也是相当不错（且用且珍惜吧）。</p><h3 id="3-1-1：配置"><a href="#3-1-1：配置" class="headerlink" title="3.1.1：配置"></a>3.1.1：配置</h3><p>Statically 压根就不用配置，只需要在访问图片时，修改访问图片的 URL 路径即可。</p><h3 id="3-1-2：使用"><a href="#3-1-2：使用" class="headerlink" title="3.1.2：使用"></a>3.1.2：使用</h3><p>比如 Github 提供给我们的图片链接是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/用户名/仓库名/blob/分支名/图片在仓库中的绝对路径?raw=true</span><br><span class="line">https://github.com/用户名/仓库名/raw/分支名/图片在仓库中的绝对路径</span><br></pre></td></tr></table></figure><p>我们只需要将其修改为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.staticaly.com/gh/用户名/仓库名@分支名/图片在仓库中的绝对路径</span><br></pre></td></tr></table></figure><p>这样就可以访问了，简单且高效！</p><h2 id="3-2：Vercel"><a href="#3-2：Vercel" class="headerlink" title="3.2：Vercel"></a>3.2：Vercel</h2><p>Vercel 现在非常火爆，Vercel 类似 Github Pages，但远比 Github Pages 强大，速度也快得多，而且将 Github 授权给 Vercel 后，可以得到最优雅的发布体验只需要将代码推送，项目就自动更新部署了！Vercel 还支持 serverless 接口，这就意味着它不仅可以部署静态网站，还可以部署动态网站，而这些功能通通都是免费的，简直就是白嫖党的福利！Vercel 还支持 https ，不用自己去 FreeSSL 申请证书，更是省去了一大堆的证书配置，简直就是懒人的福利！</p><p>使用 Vercel 来部署我们的图床仓库，能极大的提升访问速度，因为它提供了全局的 CDN 加速！但是现在 Vercel 的域被墙了，需要绑定一个自己的域名才能在国内访问，并且有每个月 100 G 的流量限制（问题不大，我觉得完全够用）。</p><h3 id="3-2-1：注册账号"><a href="#3-2-1：注册账号" class="headerlink" title="3.2.1：注册账号"></a>3.2.1：注册账号</h3><p>访问 Vercel <a href="https://vercel.com/">官网</a>，建议选择使用 Github 账号来注册。<font color=red><strong>注意</strong></font>：大多数情况下我们的 Github 账号是用国内的邮箱注册的，但是 Vercel 在验证 Github 账号的时候会校验它的主邮箱，假如你 Github 的主邮箱是国内邮箱的话，就会注册失败！一旦你注册失败，就会出现下面的情况：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212119857.png"></p><p>建议<font color=red>在注册 Vercel 之前就把你 Github 的主邮箱修改为国外的邮箱</font>，如果你已经使用了国内的邮箱注册了 Github，那么：</p><ol><li><p>注册一个谷歌邮箱，国内访问<code>Gmail</code>的方案：</p><ul><li><p>直接使用 QQ 邮箱手机版，它提供 <code>Gmail</code> 的访问路线，可以直接注册并使用；</p></li><li><p>使用 <code>Ghelper</code> 等浏览器插件访问。详情可以参考这篇文章：<a href="https://github.com/Zfour/python_github_calendar_api/blob/master/posts/8c8df126">玩转 Microsoft-Edge</a></p></li></ul></li><li><p>将注册的谷歌邮箱设置为 Github 的主邮箱</p><ul><li><p><code>头像</code> &gt; <code>Settings</code> &gt; <code>Emails</code>，然后添加注册的谷歌邮箱，然后验证添加的邮箱；</p></li><li><p>最后在<code>Primary email address</code>下方选择前面添加的谷歌邮箱；</p></li></ul></li><li><p>访问Vercel官网，使用谷歌邮箱进行注册，注册的时候需要验证手机号，国内手机号也可以，完成注册</p></li></ol><h3 id="3-2-2：部署仓库"><a href="#3-2-2：部署仓库" class="headerlink" title="3.2.2：部署仓库"></a>3.2.2：部署仓库</h3><p>进入 Vercel 控制面板，点击页面的“Create a New Project”，在“Import Git Repository”处选择前面创建的仓库：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212501911.png"></p><p>然后点击对应仓库的“Import”按钮，然后直接点击“Deploy”按钮来部署：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212641548.png"></p><p>稍等片刻，就能看到部署项目成功的提示（Congratulations）：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021212815121.png"></p><p><font color=red>友情提示</font>：此时可见左边的项目页面报错 404，这是因为我们仓库的根目录下没有名为<code>index.html</code>的文件，我们可以在仓库根目录下创建这个文件，就能消除这个警告！比如我在仓库根目录下创建了这个文件，并编辑它的内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的博客资源<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:red;text-align: center;&quot;</span>&gt;</span>博客资源仓库部署成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传到仓库后，点击右上角的“Continue to Dashboard”，进入项目控制台，可见效果：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021213244947.png"></p><h3 id="3-2-3：绑定域名"><a href="#3-2-3：绑定域名" class="headerlink" title="3.2.3：绑定域名"></a>3.2.3：绑定域名</h3><p>Vercel 给我们分配了一个域名，也就是上图中的<code>blog-source-two.vercel.app</code>，原本我们可以使用这个域名来访问我们的仓库，但由于现<code>.app</code>这个域被墙了，所以我们需要配置一个自己的域名才能访问！</p><p>点击右上方的“Domains”，添加一个自己的域名：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021213457561.png"></p><p>然后点击“Add”，此时发现添加的域名是无效的：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021213951367.png"></p><h3 id="3-2-4：配置解析"><a href="#3-2-4：配置解析" class="headerlink" title="3.2.4：配置解析"></a>3.2.4：配置解析</h3><p>然后去我们购买域名的域名解析处，配置上图中提示给我们的两条解析记录，比如我的情况是：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021215659785.png"></p><p>配置完等待 DNS 生效，然后 Vercel 还会自动配置 SSL 安装证书，最终：</p><p><img src="https://www.czblogs.cn/posts/tools/03/image-20231021215815108.png"></p><h3 id="3-2-5：具体使用"><a href="#3-2-5：具体使用" class="headerlink" title="3.2.5：具体使用"></a>3.2.5：具体使用</h3><p>现在，我们就可以使用自定义的域名来访问图片了！访问的 URL 是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义域名/图片的仓库路径</span><br></pre></td></tr></table></figure><p>比如图片在仓库中的路径是<code>/avatars/boy.png</code>，那么就可以在浏览器地址栏中使用下面这两个路径来访问图片：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">czblogs.cn/avatars/boy.png</span><br><span class="line">www.czblogs.cn/avatars/boy.png</span><br></pre></td></tr></table></figure><p><font color=red>注意</font>：在 Markdown 中要加上<code>https://</code>，因为 Markdown 不能像浏览器那样自动为 URL 添加这个前缀！</p><h2 id="3-3：CloudFlare"><a href="#3-3：CloudFlare" class="headerlink" title="3.3：CloudFlare"></a>3.3：CloudFlare</h2><p>cloudflare 的访问速度比 Vercel 的速度差一点，Vercel 是我目前使用的方式，暂时先不更新 cloudflare 的配置和使用！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> CDN </tag>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这篇文章或许能让你彻底了解Markdown</title>
      <link href="/post/12.html"/>
      <url>/post/12.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：基本概述"><a href="#第一节：基本概述" class="headerlink" title="第一节：基本概述"></a>第一节：基本概述</h1><h2 id="1-1：它是什么"><a href="#1-1：它是什么" class="headerlink" title="1.1：它是什么"></a>1.1：它是什么</h2><blockquote><p>Markdown 是一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素，允许人们使用易读易写的纯文本格式编写文档。Markdown 由 John Gruber 于 2004 年创建，如今已成为世界上最受欢迎的标记语言之一。</p></blockquote><p>最开始的时候，人们使用记事本来编辑文档，但是后来发现纯文本文档真的太单调了！然后，Word 闪亮登场，从此 Word 就成为了编辑文本文档的主要工具，在 Word 中人们可以对任意的文字进行排版美化，比如设置各级标题以及文字的大小和颜色。Word 丰富多彩的文本样式，让它成为了主流的文本信息传播手段。但随着网络的发展，Word 文件过于笨重的缺点就暴露出来了，此时又诞生了 HTML，它可以使用轻量级的标记来实现文本文档的渲染，但是它的渲染功能依赖于解释环境（浏览器就是最常见的解释器），在信息传播的过程中没有那么随心所欲。</p><p>对于平时需要进行大量码字的人而言，显然笨重的 Word 和依赖浏览器的 HTML 都不符合他们的诉求。因此，诞生了 Markdown，它跟 HTML 语法一样，也是使用各种标记来实现文本样式的渲染，但是跟 HTML 相比，它更加轻量级，更加简单！在电脑系统中，Markdown 文本文件就是以<code>md</code>或<code>MD</code>为扩展名的文件！</p><p><font color=red>假如你对 HTML 有基本的了解，那么此时你就可以将 Markdown 理解为简化版的 HTML ！并且在 Markdown 文本中可以直接使用 HTML 元素而无需转译！</font></p><h2 id="1-2：使用场景"><a href="#1-2：使用场景" class="headerlink" title="1.2：使用场景"></a>1.2：使用场景</h2><p>由于 Markdown 轻量化、易读、易写的特性，并且对于图片、图表、数学公式等都有支援，目前许多网站都广泛使用它来撰写说明文档或是用于论坛上发表讯息，最常见的就是代码托管平台（比如国外的 Github 和国内的 Gitee）都采用 Markdown 语法来撰写 README 文件。当前，国内外比较知名的平台和大厂，也逐渐将 Markdown 作为文档标准！</p><p>此外，不管是学生、老师，亦或者是其他工作者，基本上有做笔记和码字需求的人，只要接触到 Markdown 以后，基本上都会被它的魅力折服，我们可以拿它来做笔记、演讲文稿、写博客……</p><h2 id="1-3：它的优势"><a href="#1-3：它的优势" class="headerlink" title="1.3：它的优势"></a>1.3：它的优势</h2><p>Markdown 有如下最明显的优势：</p><ol><li>语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版；</li><li>纯文本，易读易写，可以方便地纳入版本控制；</li><li>让使用者可以专注于文字内容本身；</li></ol><p>举个例子，假如你想在你的文档中编辑一个一级标题和一个二级标题，那么你只需要在 Markdown 文件中键入如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这是标题一</span><br><span class="line">## 这是标题二</span><br></pre></td></tr></table></figure><p>这是一段<font color=red>纯文本</font>，当把它拿到 Markdown 解析器或可以直接解释 Markdown 的编辑器中，它就是下面这个样子：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204007063.png"></p><p>一个<code>#</code>加一个空格则表示标题一，两个<code>#</code>加一个空格则表示标题二，以此类推.. 因此在 Markdown 中要想键入各个等级的标题，仅仅使用<code>#</code>和空格就可以实现了！</p><p>此外，现在一些优秀的 Markdown 编辑器，将它的编辑和解释结合，实现了更加便捷的编辑和展示效果！其中以 Typora 为代表。 在 Typora 中，当你键入<code>Ctrl</code>+<code>1</code>的快捷键，就可以在光标所在那一行（自然行，包括自动折行）的内容前面添加一个<code>#</code>及空格，直接将其设为一级标题，并且能实现“所键即所得”（能直接渲染出 Markdown 的样式而不改变 Markdown 源码）！</p><h2 id="1-4：它的局限"><a href="#1-4：它的局限" class="headerlink" title="1.4：它的局限"></a>1.4：它的局限</h2><p>Markdown 是纯文本文件，所以其本身不能存储图片，只能存储图片的链接！Markdown 插入图片的语法是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片路径)</span><br></pre></td></tr></table></figure><p>然后 Markdown 的编辑器在解析这段内容的时候，会自动将引用的图片放到这里，实现“图文并茂”！图片路径可以是相对路径或绝对路径，大多数情况下，我们在 Markdown 中插入图片时都是使用的相对路径，那么在传输文件的时候，若想要对方也能在该 Markdown 中看到我们插入的图片，就必须把图片也传过去，而且要求 Markdown 文件和图片所在的文件夹的相对位置不能改变，我认为这是 Markdown 目前最大的局限！</p><p><font color=red>PS</font>：我们可以使用图床来解决这个问题，但是图床不是我这篇博文的重点，故省略！</p><h1 id="第二节：基本语法"><a href="#第二节：基本语法" class="headerlink" title="第二节：基本语法"></a>第二节：基本语法</h1><p>Markdown 简洁的语法，号称半小时就可以掌握，学习成本很低，所有的语法在它的<a href="https://markdown.com.cn/intro.html">官网</a>或<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟驿站</a>中学得，我这里记录了一些我常用的 Markdown 语法，虽不全面，但是够我个人使用了，方便以后我来查询。</p><p>PS：官网提供了在线 Markdown 编辑器，在左边输入 Markdown 文本，在右边能直接展示出相应的效果，<a href="https://markdown.com.cn/editor/">网址在这</a>！</p><h2 id="2-1：标题"><a href="#2-1：标题" class="headerlink" title="2.1：标题"></a>2.1：标题</h2><p>Markdown 提供了六级标题，第 n 级标题就使用连续的 n 个<code>#</code>加上一个空格，后面跟上标题文本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题一</span><br><span class="line">## 标题二</span><br><span class="line">### 标题三</span><br><span class="line">#### 标题四</span><br><span class="line">##### 标题五</span><br><span class="line">###### 标题六</span><br></pre></td></tr></table></figure><p>PS：原始的 Markdown 只有三级标题，后来扩展到六级标题（因为 Markdown 的理念就是简化文本编辑，更多级的标题有悖于这个理论，所以最多只有六级标题）。</p><h2 id="2-2：斜体"><a href="#2-2：斜体" class="headerlink" title="2.2：斜体"></a>2.2：斜体</h2><p>使用一对<code>*</code>包裹的文本，会被解析为斜体：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*要斜体的文本*</span><br></pre></td></tr></table></figure><h2 id="2-3：粗体"><a href="#2-3：粗体" class="headerlink" title="2.3：粗体"></a>2.3：粗体</h2><p>使用一对<code>**</code>包裹的文本，会被解析为加粗字体：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**要加粗的文本**</span><br></pre></td></tr></table></figure><h2 id="2-4：引用"><a href="#2-4：引用" class="headerlink" title="2.4：引用"></a>2.4：引用</h2><p>对于引用的文本，可以使用<code>&gt;</code>和一个空格引出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用的文本</span><br></pre></td></tr></table></figure><h2 id="2-5：列表"><a href="#2-5：列表" class="headerlink" title="2.5：列表"></a>2.5：列表</h2><p>有序列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. first item</span><br><span class="line">2. second item</span><br><span class="line">3. third item</span><br></pre></td></tr></table></figure><p>无序列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- first item</span><br><span class="line">- second item</span><br><span class="line">- third item</span><br></pre></td></tr></table></figure><p>注意：<font color=red>数字或-跟后面的列表内容之间有且仅有一个空格！</font></p><h2 id="2-6：代码"><a href="#2-6：代码" class="headerlink" title="2.6：代码"></a>2.6：代码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure><p>PS：这里的符号是键盘 Tab 键上方的那个符号（英文输入模式）！</p><h2 id="2-7：链接"><a href="#2-7：链接" class="headerlink" title="2.7：链接"></a>2.7：链接</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[展示的文本](链接的地址)</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;链接的地址&gt;</span><br></pre></td></tr></table></figure><p>PS：后一种方式表示展示的文本和链接的地址相同！</p><h2 id="2-8：图片"><a href="#2-8：图片" class="headerlink" title="2.8：图片"></a>2.8：图片</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![alt text](image.jpg)</span><br></pre></td></tr></table></figure><p>这里的地址可以是绝对路径或相对路径，也可以是网上任意可用的图片 URL！</p><h2 id="2-9：分隔线"><a href="#2-9：分隔线" class="headerlink" title="2.9：分隔线"></a>2.9：分隔线</h2><p>使用三个连续的<code>-</code>来表示分隔线：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="2-10：删除线"><a href="#2-10：删除线" class="headerlink" title="2.10：删除线"></a>2.10：删除线</h2><p>使用一对<code>~~</code>包裹的文本，会被添加删除线：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~文本~~</span><br></pre></td></tr></table></figure><h2 id="2-11：内嵌HTML"><a href="#2-11：内嵌HTML" class="headerlink" title="2.11：内嵌HTML"></a>2.11：内嵌HTML</h2><p>对于Markdown涵盖范围之外的标签，都可以直接在文件里面用HTML本身。如需使用HTML，不需要额外标注这是HTML或是Markdown，只需HTML标签添加到Markdown文本中即可（反过来则不可以）。</p><p><font color=red><strong>第一类：行级标签</strong></font></p><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>和<code>&lt;cite&gt;</code>不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果你比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签的话，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This **word** is bold. This &lt;em&gt;word&lt;/em&gt; is italic.</span><br></pre></td></tr></table></figure><p><font color=red><strong>第二类：块状标签</strong></font></p><p>区块元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p><p>例如，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure><p><font color=red><strong>注意</strong></font>：Markdown语法在HTML区块标签中将不会被进行处理，也就是说，你不能在HTML块标签中使用Markdown语法！</p><h1 id="第三节：扩展语法"><a href="#第三节：扩展语法" class="headerlink" title="第三节：扩展语法"></a>第三节：扩展语法</h1><h2 id="3-1：表格"><a href="#3-1：表格" class="headerlink" title="3.1：表格"></a>3.1：表格</h2><p>要添加表格，请使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列，可以选择在表的任一端添加管道：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204048531.png"></p><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。比如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204121309.png"></p><h2 id="3-2：脚注"><a href="#3-2：脚注" class="headerlink" title="3.2：脚注"></a>3.2：脚注</h2><p>脚注的使用频率很低，采用<code>[^数字]</code>用来表示脚注，比如在文本中使用<code>[^数字]</code>来添加一个标记：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here&#x27;s a sentence with a footnote. [^1]</span><br></pre></td></tr></table></figure><p>然后就可以在页脚处来表明脚注来源了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^1]: This is the footnote.</span><br></pre></td></tr></table></figure><h2 id="3-3：代码块"><a href="#3-3：代码块" class="headerlink" title="3.3：代码块"></a>3.3：代码块</h2><p>代码块使用如下的方式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```代码语言</span><br><span class="line">这是代码</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>比如一段Python代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">nums = &#123;1, 2, 3&#125;</span><br><span class="line">for i in nums:</span><br><span class="line">    print(i)</span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="3-4：定义列表"><a href="#3-4：定义列表" class="headerlink" title="3.4：定义列表"></a>3.4：定义列表</h2><p>除了前面的有序列表和无序列表以外，我们还可以自定义列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is the definition of the first term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is one definition of the second term.</span><br><span class="line">: This is another definition of the second term.</span><br></pre></td></tr></table></figure><p>类似于 HTML 中的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5：标题编号"><a href="#3-5：标题编号" class="headerlink" title="3.5：标题编号"></a>3.5：标题编号</h2><p>所谓标题编号，就是给标题自定义一个id选择器。比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 标题三 &#123;#custom-id&#125;</span><br></pre></td></tr></table></figure><p>相当于 HTML 中的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;custom-id&quot;</span>&gt;</span>标题三<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样一来，其他网站中要想跳转到被编号的标题为止，可以在编号所在网页完整的 URL 后面添加<code>#custom-id</code>来链接！</p><h2 id="3-6：任务列表"><a href="#3-6：任务列表" class="headerlink" title="3.6：任务列表"></a>3.6：任务列表</h2><p>所谓任务列表，就是在一个普通列表的前面会有方括号，其中会有对号表示完成的内容，比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br><span class="line">- [ ] Contact the media</span><br></pre></td></tr></table></figure><p>展示效果如下：</p><p><img src="https://www.czblogs.cn/posts/tools/02/image-20231021204150715.png"></p><p>~~</p><p>~~</p><p>~~</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用口令替代密码来进行上传验证</title>
      <link href="/post/11.html"/>
      <url>/post/11.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一节：错误描述"><a href="#第一节：错误描述" class="headerlink" title="第一节：错误描述"></a>第一节：错误描述</h1><h2 id="1-1：报错信息"><a href="#1-1：报错信息" class="headerlink" title="1.1：报错信息"></a>1.1：报错信息</h2><p>假如你在 2021 年 8 月 13 日前后都往 Github 上提交过代码，那么在这个时间点以后，你肯定遇到过类似下面的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021.</span><br></pre></td></tr></table></figure><p>比如，我在 Github 上创建了一个新的仓库，并且用一台新的电脑第一次往这个仓库中提交代码，当提示我输入用户名和密码的时候，我照做了（且用户名和密码都输入正确），但是结果却报错：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021170548378.png"></p><h2 id="1-2：分析原因"><a href="#1-2：分析原因" class="headerlink" title="1.2：分析原因"></a>1.2：分析原因</h2><p>由报错信息可知，从 2021 年 8 月 13 日开始，Github 删除了对使用密码进行身份验证的支持！也就是说，之前你在提交代码时（第一次提交）使用 GitHub 的用户名和密码进行验证的方式已经不能使用了，用户名是指 Github 的用户名，密码则是 Github 的登录密码！</p><p>通过查阅官方文档，我发现 <font color=red>Github 现在提交代码时使用 token（口令）来替代登录密码来进行验证！</font>即使在提交代码时要求你输入的是“Password”，你依然应该输入 token 而不是 password！</p><h1 id="第二节：使用口令"><a href="#第二节：使用口令" class="headerlink" title="第二节：使用口令"></a>第二节：使用口令</h1><h2 id="2-1：创建口令"><a href="#2-1：创建口令" class="headerlink" title="2.1：创建口令"></a>2.1：创建口令</h2><p>点击 Github 主页头像，选择<code>Settings</code>，然后点击侧边栏的<code>&lt;&gt;Developer settings</code>，跳转到如下页面：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021170651466.png"></p><p>展开侧边栏的<code>Personal access token</code>，并点击<code>Token(classic)</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021170914227.png"></p><p>跳转后，假如你还没有创建口令，依次点击<code>Generate new token</code> &gt; <code>Generate new token(classic)</code>：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171027238.png"></p><p>然后，对即将生成的口令进行初始化设置，比如我创建一个个人使用的永远不过期的口令：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171238531.png"></p><p>解释一下这里的设置：</p><ul><li>Note：任意填写，因为我们可能会创建很多口令，这个用来标记不同的口令，防止忘记；</li><li>Expiration：有效期，可选的有7天、30天、60天、90天、不限制，还可以自己定制时长；</li><li>Select scopes：选择范围，就是说你创建的这个口令具备的权限，勾选 repo 表示赋予仓库级别的权限；</li></ul><p>最后点击最下面的<code>Generate token</code>按钮，完成创建，页面自动生成口令：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171245030.png"></p><p>注意：口令生成以后记得保存下来，一旦离开这个页面再进来，就看不到之前生成的口令明文了</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171329123.png"></p><h2 id="2-2：使用口令"><a href="#2-2：使用口令" class="headerlink" title="2.2：使用口令"></a>2.2：使用口令</h2><p>使用口令很简单，只需要在推送代码时将其作为密码来使用即可：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021171514066.png"></p><p>一旦你使用了口令以后，口令会自动保存在你的计算机缓存文件中，下次再推送的时候就不需要重复输入了。比如在 Mac 中，使用了口令以后，就可以在钥匙串中找到：</p><p><img src="https://www.czblogs.cn/posts/tools/01/image-20231021172121473.png"></p><p>友情提示：从这里可以找到明文的口令，但是前提是你已经用口令提交过至少一次代码，所以在上面生成口令的时候一定要先复制保存起来！！！</p><p>～～</p><p>～～</p><p>～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面建设中"><a href="#页面建设中" class="headerlink" title="页面建设中"></a>页面建设中</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图片展</title>
      <link href="/images/index.html"/>
      <url>/images/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面建设中"><a href="#页面建设中" class="headerlink" title="页面建设中"></a>页面建设中</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>优秀链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影院</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面建设中"><a href="#页面建设中" class="headerlink" title="页面建设中"></a>页面建设中</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐汇</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面建设中"><a href="#页面建设中" class="headerlink" title="页面建设中"></a>页面建设中</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
